
public final class IntOption  extends Option{
	private intDefaultValue int 
	private intValue int 
	
	fn IntOption(d int) {
		this.super() 
		.intDefaultValue = d 
	}
	
	protected fn reset() {
		this.intValue = .intDefaultValue 
	}
	
	protected fn parse(s string) -> (err error) {
		bs := []byte(s)
		isNegative := false 
		if bs[0] == '-' {
			isNegative = true 
			bs = bs[1:]
		}
		var value int 
		for b := range bs {
			if '0' <= b  && b <= '9'{
				value = value * 10 + int(b - '0')
			}else {
				err = new error(sprintf("'%s' format int wrong" , s ))
				return 
			}
		}
		if isNegative {
			value = -value 
		}
		this.intValue = value 
	} 
	
	public fn getValue() -> (v int = this.intValue ){ }
	
	protected fn  formatDefaultValue() -> ( format string  = "" + .intDefaultValue  ) { }
}