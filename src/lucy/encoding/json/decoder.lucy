
import "java/lang/Object";


enum JSON_SYNTAX_TREE_TYPE {
	JSON_SYNTAX_TREE_TYPE_ARRAY = 1  ,
	JSON_SYNTAX_TREE_TYPE_OBJECT ,
	JSON_SYNTAX_TREE_TYPE_INTERGER , 
	JSON_SYNTAX_TREE_TYPE_BOOL , 
	JSON_SYNTAX_TREE_TYPE_STRING ,
	JSON_SYNTAX_TREE_TYPE_NULL 
}




class JsonSyntaxTreeNode {
	Type JSON_SYNTAX_TREE_TYPE ;
	boolValue bool ; 
	intValue long ; 
	stringValue string ; 
	arrayElements []JsonSyntaxTreeNode ; 
	keyPairs []JsonKeyPair;
}


class JsonKeyPair {
	k string ; 
	v JsonSyntaxTreeNode;
}






class Decoder {
	x Object ;
	bs []byte;
	offset int ; 
	tree JsonSyntaxTreeNode ; 
	
	public fn Decoder(x Object,bs []byte) {
		this.x = x;
		this.bs = bs;
		this.tree = new JsonSyntaxTreeNode();
	}
	
	fn generateSyntaxTree() -> (err error) {
		
	}
	

	fn parseString() -> (s string) {

	}
	fn isDigit(b byte) -> (is bool) {
		is = b >= '0' && b <= '9';
	}
	fn isLetter(b byte) -> (is bool) {
		is = (b >= 'a' && b <= 'z') || 
				(b >= 'A' && b <= 'Z') ;
	}

	public fn decode() -> (err error){
		err = this.generateSyntaxTree();
		if err != null {
			return ; 
		}

	}



}














































