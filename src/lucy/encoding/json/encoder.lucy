
import "java/lang/Object";
import "java/lang/Class";
import "java/lang/Integer";
import "java/lang/reflect/Array";
import "java/util/AbstractMap";





class Encoder {
	x Object;
	c Class;
	format bool ; 

	public fn Encoder(x Object,format bool ) {
		this.x = x;
		if x != null {
			this.c = x.getClass();
		}
		this.format = format ; 
	}

	public fn encode()->(bs []byte ,err error){
		if this.x == null {
			return []byte("null") , null ;
		}
		if this.isPrimitive(){
			return []byte(this.x.toString()) , null; 
		} 
		if this.isMap() {
			return this.encodeMap();
		}
		if this.c.getTypeName() == "java.lang.String" {
			return []byte("\"" + this.x.toString() +"\"") , null ;
		}
		if this.c.isArray() {
			return this.encodeArray();
		}
		return this.encodeObject();
	}

	fn isMap() ->(is bool) {
		c := this.c;
		for c.getTypeName() != "java.lang.Object" {
			if c.getTypeName() == "java.util.AbstractMap"{
				is = true;
				return ;
			}
			c = c.getSuperclass();
		}
	}

	public fn encodeMap() -> (bs []byte ,err error){
		x , _ := this.x.(AbstractMap);
		ks := x.keySet().toArray();
		bs = []byte("{");
		for k,v := range ks {
			bs2,err := (new Encoder(v , this.format)).encode();
			if err != null {
				return null , err ; 
			}
			bs.appendAll([]byte("\"") , bs2);
			bs.appendAll( []byte ("\" : "));
			bs2,err = (new Encoder(x.get(v)  , this.format)).encode();
			if err != null {
				return null , err ; 
			}
			bs.appendAll(bs2);
			if k != ks.size() - 1 {
				bs.appendAll([]byte(" , "));
			}
		}
		bs.append('}');
	}
	public fn encodeArray() -> (bs []byte ,err error){
		bs = []byte("[");
		length := Array.getLength(this.x);
		for i := 0 ;i < length ;i ++ {
			bs2,err := ( new Encoder( Array.get(this.x  , i) ,   this.format )) . encode();
			if err != null {
				return null,err ; 
			}
			bs.appendAll(bs2);
			if i != length -1 {
				bs.append(',');
			}
		}
		bs.append(']');
	}

	//TODO :: why 'this.c.isPrimitive()' not working,when find why remove this function
	public fn isPrimitive()-> (is bool) {
		typeName := this.c.getTypeName();
		is = typeName == "java.lang.Boolean" || 
			typeName ==  "java.lang.Byte" || 
			typeName ==  "java.lang.Short" || 
			typeName ==  "java.lang.Character" || 
			typeName ==  "java.lang.Integer" || 
			typeName ==  "java.lang.Float" ||
			typeName ==  "java.lang.Double" ; 
	}

	public fn encodeObject() ->  (bs []byte ,err error){
		bs = []byte("{") ;
		fs := this.c.getFields();
		for k,f := range fs {
			bs.appendAll([]byte(  "\"" + f.getName() + "\" : "));
			bsv,err := ( new Encoder(f.get(this.x) , this.format)).encode();
			if err != null {
				return null,err;
			}
			bs.appendAll(bsv);

			if k != fs.size() - 1 {
				bs.appendAll([]byte{' ', ',' ,' '});
			}
		}
		bs.append('}'); 
	}
}





























