
import "java/lang/Object"
import "java/lang/Class"
import "java/lang/reflect/array"
import "java/util/AbstractMap"



public class Encoder {
	x Object
	c Class
	indent string  
	indents string 
	

	public fn Encoder(x Object, indents string  = "", indent string  = "" ) {
		this.super()
		this.x = x
		if x != null {
			this.c = x.getClass()
		}
		this.indents = indents 
		this.indent = indent  
	}
	
	
	public fn encode()->(bs []byte ){
		if this.x == null {
			return []byte("null")
		}
		if this.c.isPrimitive(){
			return []byte(this.x.toString())
		} 
		if this.c.getTypeName() == "java.lang.String" {
			s := []byte{'"'} 
			for k,v := range []byte(this.x.toString()) {
				s.append(v)
				if v == '\\'{
					s.append('\\')
				}
			}
			s.append('"')
			return s
		}
		if isMap(this.c) {
			return this.encodeMap()
		}
		if this.c.isArray() {
			return this.encodeArray()
		}
		return this.encodeObject()
	}
		

	private fn encodeMap() -> (bs []byte){
		x , _ := this.x.(AbstractMap)
		ks := x.keySet().toArray()
		bs = []byte("{")
		if this.indent != "" {
			bs.append('\n') 
		}
		for k , v := range ks {
			Encoder.validForMapKey(v)
			bs.appendAll([]byte(this.indents + this.indent ))
            bs.append('"')
            bs.appendAll([]byte(v.toString()))
            bs.append('"' , ':')
			vv := x.get(v)
			var bs2 []byte
			if vv == null {
				bs.appendAll([]byte("null"))
				if k != ks.size() - 1 {
					bs.appendAll([]byte(","))
				}
				if this.indent != "" {
					bs.append('\n')
				}
				continue 
			}
			if .isPrimitiveObject(vv) {
				bs2 = []byte(vv.toString())
			}else {
				bs2  = (new Encoder(x.get(v) , this.indents + this.indent , this.indent )).encode()
			}
			bs.appendAll(bs2)
			if k != ks.size() - 1 {
            	bs.appendAll([]byte(","))
            }
			if this.indent != "" {
            	bs.append('\n')
            }
		}
		bs.appendAll([]byte(this.indents + "}"))
	}
	
	private static fn isPrimitiveObject(o Object) -> (is bool) {
		name := o.getClass().getName()
		is = name == "java.lang.Boolean" ||
			name == "java.lang.Byte" ||
			name == "java.lang.Character" ||
			name == "java.lang.Integer" ||
			name == "java.lang.Long" ||
			name == "java.lang.Float" ||
			name == "java.lang.Double"
	}

	
	private static fn validForMapKey(x Object) {
		c := x.getClass()
		typeName := c.getTypeName()
		if  typeName ==  "java.lang.Byte" || 
			typeName ==  "java.lang.Short" || 
			typeName ==  "java.lang.Character" || 
			typeName ==  "java.lang.Integer" || 
			typeName ==  "java.lang.Float" ||
			typeName ==  "java.lang.Double" || 
			typeName == "java.lang.String" {
				
			}else {
				panic(sprintf("'%s' not valid for map key" , typeName))
			}
	}


	private fn encodeArray() -> (bs []byte ){
		bs = []byte("[")
		if this.indent != "" {
			bs.append('\n')
		}
		length := array.getLength(this.x)
		for i := 0; i < length; i ++ {
			bs.appendAll([]byte(this.indents))
			bs2  :=  new Encoder( array.get(this.x  , i) , this.indents + this.indent ,  this.indent  ) . encode()
			bs.appendAll([]byte(this.indents + this.indent) )
			bs.appendAll(bs2)
			if i != length -1 {
				bs.append(',')
			}
			if this.indent != "" {
				bs.append('\n')
			}
		}
		bs.appendAll( []byte(this.indents +  "]"))
	}

	
	private fn encodeObject()->  (bs []byte ){
		bs = []byte("{")
		if this.indent != "" {
			bs.append('\n')
		}
		fs := this.c.getFields()
		for k,f := range fs {
			bs.appendAll([]byte(this.indents + this.indent))
			bs.appendAll([]byte("\"" + f.getName() + "\":"))
			if f.getType().isPrimitive() {
				bsv := []byte(f.get(this.x).toString())
				bs.appendAll(bsv)
				if k != fs.size() - 1 {
					bs.appendAll([]byte{ ',' })
				}
				if this.indent != "" {
					bs.append('\n')
				}
			}else {
				bsv := ( new Encoder(f.get(this.x) ,this.indents + this.indent, this.indent)).encode()
				bs.appendAll(bsv)
				if k != fs.size() - 1 {
					bs.appendAll([','])
				}
				if this.indent != "" {
					bs.append('\n')
				}
			}
		}
		bs.appendAll([]byte(this.indents +  "}"))
	}
}

