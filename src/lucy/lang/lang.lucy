
import "java/lang/Object" as javaRootClass;



/*
	root object for lucy language default object
*/
public class Lucy extends javaRootClass {
	public fn Lucy() {
		this.super() 
	}
}



 

public fn copy(dest T,src T , start int = 0 , end int = -1) {
	if end == -1 {
		end = src.size();
	}
	for i := start ; i < end ; i++ {
		dest[i] = src[i] ; 
	}
}

 
public fn javaArray2Lucy(java T[] ,start int = 0 , end int = -1 ) -> (lucy []T) {
	import "lucy/deps"
	if end == -1 {
		end = java.size()  
	}
	type retType = []T
	switch T {
		case bool:
			a := new deps.ArrayBool()
			a.start = start 
			a.end = end 
			a.cap = len(java)
			a.elements = java
			lucy = retType(a)
			
		case byte:
			a := new deps.ArrayByte()
			a.start = start 
			a.end = end 
			a.cap = len(java)
			a.elements = java
			lucy = retType(a)
			
		case short:
			a := new deps.ArrayShort()
			a.start = start 
			a.end = end 
			a.cap = len(java)
			a.elements = java
			lucy = retType(a)
			
		case int:
			a := new deps.ArrayInt()
			a.start = start 
			a.end = end 
			a.cap = len(java)
			a.elements = java
			lucy = retType(a) 
		case long:
			a := new deps.ArrayLong()
			a.start = start 
			a.end = end 
			a.cap = len(java)
			a.elements = java
			lucy = retType(a)
			
		case float:
			a := new deps.ArrayFloat()
			a.start = start 
			a.end = end 
			a.cap = len(java)
			a.elements = java
			lucy = retType(a)
			
		case double:
			a := new deps.ArrayDouble()
			a.start = start 
			a.end = end 
			a.cap = len(java)
			a.elements = java
			lucy = retType(a)
			
		case string:
			a := new deps.ArrayString()
			a.start = start 
			a.end = end 
			a.cap = len(java)
			a.elements = java
			lucy = retType(a)
			
	}
}
 











