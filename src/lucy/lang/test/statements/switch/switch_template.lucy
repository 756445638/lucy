// all rights reserved , check the LICENSE file

import "lucy/lang"

fn testT <T> ( t T) ->(typeString string) {
	when T {
		case bool:
			typeString = "bool"
	    case byte:
			typeString = "byte"
		case short:
			typeString = "short"
		case int:
			typeString = "int"
		case long:
			typeString = "long"
		case float:
			typeString = "float"
		case double:
			typeString = "double"
		case []Lucy:
			typeString = "[]Lucy"
		case Lucy:
			typeString = "Lucy"
		//default:
			///panic(new error("no match"))
	}
}


fn testSwitchTemplate() {
	ok := testT(true) == "bool" && 
		testT('a') == "byte" && 
		testT(1s) == "short" && 
		testT(1) == "int" && 
		testT(1L) == "long" && 
		testT(1f) == "float" && 
		testT(1.0D) == "double" && 
		testT(new []lang.Lucy(10)) == "[]Lucy" && 
		testT(new Lucy()) == "Lucy"  
	
    if ok == false {
        panic(wrongBranch)
    }
}
































