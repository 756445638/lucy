

fn testByte()->(ok bool = true){
	var a ,b byte;
	a = 2b;
	b = 1b;
	if true != a > b {
		ok = false;
		return ;
	}
	if true != a >= b {
		ok = false;
		return ;
	}
	if false !=  a < b {
		ok = false;
		return ;
	}
	if false != a <= b  {
		ok = false;
		return ;
	}
	if false != (a == b)  {
		ok = false;
		return ;
	}
	if  true != (a != b)   {
		ok = false;
		return ;
	}
}


fn testShort()->(ok bool = true){
	var a ,b short;
	a = 2s;
	b = 1s;
	if true != a > b {
		ok = false;
		return ;
	}
	if true != a >= b {
		ok = false;
		return ;
	}
	if false !=  a < b {
		ok = false;
		return ;
	}
	if false != a <= b  {
		ok = false;
		return ;
	}
	if false != (a == b)  {
		ok = false;
		return ;
	}
	if  true != (a != b)   {
		ok = false;
		return ;
	}
}


fn testInt()->(ok bool = true){
	var a ,b int;
	a = 2;
	b = 1;
	if true != a > b {
		ok = false;
		return ;
	}
	if true != a >= b {
		ok = false;
		return ;
	}
	if false !=  a < b {
		ok = false;
		return ;
	}
	if false != a <= b  {
		ok = false;
		return ;
	}
	if false != (a == b)  {
		ok = false;
		return ;
	}
	if  true != (a != b)   {
		ok = false;
		return ;
	}
}


fn testLong()->(ok bool = true){
	var a ,b long;
	a = 2L;
	b = 1L;
	if true != a > b {
		ok = false;
		return ;
	}
	if true != a >= b {
		ok = false;
		return ;
	}
	if false !=  a < b {
		ok = false;
		return ;
	}
	if false != a <= b  {
		ok = false;
		return ;
	}
	if false != (a == b)  {
		ok = false;
		return ;
	}
	if  true != (a != b)   {
		ok = false;
		return ;
	}
}



fn testIntegers(){
	if false == testByte() {
		panic(new error("test byte failed"));
	}

    if false == testShort() {
		panic(new error("test short failed"));
	}
	if false == testInt() {
		panic(new error("test int failed"));
	}
    if false == testLong() {
		panic(new error("test  failed"));
	}
}



















