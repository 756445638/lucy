import "lucy/binary"

public class AttributeLocalVariableTable {
    locals []LocalVariableTable

    fn appendLocal(local LocalVariableTable) {
        if this.locals == null {
            this.locals = [local]
        } else {
            this.locals.append(local)
        }
    }

    fn toAttributeInfo(c Class) -> (ret AttributeInfo) {
        if len(this.locals) == 0 {
            return null
        }
        ret = new AttributeInfo()
        ret.nameIndex = c.insertUtf8Const("LocalVariableTable")
        ret.info = new []byte(2)
        binary.BigEndian.putChar(ret.info , char(len(this.locals)))
        for v := range this.locals {
            bs := new []byte(10)
            binary.BigEndian.putChar(bs , v.startPc)
            binary.BigEndian.putChar(bs[2:] , v.length)
            binary.BigEndian.putChar(bs[4:] , v.nameIndex)
            binary.BigEndian.putChar(bs[6:] , v.descriptorIndex)
            binary.BigEndian.putChar(bs[8:] , v.index)
            ret.info.appendAll(bs)
        }
        ret.attributeLength = len(ret.info)
    }
}


class LocalVariableTable {
    startPc         char
    length          char
    nameIndex       char
    descriptorIndex char
    index           char

    fn LocalVariableTable(startPc char,
        length char,
        nameIndex char,
        descriptorIndex char,
        index char) {
        this.super()
        this.startPc = startPc
        this.length = length
        this.nameIndex = nameIndex
        this.descriptorIndex = descriptorIndex
        this.index = index
    }
}


