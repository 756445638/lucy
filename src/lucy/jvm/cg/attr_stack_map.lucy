import "lucy/binary"

public interface StackMap {
    public fn toBytes() -> ([]byte)
}


public class AttributeStackMap {
    public StackMaps []StackMap
    
    static fn fromBs(bs []byte) -> (sm AttributeStackMap) {
        length := binary.BigEndian.getChar(bs)
        bs = bs[2:]
        sm = new AttributeStackMap()
        sm.StackMaps = new []StackMap(length)
        for i := 0 ; i < length ; i++ {
            frameType := bs[0]
            bs = bs[1:]
            switch frameType {
                case 0b <= frameType && frameType <= 63b:
                    sm.StackMaps[i] = new StackMapSameFrame(frameType)
                case 64b <= frameType && frameType <= 127b:
                    var v StackMapVerificationTypeInfo
                    v , bs = StackMapVerificationTypeInfo.fromBs(bs)
                    sm.StackMaps[i] = new StackMapSameLocals1StackItemFrame(frameType , v)
                case 247b:
                    delta := binary.BigEndian.getChar(bs)
                    bs = bs[2:]
                    var v StackMapVerificationTypeInfo
                    v , bs = StackMapVerificationTypeInfo.fromBs(bs)
                    sm.StackMaps[i] = new StackMapSameLocals1StackItemFrameExtended(frameType , delta , v)
                case 248b <= frameType && frameType <= 250:
                    delta := binary.BigEndian.getChar(bs)
                    bs = bs[2:]
                    sm.StackMaps[i] = new StackMapChopFrame(frameType , delta)
                case 251b:
                    delta := binary.BigEndian.getChar(bs)
                    bs = bs[2:]
                    sm.StackMaps[i] = new StackMapSameFrameExtended(frameType , delta)
                case 252b <= frameType && frameType <= 254b:
                    delta := binary.BigEndian.getChar(bs)
                    bs = bs[2:]
                    length := frameType - 251b
                    vs := new []StackMapVerificationTypeInfo(length)
                    for i := 0 ; i < length ; i++ {
                        vs[i] , bs = StackMapVerificationTypeInfo.fromBs(bs)
                    }
                    sm.StackMaps[i] = new StackMapAppendFrame(frameType , delta , vs)
                case 255b:
                    delta := binary.BigEndian.getChar(bs)
                    bs = bs[2:]
                    length := binary.BigEndian.getChar(bs)
                    bs = bs[2:]
                    locals := new []StackMapVerificationTypeInfo(length)
                    for i := 0 ; i < length ; i++ {
                        locals[i] , bs = StackMapVerificationTypeInfo.fromBs(bs)
                    }
                    length = binary.BigEndian.getChar(bs)
                    bs = bs[2:]
                    stacks := new []StackMapVerificationTypeInfo(length)
                    for i := 0 ; i < length ; i++ {
                        stacks[i] , bs = StackMapVerificationTypeInfo.fromBs(bs)
                    }
                    sm.StackMaps[i] = new StackMapFullFrame(frameType , delta , locals , stacks)
                default:
                    panic(sprintf("unkown frame type:%d" , frameType))
            }
        }
    }

    public fn append(s StackMap) {
        if this.StackMaps == null {
            this.StackMaps = [s]
        } else {
            this.StackMaps.append(s)
        }
    }

    fn toAttributeInfo(c Class) -> (ret AttributeInfo) {
        if this == null || len(this.StackMaps) == 0 {
            return null
        }
        info := new AttributeInfo()
        info.nameIndex = c.insertUtf8Const(AttributeNameStackMap)
        bs := new []byte(2)
        binary.BigEndian.putChar(bs , char(len(this.StackMaps)))
        for _ , v := range this.StackMaps {
            bs.appendAll(v.toBytes())
        }

        info.info = bs
        info.attributeLength = (len(info.info))
        return info
    }
}


public class StackMapSameFrame implements StackMap {
    public frameType byte

    public fn StackMapSameFrame(frameType byte) {
        this.super()
        this.frameType = frameType
    }
    public fn toBytes() -> (bs []byte) {
        return []byte{this.frameType}
    }
}


public class StackMapSameLocals1StackItemFrame implements StackMap {
    public frameType byte
    public stack     StackMapVerificationTypeInfo

    public fn StackMapSameLocals1StackItemFrame(frameType byte , stack StackMapVerificationTypeInfo) {
        this.super()
        this.frameType = frameType
        this.stack = stack
    }
    public fn toBytes() -> (bs []byte) {
        bs = []byte{this.frameType}
        bs.appendAll(this.stack.toBytes())
        return bs
    }
}


public class StackMapSameLocals1StackItemFrameExtended implements StackMap {
    public frameType byte
    public delta     char
    public stack     StackMapVerificationTypeInfo
    public fn StackMapSameLocals1StackItemFrameExtended(frameType byte , delta char , stack StackMapVerificationTypeInfo) {
        this.super()
        this.frameType = frameType
        this.delta = delta
        this.stack = stack

    }
    public fn toBytes() -> (bs []byte) {
        bs = new []byte(3)
        bs[0] = this.frameType
        binary.BigEndian.putChar(bs[1:] , this.delta)
        bs.appendAll(this.stack.toBytes())
        return
    }
}


public class StackMapChopFrame implements StackMap {
    public frameType byte
    public delta     char
    public fn StackMapChopFrame(frameType byte , delta char) {
        this.super()
        this.frameType = frameType
        this.delta = delta
    }
    public fn toBytes() -> (bs []byte) {
        bs = new []byte(3)
        bs[0] = this.frameType
        binary.BigEndian.putChar(bs[1:] , this.delta)
        return bs
    }
}


public class StackMapSameFrameExtended implements StackMap {
    public frameType byte
    public delta     char
    public fn StackMapSameFrameExtended(frameType byte , delta char) {
        this.super()
        this.frameType = frameType
        this.delta = delta
    }
    public fn toBytes() -> (bs []byte) {
        bs = new []byte(3)
        bs[0] = this.frameType
        binary.BigEndian.putChar(bs[1:] , this.delta)
        return bs
    }
}


public class StackMapAppendFrame implements StackMap {
    public frameType byte
    public delta     char
    public locals    []StackMapVerificationTypeInfo

    public fn StackMapAppendFrame(frameType byte , delta char , locals []StackMapVerificationTypeInfo) {
        this.super()
        this.frameType = frameType
        this.delta = delta
        this.locals = locals
    }

    public fn toBytes() -> (bs []byte) {
        bs = new []byte(3)
        bs[0] = this.frameType
        binary.BigEndian.putChar(bs[1:] , this.delta)
        for _ , v := range this.locals {
            bs.appendAll(v.toBytes())
        }
        return bs
    }
}


public class StackMapFullFrame implements StackMap {
    public frameType byte
    public delta     char
    public locals    []StackMapVerificationTypeInfo
    public stacks    []StackMapVerificationTypeInfo

    public fn StackMapFullFrame(
        frameType byte,
        delta char,
        locals []StackMapVerificationTypeInfo,
        stacks []StackMapVerificationTypeInfo) {
        this.super()
        this.frameType = frameType
        this.delta = delta
        this.locals = locals
        this.stacks = stacks
    }

    public fn toBytes() -> (bs []byte) {
        bs = new []byte(5)
        bs[0] = this.frameType
        binary.BigEndian.putChar(bs[1:] , this.delta)
        binary.BigEndian.putChar(bs[3:] , char(len(this.locals)))
        for _ , v := range this.locals {
            bs.appendAll(v.toBytes())
        }
        bs2 := new []byte(2)
        binary.BigEndian.putChar(bs2 , char(len(this.stacks)))
        bs.appendAll(bs2)
        for _ , v := range this.stacks {
            bs.appendAll(v.toBytes())
        }

        return bs
    }
}


public class StackMapTopVariableInfo implements VerificationTypeInfo {
}


public class StackMapIntegerVariableInfo implements VerificationTypeInfo {
}


public class StackMapFloatVariableInfo implements VerificationTypeInfo {
}


public class StackMapLongVariableInfo implements VerificationTypeInfo {
}


public class StackMapDoubleVariableInfo implements VerificationTypeInfo {
}


public class StackMapNullVariableInfo implements VerificationTypeInfo {
}


public class StackMapUninitializedThisVariableInfo implements VerificationTypeInfo {
}


public class StackMapObjectVariableInfo implements VerificationTypeInfo {
    public index char
    public fn StackMapObjectVariableInfo(index char) {
        this.super()
        this.index = index
    }
}


public class StackMapUninitializedVariableInfo implements VerificationTypeInfo {
    public codeOffset char
    public fn StackMapUninitializedVariableInfo(codeOffset char) {
        this.super()
        this.codeOffset = codeOffset
    }
}

// this interface has no method at all 
// but it is use for the compiler to type check
public interface VerificationTypeInfo{}


public class StackMapVerificationTypeInfo {
    public verify VerificationTypeInfo
    static fn fromBs(bs []byte) -> (v StackMapVerificationTypeInfo , remain []byte) {
        vType := bs[0]
        switch vType {
            case 0b:
                v = new StackMapVerificationTypeInfo()
                v.verify = new StackMapTopVariableInfo()
                remain = bs
            case 1b:
                v = new StackMapVerificationTypeInfo()
                v.verify = new StackMapIntegerVariableInfo()
                remain = bs
            case 2b:
                v = new StackMapVerificationTypeInfo()
                v.verify = new StackMapFloatVariableInfo()
                remain = bs
            case 3b:
                v = new StackMapVerificationTypeInfo()
                v.verify = new StackMapDoubleVariableInfo()
                remain = bs
            case 4b:
                v = new StackMapVerificationTypeInfo()
                v.verify = new StackMapLongVariableInfo()
                remain = bs
            case 5b:
                v = new StackMapVerificationTypeInfo()
                v.verify = new StackMapNullVariableInfo()
                remain = bs
            case 6b:
                v = new StackMapVerificationTypeInfo()
                v.verify = new StackMapUninitializedThisVariableInfo()
                remain = bs
            case 7b:
                v = new StackMapVerificationTypeInfo()
                index := binary.BigEndian.getChar(bs)
                bs = bs[2:]
                v.verify = new StackMapObjectVariableInfo(index)
                remain = bs
            case 8b:
                v = new StackMapVerificationTypeInfo()
                codeOffset := binary.BigEndian.getChar(bs)
                bs = bs[2:]
                v.verify = new StackMapUninitializedVariableInfo(codeOffset)
                remain = bs
        }
    }
    public fn toBytes() -> (bs []byte) {
        if _ , ok := this.verify.(StackMapTopVariableInfo) ; ok {
            return []byte{0b}
        }
        if _ , ok := this.verify.(StackMapIntegerVariableInfo) ; ok {
            return []byte{1b}
        }
        if _ , ok := this.verify.(StackMapFloatVariableInfo) ; ok {
            return []byte{2b}
        }
        if _ , ok := this.verify.(StackMapDoubleVariableInfo) ; ok {
            return []byte{3b}
        }
        if _ , ok := this.verify.(StackMapLongVariableInfo) ; ok {
            return []byte{4b}
        }
        if _ , ok := this.verify.(StackMapNullVariableInfo) ; ok {
            return []byte{5b}
        }
        if _ , ok := this.verify.(StackMapUninitializedThisVariableInfo) ; ok {
            return []byte{6b}
        }
        if v , ok := this.verify.(StackMapObjectVariableInfo) ; ok {
            bs = new []byte(3)
            bs[0] = 7b
            binary.BigEndian.putChar(bs[1:] , v.index)
            return bs
        }
        if v , ok := this.verify.(StackMapUninitializedVariableInfo) ; ok {
            bs = new []byte(3)
            bs[0] = 8b
            binary.BigEndian.putChar(bs[1:] , v.codeOffset)
            return bs
        }
    }
}


