import "lucy/os"
import "java/lang/System"
import "java/io"
import "java/nio/file/FileSystems"

public fn getLucyRoot() -> (path string) {
    envs := os.getEnvs()
    if envs.keyExist("LUCYROOT") == false {
        panic("env variable LUCYROOT is not set")
    }
    path = envs["LUCYROOT"]
}

public fn getLucyPath() -> (paths []string) {
    envs := os.getEnvs()
    if envs.keyExist("LUCYROOT") == false {
        panic("env variable LUCYROOT is not set")
    }
    if envs.keyExist("LUCYPATH") == false {
        panic("env variable LUCYPATH is not set")
    }
    ps := {envs["LUCYROOT"] -> true}
    lucyPath := envs["LUCYPATH"]
    osName := System.getProperty("os.name").toLowerCase()
    if osName.startsWith("windows") {
        for v := range lucyPath.split(";") {
            ps[v] = true
        }
    } else {
        for v := range lucyPath.split(":") {
            ps[v] = true
        }
    }
    paths = new []string(ps.size())
    i := 0
    for k , _ := range ps {
        paths[i] = k
        i++
    }
}

public fn getClassPath() -> (paths []string) {
    envs := os.getEnvs()
    classPath := envs["CLASSPATH"]
    osName := System.getProperty("os.name").toLowerCase()
    ps := new map{string -> bool}()
    if osName.startsWith("windows") {
        for v := range classPath.split(";") {
            ps[v] = true
        }
    } else {
        for v := range classPath.split(":") {
            ps[v] = true
        }
    }
    paths = new []string(ps.size())
    i := 0
    for k , _ := range ps {
        paths[i] = k
        i++
    }
}

public fn findPackageInWhichDirectory(lucyPath []string , packageName string) -> (which string) {
    ps := []string{}
    for _ , v := range lucyPath {
        if p := v + "/src/" + packageName ; true == new io.File(p).isDirectory() &&
            haveFileType(p , ".lucy") {
            ps.append(v)
        }
    }
    if ps.size() == 0 {
        panic(sprintf("package '%s' not found" , packageName))
    }
    if ps.size() > 1 {
        errMsg := sprintf("more than 1 package named '%s'" , packageName)
        panic(errMsg)
    }
    which = ps[0]
}

public fn getPaths() -> (lucyRoot string , lucyPath []string , err error) {
    defer {
        err = catch()
    }
    lucyRoot = getLucyRoot()
    lucyPath = getLucyPath()
}

public fn getPathElements(path string) -> (elements []string) {
    fileSystem := FileSystems.getDefault()
    t := fileSystem.getPath(path)
    elements = new []string(t.getNameCount())
    for i := 0 ; i < t.getNameCount() ; i++ {
        elements[i] = t.getName(i).toString()
    }
}

public fn twoPathEqual(p1 string , p2 string) -> (equal bool) {
    t1 := getPathElements(p1)
    t2 := getPathElements(p2)
    if len(t1) != len(t2) {
        return false
    }
    for k , v := range t1 {
        if v != t2[k] {
            return false
        }
    }
    return true
}
