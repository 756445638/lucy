import "java/io"
import "lucy/os"
import "lucy/cmd/langtools/common"

final class Test {
	lucyPaths []string
	packageName string 
	lucyRoot string
	public fn Test(lucyRoot string, lucyPaths []string,packageName string){
	    this.super()
		this.lucyRoot = lucyRoot
		this.lucyPaths = lucyPaths
		this.packageName = packageName
	}
	
	//real test method
	public fn test(){
    	w := common.findPackageLiesIn(this.lucyPaths , this.packageName)
		//check is test exist
		dir := w + "/src/" + this.packageName + "/test" 
		if f := new io.File(dir) ;  f.isDirectory() == false {
			printf("dir '%s' is not directory\n" , dir)
			return 
		}
		if err := this.testDir(this.packageName + "/test" , dir )  ;   err != null {
			print(err)
			return  
		}
	}
	
	private fn testDir(packageName  ,  dir string) ->(err error ){
		fis  := (new io.File (dir)) .listFiles() 
		lucyFiles := []io.File{} 
		for v := range fis {
		    name := v.getName()
		    if v.isDirectory(){
		        this.testDir(packageName + "/" + name , dir + "/" + name)
		        continue
		    }
		    if name.endsWith(".lucy")  {
		        lucyFiles.append(v)
		    }
		}
		if lucyFiles.size() == 0 {  // no lucy files
		    return 
		}
		print("############################")
        printf("test package: %s\n" , packageName)
        printf("directory: %s\n" , dir)
        args  := new string[](2)
        args[0] = "run"  
        args[1] =  packageName
        cmd := new os.Command(this.lucyRoot + "/bin/lucy", args  , null ,null)
        cmd.stdout = os.stdout 
        cmd.stderr = os.stderr  
        if err =  cmd.start() ; err != null {
			printf("start program failed,err:%s\n",err.toString())
        	return 
        }
        if err =  cmd.wait() ;  err != null {
			 print("test failed....",err)
        }else {
             print("test ok....")
        }
        printf("\n\n\n")
	}
}

























