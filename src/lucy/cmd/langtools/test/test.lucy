import "java/io";
import "lucy/os";

class Test {
	lucypaths []string ;
	packageName string ;
	lucyroot string; 
	public fn Test(lucyroot string, lucypaths []string,packageName string){
		this.lucyroot = lucyroot ;
		this.lucypaths = lucypaths;
		this.packageName = packageName;
	}
	
	fn findPackageLiesIn()->(which string,err error){
		ps := []string{} ; 
		for _,v := range this.lucypaths {
			if true == (new io.File(v + "/src/" + this.packageName)).isDirectory() {
				ps.append(v);
			}
		}
		if ps.size() == 0 {
			err = new error(sprintf("package '%s' not found" , this.packageName));
			return ; 
		}
		if ps.size() > 1 {
			errmsg := sprintf("more than 1 package named '%s'" , this.packageName);
			err = new error(errmsg);
			return ; 
		}
		which = ps[0];
		
	}
	
	//real test method
	public fn test(){
    	w,err := this.findPackageLiesIn();
		if err != null  {
			print(err);
			os.exit(1);
		}
		// check is test exist
		dir := w + "/src/" + this.packageName + "/test"	 ;
		if f := new io.File(dir); f.isDirectory() == false {
			printf("dir '%s' is not directory\n" , dir);
			return ;
		}
		if err := this.testDir(this.packageName , dir )  ; err != null {
			
		}
	}
	
	fn testDir(packageName  ,  dir string) ->(err error ){
		fis  := (new io.File (dir)) .listFiles();
		lucyFiles := []io.File{}  ;
		for v := range fis {
		    name := v.getName();
		    if v.isDirectory(){
		        this.testDir(packageName + "/" + name , dir + "/" + name);
		        continue;
		    }
		    if name.endsWith(".lucy")  {
		        lucyFiles.append(v);
		    }
		}
		if lucyFiles.size() == 0 {  // no lucy files
		    return ;
		}
        printf("test package: %s\n" , packageName);
        printf("directory: %s\n" , dir);
        cmd := new os.Command("lucy", null , null ,null);
        cmd.stdout = os.stdout ;
        cmd.stderr = os.stderr ; 
        if err =  cmd.start(); err != null {
        	return ;
        }
        if err =  cmd.wait(); err != null {
        	return ;
        }
	}
}

























