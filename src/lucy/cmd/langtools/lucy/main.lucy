// all rights reserved , check the LICENSE file

import "lucy/os"
import "lucy/cmd/langtools/lucy/run"
import "lucy/cmd/langtools/install"
import "lucy/cmd/langtools/test"
import "lucy/cmd/langtools/clean"
import "lucy/cmd/langtools/tool"
import "lucy/cmd/langtools/http"
import "lucy/cmd/langtools/pack"
import "lucy/cmd/langtools/common"

fn printUsage() {
    msg := `lucy is a new programing language build on jvm
    version                print version
    build                  build package and don't run
    install                install directory and it's sub directories 
    run                    run a lucy package
    clean                  clean compiled files
    pack                   package a lucy package to a jar file
    http                   the http service for lucy
    env                    print env for lucy 
    test                   test a package`
    print(msg)
}

const version = "0.9.0.0"

fn printEvn() {
    printf("lucy-%s\n" , version)
    lucyRoot , lucyPath , _ := common.getLucyRootAndLucyPath()
    if lucyRoot == null || lucyRoot == "" {
        print("LUCYROOT not set")
    } else {
        printf("LUCYROOT=%s\n" , lucyRoot)
    }
    if len(lucyPath) == 0 {
        print("LUCYPATH not set")
    } else {
        printf("LUCYPATH=%s\n" , lucyPath + "")
    }
    classPaths := common.getClassPath()
    if len(classPaths) == 0 {
        print("CLASSPATH not set")
    } else {
        printf("CLASSPATH=%s\n" , classPaths + "")
    }
}

fn main(args []string) {
    if len(args) == 0 {
        printUsage()
        os.exit(0)
    }
    switch args[0] {
        case "version":
            printf("lucy-%s\n" , version)
            os.exit(0)
        case "build":
            t := ["-build"]
            t.appendAll(args[1:])
            (new run.RunLucyPackage()).run("run" , t)
        case "run":
            r := (new run.RunLucyPackage())
            r.runOverExit = true
            r.run(args[0] , args[1:])
        case "install":
            install.installFn(args[1:])
        case "clean":
            clean.cleanFn(args[1:])
        case "test":
            test.testFn(args[1:])
        case "tool":
            tool.tool(args[1:])
        case "http":
            http.http(args[1:])
        case "pack":
            pack.packFn(args[1:])
        case "env":
            printEvn()
        default:
            printf("command '%s' not found\n" , args[0])
            printUsage()
            os.exit(1)
    }
}
