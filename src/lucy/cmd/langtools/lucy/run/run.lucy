// all rights reserved , check the LICENSE file

import "lucy/cmd/langtools/common"
import "lucy/os"
import "lucy/encoding/json"
import "java/io"
import "lucy/io" as lucyIo
import "java/lang/System"
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/lc"
import "lucy/cmd/langtools/compile/parser"
import "java/lang/Runtime"
import "java/util/zip"

public class RunLucyPackage {
           lucyRoot            string
           lucyPath            []string
           mainPackageLucyPath string
           Package             string
           commandName         string
           classPath           []string
           flags               Flags = new Flags()
           packagesCompiled    map{string -> PackageCompiled}
           lucyProgramArgs     []string                       // lucy application args
    public runOverExit         bool

    public fn run(commandName string , args []string) -> (err error) {
        this.commandName = commandName
        err = this.parseCmd(args) // skip run
        if err != null {
            this.help()
            return
        }
        if this.flags.h.getValue() {
            this.help()
            return
        }
        if this.Package == "" {
            return new error("no package to run")
        }
        this.lucyRoot = common.getLucyRoot()
        this.lucyPath = common.getLucyPath()
        this.classPath = common.getClassPath()
        this.packagesCompiled = new map{string -> PackageCompiled}()
        this.mainPackageLucyPath = common.findPackageInWhichDirectory(this.lucyPath , this.Package)
        //
        {
            _ , _ , err = this.buildPackage("" , "lucy/lang" , new ImportStack())
            if err != null {
                printf("build  buildin package '%s' failed,err:%s\n" , "lucy/lang" , err.getMessage())
                return err
            }
        }

        _ , meta , err := this.buildPackage(this.mainPackageLucyPath , this.Package , new ImportStack())
        if err != null {
            print(err)
            return
        }
        if this.flags.build.getValue() {
            return
        }
        if false == meta.hasMain {
            print(`no main function, please declare main function as:

    fn main(args []string){

    }
            `)
            os.exit(4)
        }
        cmdArray := []string{"java" , this.Package + "/" + ast.MainFunctionName}
        cmdArray.appendAll(this.lucyProgramArgs)
        var envs = new string[](len(os.getEnvs()))
        {
            var i = 0
            classPathEnvFound := false
            for k , v := range os.getEnvs() {
                if k == "CLASSPATH" {
                    envs[i] = k + "=" + this.getClassPathEvnString()
                    classPathEnvFound = true
                    i++
                    continue
                }
                envs[i] = k + "=" + v
                i++
            }
            if classPathEnvFound == false {
                envs2 := new string[](len(envs) + 1)
                copy(envs2 , envs , 0 , len(envs))
                envs2[len(envs)] = "CLASSPATH=" + this.getClassPathEvnString()
                envs = envs2
            }
        }
        p := Runtime.getRuntime().exec(copy(new string[](len(cmdArray)) , cmdArray),
            envs)
        Run.runFn(fn () {
                lucyIo.ioCopy(os.stderr , p.getErrorStream())
            })
        Run.runFn(fn () {
                lucyIo.ioCopy(os.stdout , p.getInputStream())
            })
        Run.runFn(fn () {
                lucyIo.ioCopy(p.getOutputStream() , os.stdin)
            })
        code := p.waitFor() // wait for exit
        if this.runOverExit {
            os.exit(code)
        }
    }
    fn help() {
        this.flags.help()
    }
    fn parseCmd(args []string) -> (err error) {
        var lucyProgramArgs []string
        runArgs := []string{}
        for k , v := range args {
            if v.startsWith("-") == false {
                this.Package = v
                lucyProgramArgs = args[k + 1:]
                break
            }
            runArgs.append(v)
        }
        _ , err = this.flags.parser.parse(runArgs)
        if err != null {
            return err
        }
        this.lucyProgramArgs = lucyProgramArgs
        return null
    }
    /*
        check package if need rebuild
    */
    fn needCompile(lucyPath string , packageName string) -> (
        meta common.PackageMeta,
        need bool,
        lucyFiles []LucyFile) {
        if p := this.packagesCompiled[packageName] ; p != null {
            return p.meta , false , null
        }
        need = true
        sourceFileDir := lucyPath + "/src/" + packageName
        fis := new io.File(sourceFileDir).listFiles()
        fisM := new map{string -> LucyFile}()
        lucyFiles = []LucyFile{}
        for _ , v := range fis {
            if v.getName().endsWith(".lucy") {
                t := new LucyFile()
                t.realpathName = v.getAbsolutePath()
                t.name = v.getName()
                tt , e := os.readFile(t.realpathName)
                if e != null {
                    panic(e)
                }
                t.bs = javaArray2Lucy(tt)
                lucyFiles.append(t)
                fisM[v.getName()] = t
            }
        }

        if len(lucyFiles) == 0 {
            panic(sprintf("no lucy source files in '%s'" , sourceFileDir))
            return
        }
        if this.flags.forceReBuild.getValue() {
            return
        }
        destinationDir := lucyPath + "/class/" + packageName
        bs , err := os.readFile(destinationDir + "/maintain.json")
        if err != null {
            return
        }
        meta = new common.PackageMeta()
        _ , err = json.decode(javaArray2Lucy(bs) , meta)
        if err != null {
            return
        }
        compiledFrom := new map{string -> common.FileMeta}()
        for v := range meta.compiledFrom {
            compiledFrom[v.name] = v
        }

        // new or add
        for _ , v := range fisM {
            if v := compiledFrom[v.name] ; v == null {
                return
            }
            if (new io.File(v.realpathName).lastModified() / 1000L) > (compiledFrom[v.name].lastModify) {
                return
            }
        }

        // file missing
        for f := range meta.compiledFrom {
            if fisM.keyExist(f.name) == false {
                return
            }
        }
        // if class file is missing
        {
            for _ , v := range meta.classes {
                if false == new io.File(destinationDir + "/" + v).isFile() {
                    return
                }
            }
        }
        need = false
        return
    }
    fn parseImports(files []LucyFile) -> (imports []string = []string{}) {
        importNodes := []ast.TopNode{}
        for _ , v := range files {
            parser.parse(importNodes , v.realpathName , v.bs , true , 10 , -1 , -1 , -1 , -1)
        }

        m := new map{string -> bool}()
        for _ , v := range importNodes {
            name := v.node.(ast.Import)
            if m.keyExist(name.Import) {
                continue
            }
            m[name.Import] = true
            imports.append(name.Import)
        }

        return this.javaPackageFilter(imports)
    }
    fn javaPackageFilter(is []string) -> (lucyPackages []string = []string{}) {
        var that = this
        foundInClassPath := fn (name string) -> (found []string = []string{}) {
            for _ , v := range that.classPath {
                if new io.File(v + "/" + name).isDirectory() {
                    found.append(v)
                    continue
                }
                if new io.File(v + "/" + name + ".class").isFile() {
                    found.append(v)
                    continue
                }
            }
            for _ , v := range that.classPath {
                fis := new io.File(v).listFiles()
                for f := range fis {
                    if f.isFile() == false || f.getName().endsWith(".jar") == false {
                        continue
                    }
                    zipfile := new zip.ZipFile(v + "/" + f.getName())
                    defer {
                        zipfile.close()
                    }
                    entries := zipfile.entries()
                    for entries.hasMoreElements() {
                        entry := entries.nextElement().(zip.ZipEntry)
                        if entry.getName() == name + "/" && entry.isDirectory() {
                            found.append(v + "/" + f.getName())
                            continue
                        }
                        if entry.getName() == name + ".class" && entry.isDirectory() == false {
                            found.append(v + "/" + f.getName())
                            continue
                        }
                    }
                }
            }
            return
        }
        foundInLucyPath := fn (name string) -> (found []string = []string{}) {
            for _ , v := range that.lucyPath {
                if d := v + "/src/" + name ; new io.File(d).isDirectory() &&
                    common.haveFileType(d , ".lucy") {
                    found.append(v)
                }
            }
            return
        }
        formatPaths := fn (paths []string) -> (s string = "") {
            for _ , v := range paths {
                s += "\t" + v + "\n"
            }
            return s
        }
        for _ , i := range is {
            found := foundInLucyPath(i)
            if len(found) > 1 {
                panic(sprintf("not 1 package named '%s' in $LUCYPATH" , i))
            }
            if len(found) == 1 {
                if i != "lucy/lang" {
                    lucyPackages.append(i)
                }
                continue
            }
            found = foundInClassPath(i)
            if len(found) > 1 {
                errMsg := sprintf("not 1 package named '%s' in $CLASSPATH,which CLASSPATH are:\n" , i)
                errMsg += formatPaths(this.classPath)
                panic(errMsg)
            }
            if len(found) == 0 {
                errMsg := sprintf("package named '%s' not found in $CLASSPATH,which CLASSPATH are:\n" , i)
                errMsg += formatPaths(this.classPath)
                panic(errMsg)
            }
        }
    }

    fn getClassPathEvnString() -> (path string = "") {
        cp := new []string(len(this.classPath))
        copy(cp , this.classPath)
        for v := range this.lucyPath {
            v += "/class/"
            found := false
            for vv := range cp {
                if common.twoPathEqual(vv , v) {
                    found = true
                    break
                }
            }
            if found == false {
                cp.append(v)
            }
        }

        osName := System.getProperty("os.name").toLowerCase()
        var delimiter string
        if osName.startsWith("windows") {
            delimiter = ";"
        } else {
            delimiter = ":"
        }
        for k , v := range cp {
            path += v
            if k != len(path) - 1 {
                path += delimiter
            }
        }
    }

    fn foundError(packageName string , founds []string) {
        if len(founds) == 0 {
            panic(sprintf("package '%s' not found" , packageName))
        }
        if len(founds) > 1 {
            panic(sprintf("package '%s' in '%s'" , packageName , founds + ""))
        }
    }
    fn buildPackage(
        lucyPath string,
        packageName string,
        importStack ImportStack) -> (
        needBuild bool,
        meta common.PackageMeta,
        err error) {
        if p := this.packagesCompiled[packageName] ; p != null {
            return true , p.meta , null
        }
        if lucyPath == "" {
            lucyPath = common.findPackageInWhichDirectory(this.lucyPath , packageName)
        }
        meta , needBuild , lucyFiles := this.needCompile(lucyPath , packageName)
        if needBuild == false {
            for k , v := range meta.imports {
                i := (new ImportStack()).fromLast(importStack)
                t := new PackageCompiled()
                t.packageName = packageName
                err = i.insert(t)
                if err != null {
                    return
                }
                need , m , e := this.buildPackage("" , v.name , i)
                if e != null {
                    return false , null , e
                }
                if need {
                    needBuild = true
                }
                if m.compileTime > v.linkTime {
                    // dependency is recompile 
                    needBuild = true
                }
            }

        }
        if needBuild == false {
            return
        }
        //compile this package really
        is := this.parseImports(lucyFiles)
        importsMetas := new []common.PackageMeta(len(is))
        for k , i := range is {
            im := (new ImportStack()).fromLast(importStack)
            t := new PackageCompiled()
            t.packageName = packageName
            err = im.insert(t)
            if err != null {
                return
            }
            var m common.PackageMeta
            _ , m , err = this.buildPackage("" , i , im) // compile depend
            if err != null {
                return
            }
            importsMetas[k] = m
        }
        //build this package
        destinationDir := lucyPath + "/class/" + packageName
        new io.File(destinationDir).mkdirs()
        if this.flags.verbose.getValue() {
            printf("# %s\n" , packageName) // compile this package
        }
        files := new []string(len(lucyFiles))
        for k , v := range lucyFiles {
            files[k] = v.realpathName
        }
        hasMain , _ , compiledClassFiles := lc.MainFn(
            destinationDir,
            files,
            this.lucyPath,
            this.classPath,
            true,
            false,
            false,
            packageName,
            true)
        // make_node_objects maitain.json
        meta = new common.PackageMeta()
        meta.compiledFrom = new common.FileMeta[](len(lucyFiles))
        for k , v := range lucyFiles {
            t := new common.FileMeta()
            t.name = v.name
            t.lastModify = new io.File(v.realpathName).lastModified() / 1000L
            meta.compiledFrom[k] = t
        }
        {
            m := new map{string -> bool}()
            for v := range compiledClassFiles {
                m[v] = true
            }
            fis := new io.File(destinationDir).listFiles()
            for v := range fis {
                if v.isFile() || v.getName().endsWith(".class") == false {
                    continue
                }
                if m.keyExist(v.getName()) == false {
                    //remove old compile class 
                    new io.File(destinationDir + "/" + v.getName()).delete()
                }
            }
        }
        meta.compileTime = System.currentTimeMillis() / long(1000)
        meta.imports = new common.Import[](len(is))
        for k , _ := range meta.imports {
            meta.imports[k] = new common.Import()
            meta.imports[k].name = is[k]
            meta.imports[k].linkTime = importsMetas[k].compileTime
        }
        meta.classes = copy(new string[](len(compiledClassFiles)) , compiledClassFiles)
        meta.hasMain = hasMain
        bs , err := json.encode(meta , "\t")
        if err != null {
            return
        }
        err = os.writeFile(lucyPath + "/class/" + packageName + "/maintain.json",
            copy(new byte[](len(bs)) , bs))
        t := new PackageCompiled()
        t.meta = meta
        t.packageName = packageName
        this.packagesCompiled[packageName] = t
        needBuild = true

        {
            //verything is done delete old class files
            classFileMap := new map{string -> bool}()
            for v := range meta.classes {
                classFileMap[v] = true
            }
            list := new io.File(destinationDir).list()
            for v := range list {
                if classFileMap.keyExist(v) == false {
                    new io.File(destinationDir).delete()
                }
            }
        }
        return
    }
}

