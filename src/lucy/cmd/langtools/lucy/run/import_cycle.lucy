 

class ImportStack {
    
	Stacks []PackageCompiled
	M      map { string -> PackageCompiled }
    

    fn fromLast(last ImportStack) ->(self ImportStack)  {
        self = this
        this.Stacks = new []PackageCompiled(len(last.Stacks))
        copy(this.Stacks, last.Stacks)
        this.M = new map { string -> PackageCompiled } ()
        for k, v := range last.M {
            this.M[k] = v
        }
    }

    /*
        check if import cycling
    */
    fn insert(c PackageCompiled) ->(err error) {
        if this.M.keyExist(c.packageName) {
            errMsg := sprintf("package named '%s' import cycling\n", c.packageName)
            errMsg += "\t"
            for _, v := range this.Stacks {
                errMsg += sprintf("'%s' -> ", v.packageName)
            }
            errMsg += c.packageName
            return new error(sprintf(errMsg))
        }
        if this.Stacks == null {
            this.Stacks = [c]
        }else {
            this.Stacks.append(c)
        }
        this.M[c.packageName] = c
        return null
    }
}
