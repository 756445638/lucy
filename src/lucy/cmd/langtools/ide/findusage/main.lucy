// all rights reserved , check the LICENSE file

import "lucy/cmd/langtools/ide"
import "lucy/cmd/langtools/compile/ast"
import "lucy/encoding/json"
import "java/nio/file/FileSystems"
import "lucy/cmd/langtools/common"
import "lucy/cmd/langtools/ide/gotodefinition"

public fn findUsage2(
	filename string,
	pos int,
	scope string,
	storePackage []ast.Package,
	bs []byte) -> (result ast.Usage[]) {
	definition := gotodefinition.findDefinitionFn(filename , pos , null , storePackage)
	if definition == null {
		print("find usage cannot find definition")
		return null
	}
	lucyPath , packageName := ide.locateLucyFile(definition.filename)
	var lucyFiles = ide.readLucyFiles(ide.getLucyFiles(lucyPath + "/src/" + packageName))
	fileSystem := FileSystems.getDefault()
	for v := range lucyFiles {
		if fileSystem.getPath(definition.filename).getFileName().toString() ==
			fileSystem.getPath(v.realPathName).getFileName().toString() {
			v.findUsage = (definition.endLine << 16) |
				int(char(definition.endColumnOffset - 1))
		}
	}

	result = sortUsages(
		new FindUsage(lucyFiles,
			packageName,
			true,
			common.getLucyPath(),
			scope).find())
}

fn main(args []string) {
	f := new Flags()
	file , pos := f.parseArgs(args)
	result := findUsage2(file , pos , "" , null , null)
	bs , err := json.encode(result)
	if err != null {
		panic(err)
	}
	print(string(bs))
}

fn sortUsages(usages []ast.Usage) -> (result ast.Usage[]) {
	// if len(usages) == 0 {
	return copy(new ast.Usage[](len(usages)) , usages)
}

