import "lucy/os"
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/parser"
import "java/io"
import "java/lang/System"

public fn readLucyFiles(filenames []string) -> (lucyFiles []LucyFile = []LucyFile{}){
	for v := range filenames {
		t := new LucyFile()
		t.realPathName  = v 
		bs,err := os.readFile(v)
		if err != null {
			panic(err)
		}
		t.bs = javaArray2Lucy(bs)
		lucyFiles.append(t)
	}
}

public fn parseImports(lucyFiles []LucyFile) -> (imports []string = []string{} ){
	nodes := []ast.TopNode{}
	for _,v := range lucyFiles {
		parser.Parse(nodes , v.realPathName , v.bs , true , 10 , -1 ,-1 ,-1 , -1 , -1)
	}
	for v := range nodes {
		imports.append(v.node.(ast.Import).Import)
	}
}

public fn parseAst(lucyFiles []LucyFile) ->(nodes []ast.TopNode = []ast.TopNode{} , errs []error = []error{}){
	for _,v := range lucyFiles {
		errs.appendAll(parser.Parse(nodes , v.realPathName , v.bs , false , 10 , 
			v.locateDefinition , v.getHover , v.findUsage , v.rename ,v.autoCompletion))
	}
}


public fn parseAstAndTypeCheck(
	packageName string , 
	lucyFiles []LucyFile , 
	onlyAnalyzeGlobals bool , 
	matchFile string ,
	matchLine int, 
	loader ast.LoadImport ) -> (p ast.Package,errs []error){
	now := System.currentTimeMillis()
	nodes ,es := parseAst(lucyFiles)
	print("prase ast used:", System.currentTimeMillis() - now ,packageName)
	now = System.currentTimeMillis()
	p = new ast.Package(packageName , true , loader)
	p.onlyAnalyzeGlobals = onlyAnalyzeGlobals
	p.matchFile = matchFile 
	if matchLine != -1 {
		p.matchLine = matchLine
	}
	errs = p.typeCheck(nodes)
	print("type check package:",  onlyAnalyzeGlobals , System.currentTimeMillis() - now ,packageName)
	if len(es) > 0 {
		if len(errs) == 0 {
			errs = es
		}else {
			errs.appendAll(es)
		}
	}
}

public fn getLucyFiles(dir string) -> (lucyFiles []string = []string{}) {
	list := new io.File(dir).list()
	for v := range list {
		if v.endsWith(".lucy") {
			lucyFiles.append(dir + "/" + v)
		}
	}
}
