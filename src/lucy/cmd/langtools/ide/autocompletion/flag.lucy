import "lucy/os/flag"

class Flags {
    file       flag.StringOption
    line       flag.IntOption   
    column     flag.IntOption   
    parser     flag.FlagParser  
    bufferFile flag.StringOption

    fn Flags() {
        this.super()
        this.parser = new flag.FlagParser()
        this.file = this.parser.stringOption("-file")
        this.line = this.parser.intOption("-line" , -1)
        this.column = this.parser.intOption("-column" , -1)
        this.bufferFile = this.parser.stringOption("-buffer-file")
    }

    fn parseArgs(args []string) -> (file string , bufferFile string , pos int) {
        nodefine , err := this.parser.parse(args)
        if err != null {
            panic(err)
        }
        if len(nodefine) > 0 {
            print("args provides but not used:" + nodefine)
            printUsageAndExit(1)
        }
        if this.file.getValue() == "" {
            print("file not provided")
            printUsageAndExit(1)
        }
        if this.line.getValue() < 0 {
            print("line not provided or negative...")
            printUsageAndExit(1)
        }
        if this.column.getValue() < 0 {
            print("column not provided or negative...")
            printUsageAndExit(1)
        }
        file = this.file.getValue()
        bufferFile = this.bufferFile.getValue()
        pos = (this.line.getValue() << 16) | int(char(this.column.getValue()))
        if pos == -1 {
            panic("pos == -1")
        }
    }
}


