import "lucy/cmd/langtools/ide"
import "lucy/cmd/langtools/compile/ast"
import "lucy/os"
import "lucy/cmd/langtools/common"


class FindDefinition {
    lucyFiles []ide.LucyFile 
    packageName string
    printErr bool 
    searchFile string 
    matchLine int 

    fn FindDefinition(lucyFiles []ide.LucyFile , 
        packageName string , printErr bool ,searchFile string  , matchLine int ){
        this.super()
        this.lucyFiles = lucyFiles
        this.packageName = packageName
        this.printErr = printErr 
        this.searchFile = searchFile
        this.matchLine = matchLine 
    }
    
    fn find() -> (result ast.Pos){
        //parse ast and typecheck
        loader := new ide.PackageLoader(common.getLucyPath() ,common.getClassPath())
        loader.onlyAnalyzeGlobals = true 
        var p ast.Package
        var es []error 
        
        {
            defer {
                err := catch()  // may be panic 
                if err != null {
                    err.printStackTrace()
                }
            }
            p , es = ide.parseAstAndTypeCheck(
                this.packageName ,
                this.lucyFiles , 
                false ,
                this.searchFile ,
                this.matchLine , 
                loader)
        }
        if this.printErr {
            for v := range es{
                os.stderr.println(v.getMessage())
            }
        }
        if p.locateDefinition != null {
            if p.locateDefinition.loadDefinitionFromOutside != null {
                return this.loadDefinitionFromOutside(p.locateDefinition.loadDefinitionFromOutside)
            }
            return p.locateDefinition
        }
    }
    
    fn loadDefinitionFromOutside(out ast.LoadDefinitionFromOutside) -> (result ast.Pos) {
        // primary load definition from class file
    }
    
}







