import "lucy/cmd/langtools/compile/ast"
import "java/lang/Object"
import "lucy/os"

typealias filename = string


class ReName {
    usages              ast.Usage[]
    on                  Object     
    to                  []byte     
    bsForTheCurrentFile []byte     
    filename            string     
    oldLength           int        

    public fn ReName(usages ast.Usage[],
        on Object,
        filename string,
        to string,
        bsForTheCurrentFile []byte) {
        this.super()
        this.usages = usages
        this.on = on
        this.filename = filename
        this.to = []byte(to)
        this.bsForTheCurrentFile = bsForTheCurrentFile
        if len(usages) > 0 {
            this.oldLength = usages[0].pos.endColumnOffset - usages[0].pos.startColumnOffset
        }
        if i , ok := this.on.(ast.Import) ; ok {
            i.mkAccessName()
            this.oldLength = len(i.accessName)
        }
    }

    fn rename() {
        if t , ok := this.on.(ast.ClassMethod) ; ok == true &&
            t.Function.name == ast.SpecialMethodInit {
            // init method cannot be renamed
            return
        }
        grouyByFileName := new map{filename -> []ast.Usage}()
        for _ , v := range this.usages {
            if grouyByFileName.keyExist(v.pos.filename) {
                grouyByFileName[v.pos.filename].append(v)
            } else {
                grouyByFileName[v.pos.filename] = [v]
            }

        }

        if t , ok := this.on.(ast.Import) ; ok == true {
            // import only can be used in on file 
            var u []ast.Usage
            for v := range grouyByFileName {
                u = v
                break
            }

            this.renameImport(u , t)
            return
        }
        for k , v := range grouyByFileName {
            this.renameOneFile(k , v)
        }

    }

    fn renameOneFile(filename string , usages []ast.Usage) {
        var bs []byte
        if filename == this.filename {
            bs = this.bsForTheCurrentFile
        } else {
            t , err := os.readFile(filename)
            if err != null {
                panic(err)
            }
            //read the file form disk
            bs = javaArray2Lucy(t)
        }

        usagesGroupByLine := this.getUsageGroupByLine(usages)
        length := len(bs)
        line := 0
        column := 0
        newBs := []byte{}
        increment := this.oldLength - 1
        for i := 0 ; i < length ; i++ {
            if bs[i] == '\n' {
                line++
                column = 0
                newBs.append(bs[i])
                continue
            }
            if false == this.matchColumn(usagesGroupByLine[line] , column) {
                column++
                newBs.append(bs[i])
                continue
            }
            newBs.appendAll(this.to)
            i += increment
            column += this.oldLength
        }

        err := os.writeFile(filename,
            newBs.getUnderlyingArray(),
            newBs.start(),
            newBs.size())
        if err != null {
            panic(err)
        }
    }

    fn renameImport(usages []ast.Usage , Import ast.Import) {
        if Import.aliasPos != null {
            // in this case 
            // renameOneFile is perfect
            usages[0].pos = Import.aliasPos
            this.renameOneFile(this.filename , usages)
            return
        }
        bs := this.bsForTheCurrentFile
        usagesGroupByLine := this.getUsageGroupByLine(usages)
        length := len(bs)
        line := 0
        column := 0
        newBs := []byte{}
        increment := this.oldLength - 1
        firstUsage := true
        for i := 0 ; i < length ; i++ {
            if bs[i] == '\n' {
                line++
                column = 0
                newBs.append(bs[i])
                continue
            }
            if false == this.matchColumn(usagesGroupByLine[line] , column) {
                column++
                newBs.append(bs[i])
                continue
            }
            if firstUsage == false {
                newBs.appendAll(this.to)
                i += increment
                column += this.oldLength
            } else {
                importResourceLength := usages[0].pos.endColumnOffset - usages[0].pos.startColumnOffset
                for j := 0 ; j < importResourceLength ; j++ {
                    column++
                    newBs.append(bs[i+j])
                }
                newBs.appendAll([]byte(" as " ) , this.to)
                firstUsage = false
                i += importResourceLength - 1
            }

        }

        err := os.writeFile(this.filename,
            newBs.getUnderlyingArray(),
            newBs.start(),
            newBs.size())
        if err != null {
            panic(err)
        }
    }

    fn matchColumn(usages []ast.Usage , column int) -> (match bool) {
        if len(usages) == 0 {
            return
        }
        for v := range usages {
            if v.pos.startColumnOffset == column {
                return true
            }
        }

    }

    fn getUsageGroupByLine(usages []ast.Usage) -> (ret map{int -> []ast.Usage} = new map{int -> []ast.Usage}()) {
        for v := range usages {
            if ret.keyExist(v.pos.startLine) {
                ret[v.pos.startLine].append(v)
            } else {
                ret[v.pos.startLine] = [v]
            }

        }

    }

}


