import "lucy/cmd/langtools/ide"
import "lucy/cmd/langtools/compile/lc"
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/parser"

class PackageLoader extends  ide.PackageLoader {
    rename ReName
    loadPacakges map{string->ast.Package}

    public fn PackageLoader(lucyPaths , classPaths []string , rename ReName ){
        this.super(lucyPaths ,classPaths )
        this.rename = rename 
    }
    //override 
    public fn  loadLucyPackage(r lc.Resource) -> (p ast.Package) {
        lucyFiles  := ide.readLucyFiles(ide.getLucyFiles(r.realPath))
        tops := []ast.TopNode{}
        errs := []error{}
        for _,v := range lucyFiles {
            length := len(tops)
            errs.appendAll(
                parser.Parse(tops , v.realPathName , v.bs , false , 10 , -1 , -1 , -1 ,  -1) 
            )
            this.rename.lucyAstNodes[v.realPathName] = tops[length : len(tops)]
        }
        if len(errs) > 0 {
            if this.rename.otherPackageErrors == null {
                this.rename.otherPackageErrors = errs 
            }else {
                this.rename.otherPackageErrors.appendAll(errs)
            }
        }
        p = new ast.Package(r.name , false )
        errs.appendAll(p.typeCheck(tops))
        if this.loadPacakges == null {
            this.loadPacakges = new map{string->ast.Package}()
        }
        this.loadPacakges[r.name] = p
    }
}



