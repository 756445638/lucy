/*
    simple file cache for speed up file system access
*/
import "java/io"
import "lucy/os"
import "java/lang/System"


class FileCacher {
    caches map{string -> LucyFile}
    maxSize int // max cache cache number
    printFileCacheInfo bool 

    fn FileCacher(maxSize int ,printFileCacheInfo bool ) {
        this.super()
        this.maxSize = maxSize 
        this.caches = new map{string -> LucyFile}()
        this.printFileCacheInfo = printFileCacheInfo
    }

    private fn set(filename string , f LucyFile) {
        if len(this.caches)  > this.maxSize {
            var firstUnuse int 
            var firstUnuseFilename string 
            for k,v := range this.caches {
                firstUnuse = v.lastUse
                firstUnuseFilename = k 
                break
            }
            for k,v := range this.caches {
                if v.lastUse < firstUnuse {
                    firstUnuse = v.lastUse
                    firstUnuseFilename = k 
                }
            }
            this.caches.remove(firstUnuseFilename)  // remove cache
        }
        this.caches[filename] = f 
    }
    
    fn get(filename string) -> (f LucyFile) {
        if this.caches.keyExist(filename) == false {
            f = this.readLucyFile(filename)
            this.set(filename , f)
            return 
        }
        f = this.caches[filename]
        if f.lastModify < (new io.File(filename).lastModified() / 1000L) {  // file modified
            f = this.readLucyFile(filename)
            this.set(filename , f)
            if this.printFileCacheInfo {
                printf("file cache:file '%s' modified\n" , filename)
            }
            return 
        }
        
        newF := new LucyFile()
        newF.bs = f.bs 
        newF.realPathName = f.realPathName
        f = newF
        if this.printFileCacheInfo {
            printf("file cache:file '%s' hit cache\n" , filename)
        }
    }
    
    fn readLucyFile(filename string)-> (f LucyFile){
        f = new LucyFile()
        f.realPathName = filename
        f.lastModify = int(new io.File(filename).lastModified() / 1000L)
        t , err := os.readFile(filename)
        if err != null {
            panic(err)
        }
        f.bs =  javaArray2Lucy(t)
        f.lastUse = int(System.currentTimeMillis() / 1000L)
    }
}