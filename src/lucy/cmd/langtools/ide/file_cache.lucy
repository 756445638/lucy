// all rights reserved , check the LICENSE file

/*
    simple file cache for speed up file system access
*/
// import "java/io"
import "lucy/os"

// import "java/lang/System"

//TODO:: useless 
class FileCache {
	// caches             map{string -> LucyFile}
	// maxSize            int                     // max cache cache number
	// printFileCacheInfo bool

	fn FileCache() {
		this.super()
		// this.maxSize = maxSize
		// this.caches = new map{string -> LucyFile}()
		// this.printFileCacheInfo = printFileCacheInfo
	}
	// private fn set(filename string , f LucyFile) {
	//     if len(this.caches) > this.maxSize {
	//         var firstUnuse int
	//         var firstUnuseFilename string
	//         for k , v := range this.caches {
	//             firstUnuse = v.lastUse
	//             firstUnuseFilename = k
	//             break
	//         }
	//         for k , v := range this.caches {
	//             if v.lastUse < firstUnuse {
	//                 firstUnuse = v.lastUse
	//                 firstUnuseFilename = k
	//             }
	//         }

	//         this.caches.remove(firstUnuseFilename) // remove cache
	//     }
	//     this.caches[filename] = f
	// }
	fn get(filename string) -> (f LucyFile) {
		f = this.readLucyFile(filename)
		// if this.maxSize < 0 {
		//     //
		//     f = this.readLucyFile(filename)
		//     return
		// }
		// if this.caches.keyExist(filename) == false {
		//     f = this.readLucyFile(filename)
		//     this.set(filename , f)
		//     return
		// }
		// f = this.caches[filename]
		// if f.lastModify < (new io.File(filename).lastModified() / 1000L) {
		//     f = this.readLucyFile(filename)
		//     this.set(filename , f)
		//     if this.printFileCacheInfo {
		//         printf("file cache:file '%s' modified\n" , filename)
		//     }
		//     return
		// }
		// newF := new LucyFile()
		// newF.bs = f.bs
		// newF.realPathName = f.realPathName
		// f = newF
		// if this.printFileCacheInfo {
		//     printf("file cache:file '%s' hit cache\n" , filename)
		// }
	}

	fn readLucyFile(filename string) -> (f LucyFile) {
		f = new LucyFile()
		f.realPathName = filename

		t , err := os.readFile(filename)
		if err != null {
			panic(err)
		}
		f.bs = javaArray2Lucy(t)
		// f.lastModify = int(new io.File(filename).lastModified() / 1000L)
		// f.lastUse = int(System.currentTimeMillis() / 1000L)
	}
}

