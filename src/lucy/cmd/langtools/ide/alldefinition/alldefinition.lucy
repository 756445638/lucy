import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/ide"
import "lucy/os"
import "java/lang/Boolean"
import "java/lang/Long"
import "java/lang/Double"
import "lucy/cmd/langtools/common"

class AllDefinition {
    lucyFiles []ide.LucyFile
    packageName string
    printErr bool
    lucyPath string
    fn AllDefinition(lucyFiles []ide.LucyFile , packageName string , lucyPath string , printErr bool) {
        this.super()
        this.lucyFiles = lucyFiles
        this.lucyPath = lucyPath 
        this.packageName = packageName
        this.printErr = printErr
    }
    fn getAllDefinition() -> (alldefinition Definition[]){
        nodes , errs := ide.parseAst(this.lucyFiles)
        if this.printErr {
            for v := range errs{
                os.stderr.println(v.getMessage())
            }
        }
        loader := new ide.PackageLoader(common.getLucyPath() , common.getClassPath())
        loader.onlyAnalyzeGlobals = true 
        p := new ast.Package(this.packageName , true , loader)
        p.onlyAnalyzeGlobals = true // make the process faster
        errs = p.typeCheck(nodes)
        if this.printErr {
            for v := range errs{
                os.stderr.println(v.getMessage())
            }
        }
        return this.mkResult(p)
    }
        
    fn mkResult(p ast.Package) ->(result Definition[]) {
        items := []Definition{}
        for name , v := range p.block.variables {
            item := new Definition()
            item.Type = "variable"
            item.pos = v.pos 
            item.name = name
            items.append(item)
        }
        for name , v := range p.block.constants {
            item := new Definition()
            item.Type = "constant"
            item.pos = v.pos 
            item.name = name
            items.append(item)
        }
        for name , v := range p.block.functions {
            item := new Definition()
            item.Type = "function"
            item.pos = v.pos 
            item.name = name
            items.append(item)
        }
        for name , v := range p.block.enums {
            item := new Definition()
            item.Type = "enum"
            item.pos = v.pos 
            item.name = name
            items.append(item)
        }
        for name , v := range p.block.classes {
            item := new Definition()
            item.Type = "enum"
            item.pos = v.pos 
            item.name = name
            items.append(item)
            innerLength := len(v.fields)
            for v := range v.methods {
                innerLength += len(v)
            }
            item.inners = new Definition[](innerLength)
            var i = 0 
            for _, v := range v.fields {
                itemField := new Definition()
                itemField.Type = "field"
                itemField.name = v.name
                itemField.pos = v.pos 
                item.inners[i] = itemField
                i++
            }
            for _, v := range v.methods {
                for method := range v {
                    itemMethod := new Definition()
                    itemMethod.Type = "method"
                    itemMethod.name = method.Function.name 
                    itemMethod.pos = method.Function.pos 
                    item.inners[i] = itemMethod
                    i++
                }   
            }
        }
        return copy(new Definition[](len(items)) , items)
    }

    
    fn packBool(v bool) -> (o Boolean = Boolean.valueOf(v)) { }
    fn packLong(v long) -> (o Long = Long.valueOf(v)) { }
    fn packDouble(v double) -> (o Double = Double.valueOf(v)) { }


}









