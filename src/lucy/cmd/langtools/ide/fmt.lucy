import "lucy/cmd/langtools/compile/ast"

public class Fmt {
    indentIncrement string

    public fn Fmt(indentIncrement string = "    ") {
        this.super()
        this.indentIncrement = indentIncrement
    }
    public fn fmt(nodes []ast.TopNode) -> (format string = "") {
        for k , n := range nodes {
            if t , ok := n.node.(ast.Comment) ; ok {
                if t.isMulti {
                    format += sprintf("/*%s*/" , t.comment)
                } else {
                    format += "//" + t.comment // contains \n
                }

                continue
            }
            if t , ok := n.node.(ast.Block) ; ok &&
                t.isCompilerAuto == false {
                format += "{\n"
                format += this.formatBlock(this.indentIncrement , t) + "\n\n"
                format += "}\n"
                continue
            }
            if t , ok := n.node.(ast.Function) ; ok {
                if t.isPublic() {
                    format += "public " + this.formatFunction("" , t , false) + "\n"
                } else {
                    format += this.formatFunction("" , t , false) + "\n"
                }

                continue
            }
            if t , ok := n.node.(ast.Enum) ; ok {
                format += this.formatEnum("" , t) + "\n\n"
                continue
            }
            if t , ok := n.node.(ast.Class) ; ok {
                format += this.formatClass("" , t) + "\n\n"
                continue
            }
            if t , ok := n.node.(ast.Constant) ; ok {
                format += this.formatConstant("" , t) + "\n"
                continue
            }
            if t , ok := n.node.(ast.Line) ; ok {
                format += "\n"
                continue
            }
            if t , ok := n.node.(ast.Import) ; ok {
                format += this.formatImport("" , t) + "\n"
                index := k + 1
                if index < len(nodes) {
                    _ , ok1 := nodes[index].node.(ast.Import)
                    _ , ok2 := nodes[index].node.(ast.Line)
                    if ok1 == false && ok2 == false {
                        format += "\n"
                    }
                }
                continue
            }
            if t , ok := n.node.(ast.Expression) ; ok {
                format += this.formatExpression("" , t) + "\n"
                continue
            }
            if t , ok := n.node.(ast.TypeAlias) ; ok {
                format += this.formatTypealias("" , t) + "\n"
                continue
            }
            panic(n.node.getClass().toString() + " not handle")
        }

    }
    fn formatConstant(indent string , c ast.Constant) -> (format string = "") {
        format = indent
        if c.isPublic() {
            format += "public "
        }
        format += "const " + c.name
        if c.Type != null {
            format += " " + c.Type.typeName()
        }
        format += " = " + this.formatExpression(indent + this.indentIncrement , c.defaultValueExpression)
    }
    fn formatFunction(indent string , f ast.Function , isAbstract bool) -> (format string = "") {
        format += "fn "
        if f.name != null && f.name != "" {
            format += f.name
        }
        if len(f.Type.templateNames) > 0 {
            format += " <"
            for k , v := range f.Type.templateNames {
                format += v.name
                if k != len(f.Type.templateNames) - 1 {
                    format += " , "
                }
            }

            format += "> "
        }
        format += "("
        if f.Type.lpContainsLf {
            format += "\n"
            format += indent + this.indentIncrement
        }
        if f.Type.lpContainsInlineComment != null {
            format += " // " + f.Type.lpContainsInlineComment
            format += indent + this.indentIncrement
        }
        for k , v := range f.Type.parameterList {
            if v.name != null && v.name != "" {
                format += v.name + " "
            }
            format += v.Type.typeName()
            if v.defaultValueExpression != null && v.defaultValueExpression.isCompilerAuto == false {
                format += " = "
                format += this.formatExpression(indent + this.indentIncrement , v.defaultValueExpression)
            }
            if k != len(f.Type.parameterList) - 1 || f.Type.vArgs != null {
                if v.containsLfOrInlineComment() == false {
                    format += " , "
                } else {
                    format += ","
                }

            }
            if v.containsLf {
                format += "\n"
                format += indent + this.indentIncrement
            }
            if v.inlineComment != null {
                format += " // " + v.inlineComment
                format += indent + this.indentIncrement
            }
        }

        if f.Type.vArgs != null {
            if f.Type.vArgs.name != null && f.Type.vArgs.name != "" {
                format += f.Type.vArgs.name + " "
            }
            format += f.Type.vArgs.Type.typeName()
        }
        format += ")"
        if f.Type.voidReturn() == false {
            format += " -> ("
            if f.Type.returnLpContainsLf {
                format += "\n"
                format += indent + this.indentIncrement
            }
            if f.Type.returnLpContainsInlineComment != null {
                format += "// " + f.Type.returnLpContainsInlineComment
                format += indent + this.indentIncrement
            }
            for k , v := range f.Type.returnList {
                if v.name != null && v.name != "" {
                    format += v.name + " "
                }
                format += v.Type.typeName()
                if v.defaultValueExpression != null && v.defaultValueExpression.isCompilerAuto == false {
                    format += " = "
                    format += this.formatExpression(indent + this.indentIncrement , v.defaultValueExpression)
                }
                if k != len(f.Type.returnList) - 1 {
                    if v.containsLfOrInlineComment() == false {
                        format += " , "
                    } else {
                        format += ","
                    }

                }
                if v.containsLf {
                    format += "\n"
                    format += indent + this.indentIncrement
                }
                if v.inlineComment != null {
                    format += "// " + v.inlineComment
                    format += indent + this.indentIncrement
                }
            }

            format += ")"
        }
        if isAbstract {
            return
        }
        if len(f.block.statements) > 0 {
            format += " {\n"
            format += this.formatBlock(indent + this.indentIncrement , f.block)
            format += indent + "}"
        } else {
            format += "{}"
        }

    }
    fn formatClass(indent string , c ast.Class) -> (format string = "") {
        format = indent
        if c.isPublic() {
            format += "public "
        }
        if c.isFinal() {
            format += "final "
        }
        if c.isAbstract() && c.isInterface() == false {
            format += "abstract "
        }
        if c.isInterface() {
            format += "interface "
        } else {
            format += "class "
        }

        if len(c.fmts) == 0 &&
            c.superClassName == null &&
            len(c.interfaceNames) == 0 {
            format += c.name + "{}\n"
            return
        }
        format += c.name
        if c.superClassName != null {
            format += " extends " + c.superClassName.name
        }
        if len(c.interfaceNames) > 0 {
            format += " implements "
            for k , v := range c.interfaceNames {
                format += v.name
                if k != len(c.interfaceNames) - 1 {
                    if v.containsLfOrInlineComment() == false {
                        format += " , "
                    } else {
                        format += ","
                    }

                    if v.containsLf {
                        format += "\n"
                        format += this.indentIncrement + indent
                    } else if v.inlineComment != null {
                        format += " //" + v.inlineComment
                        format += this.indentIncrement + indent
                    }
                }
            }

        }
        format += " {\n"
        for k := 0 ; k < len(c.fmts) ; k++ {
            f := c.fmts[k]
            if t , ok := f.(ast.Comment) ; ok {
                if t.isMulti {
                    format += indent + this.indentIncrement + sprintf("/*%s*/" , t.comment)
                } else {
                    format += indent + this.indentIncrement + " //" + t.comment
                }

                continue
            }
            if t , ok := f.(ast.Line) ; ok {
                format += "\n"
                continue
            }
            if field , ok := f.(ast.ClassFieldDeclaration) ; ok {
                fields := []ast.ClassFieldDeclaration{}
                {

                    t , ok := c.fmts[k].(ast.ClassFieldDeclaration)
                    for ok {
                        fields.append(t)
                        k++
                        if k >= len(c.fmts) {
                            break
                        }
                        t , ok = c.fmts[k].(ast.ClassFieldDeclaration)
                    }

                    k--
                }

                maxName , maxAccessRange , maxTypeName , hasFinal , hasStatic :=
                    this.getFieldDeclarationGroupMeta(fields)
                for k , f := range fields {
                    d := indent + this.indentIncrement
                    if maxAccessRange != "" {
                        accessControl := this.getFieldAccessControlString(f)
                        d += accessControl
                        if len(accessControl) < len(maxAccessRange) {
                            d += this.mkSpacing(len(maxAccessRange) - len(accessControl))
                        }
                        d += " "
                    }
                    if hasFinal {
                        if f.fields[0].isFinal() {
                            d += "final "
                        } else {
                            d += "      "
                        }

                    }
                    if hasStatic {
                        if f.fields[0].isStatic() {
                            d += "static "
                        } else {
                            d += "       "
                        }

                    }
                    name := ""
                    for k , v := range f.nameList {
                        name += v.name
                        if k != len(f.nameList) - 1 {
                            name += " , "
                        }
                        // if v.containsLf {
                    }

                    d += name
                    if t := len(maxName) - len(name) ; t > 0 {
                        d += this.mkSpacing(t)
                    }
                    d += " "
                    d += f.fields[0].Type.typeName()
                    if len(f.initValues) > 0 {
                        d += " = "
                        list := new ast.Expression()
                        list.Type = ast.ExpressionTypeList
                        list.data = f.initValues
                        d += this.formatExpression(this.mkSpacing(len(d)) , list)
                    } else {
                        if t := len(maxTypeName) - len(f.fields[0].Type.typeName()) ; t > 0 {
                            d += this.mkSpacing(t)
                        }
                    }

                    if f.inlineComment != null {
                        d += " //" + f.inlineComment
                    } else {
                        d += "\n"
                    }

                    format += d
                }

                continue
            }
            // must be a method 
            method := f.(ast.ClassMethod)
            m := indent + this.indentIncrement
            if method.isPublic() {
                m += "public "
            }
            if method.isPrivate() {
                m += "private "
            }
            if method.isProtected() {
                m += "protected "
            }
            if method.isFinal() {
                m += "final "
            }
            if method.isStatic() {
                m += "static "
            }
            if method.isAbstract() {
                m += "abstract "
            }
            if method.Function.name == "<init>" {
                method.Function.name = c.name
            }
            m += this.formatFunction(indent + this.indentIncrement , method.Function , method.isAbstract())
            format += m + "\n"
        }

        format += indent + "}\n"
    }
    fn mkSpacing(length int) -> (s string = "") {
        for i := 0 ; i < length ; i++ {
            s += " "
        }

    }
    fn getFieldAccessControlString(f ast.ClassFieldDeclaration) -> (access string = "") {
        if f.fields[0].isPublic() {
            access = "public"
        }
        if f.fields[0].isProtected() {
            access = "protected"
        }
        if f.fields[0].isPrivate() {
            access = "private"
        }
    }
    fn getFieldDeclarationGroupMeta(fs []ast.ClassFieldDeclaration) -> (maxName string = "",
        maxAccessRange string = "" , maxTypeName string = "" , hasFinal bool , hasStatic bool) {
        for f := range fs {
            if f.fields[0].isPublic() {
                maxAccessRange = maxAccessRange == ""?"public":maxAccessRange
            }
            if f.fields[0].isPrivate() {
                maxAccessRange = maxAccessRange == "" || maxAccessRange == "public"?"private":maxAccessRange
            }
            if f.fields[0].isProtected() {
                maxAccessRange = "protected"
            }
            if f.fields[0].isFinal() {
                hasFinal = true
            }
            if f.fields[0].isStatic() {
                hasStatic = true
            }
            if typeName := f.fields[0].Type.typeName() ; len(typeName) > len(maxTypeName) {
                maxTypeName = typeName
            }
            if name := this.getFieldDeclarationName(f) ; len(name) > len(maxName) {
                maxName = name
            }
        }

    }
    fn getFieldDeclarationName(f ast.ClassFieldDeclaration) -> (name string = "") {
        for kk , ff := range f.nameList {
            name += ff.name
            if kk != len(f.nameList) - 1 {
                name += " , "
            }
        }

    }
    fn formatEnum(indent string , e ast.Enum) -> (format string = "") {
        format = indent
        if e.isPublic() {
            format += "public "
        }
        format += "enum " + e.name + " {\n"
        for k , f := range e.fmts {
            if t , ok := f.(ast.Comment) ; ok {
                if t.isMulti {
                    format += indent + this.indentIncrement + sprintf("/*%s*/" , t.comment)
                } else {
                    format += indent + this.indentIncrement + "//" + t.comment + "\n"
                }

                continue
            }
            if t , ok := f.(ast.Line) ; ok {
                format += "\n"
                continue
            }
            v := f.(ast.EnumName)
            format += this.indentIncrement + v.name
            if v.noNeed != null {
                format += " " + this.formatExpression(indent , v.noNeed)
            }
            isLast := true
            for en := range e.fmts[k + 1:] {
                _ , ok := en.(ast.EnumName)
                if ok {
                    isLast = false
                    break
                }
            }

            if isLast == false {
                format += ","
            }
            if v.containsLf {
                format += "\n"
            } else if v.inlineComment != null {
                format += "    //" + v.inlineComment
            }
        }

        format += indent + "}\n"
    }
    fn formatImport(indent string , i ast.Import) -> (format string = "") {
        format = indent
        format += "import \"" + i.Import + "\""
        if i.alias != null {
            format += " as " + i.alias
        }
    }
     // block can have no "{}"
    fn formatBlock(indent string , block ast.Block) -> (format string = "") {
        for s := range block.statements {
            format += this.formatStatement(indent , s)
        }

    }
    fn formatStatement(indent string , s ast.Statement) -> (format string = "") {
        switch s.Type {
            case ast.StatementTypeExpression:
                if s.inlineComment == null {
                    format = indent + this.formatExpression(indent , s.Expression) + "\n"
                } else {
                    format = indent + this.formatExpression(indent , s.Expression) + " //" + s.inlineComment
                }

            case ast.StatementTypeIf:
                format += this.formatIf(indent , s.statementIf)
            case ast.StatementTypeBlock:
                format += indent + "{\n"
                format += this.formatBlock(indent + this.indentIncrement , s.block)
                format += indent + "}\n"
            case ast.StatementTypeFor:
                format += this.formatFor(indent , s.StatementFor)
            case ast.StatementTypeContinue:
                if s.inlineComment == null {
                    format += indent + "continue" + "\n"
                } else {
                    format += indent + "continue " + " //" + s.inlineComment
                }

            case ast.StatementTypeReturn:
                format += this.formatReturn(indent , s.StatementReturn , s.inlineComment)
            case ast.StatementTypeBreak:
                if s.inlineComment == null {
                    format += indent + "break" + "\n"
                } else {
                    format += indent + "break" + " //" + s.inlineComment
                }

            case ast.StatementTypeSwitch:
                format += this.formatSwitch(indent , s.StatementSwitch)
            case ast.StatementTypeWhen:
                format += this.formatWhen(indent , s.StatementWhen)
            case ast.StatementTypeLabel:
                format += indent[:len(indent) - 4] + s.StatementLabel.name + ":\n"
            case ast.StatementTypeGoTo:
                format += this.formatGoto(indent , s.StatementGoTo , s.inlineComment)
            case ast.StatementTypeDefer:
                format += this.formatDefer(indent , s.Defer)
            case ast.StatementTypeClass:
                format += this.formatClass(indent , s.Class)
            case ast.StatementTypeEnum:
                format += this.formatEnum(indent , s.Enum)
            case ast.StatementTypeNop:
                //nothing
            case ast.StatementTypeImport:
                format += this.formatImport(indent , s.Import) + "\n"
            case ast.StatementTypeTypeAlias:
                format += this.formatTypealias(indent , s.TypeAlias)
            case ast.StatementTypeEmptyLine:
                format += "\n"
            case ast.StatementTypeComment:
                format += indent + "//" + s.comment
            case ast.StatementTypeCommentMultiLine:
                format += indent + sprintf("/*%s*/" , s.comment)
        }

    }
    fn formatTypealias(indent string , a ast.TypeAlias) -> (format string = "") {
        format = indent
        format += sprintf("typealias %s = %s\n" , a.name , a.Type.typeName())
    }
    fn formatDefer(indent string , d ast.StatementDefer) -> (format string = "") {
        format = indent
        if d.isOneStatement {
            format += "defer {\n"
            format += this.formatStatement(indent + this.indentIncrement , d.block.statements[0])
            format += indent + "}\n"
        } else {
            format += "defer {\n"
            format += this.formatBlock(indent + this.indentIncrement , d.block)
            format += indent + "}\n"
        }

    }
    fn formatIf(indent string , s ast.StatementIf) -> (format string = "") {
        format = indent
        format += "if "
        for v := range s.prefixExpressions {
            format += this.formatExpression(indent , v)
            format += " ; "
        }

        format += this.formatExpression(indent , s.condition)
        format += " {\n"
        format += this.formatBlock(indent + this.indentIncrement , s.block)
        if len(s.elseIfList) == 0 && s.Else == null {
            format += indent + "}\n"
        } else {
            format += indent + "}"
        }

        for k , v := range s.elseIfList {
            format += " else if " + this.formatExpression(indent , v.condition) + " {\n"
            format += this.formatBlock(indent + this.indentIncrement , v.block)
            if k == len(s.elseIfList) - 1 && s.Else == null {
                format += indent + "}\n"
            } else {
                format += indent + "}"
            }

        }

        if s.Else != null {
            format += " else {\n"
            format += this.formatBlock(indent + this.indentIncrement , s.Else)
            format += indent + "}\n"
        }
    }
    fn formatGoto(indent string , s ast.StatementGoTo , inlineComment string) -> (format string = "") {
        format = indent
        if inlineComment == null {
            format += "goto " + s.labelName + "\n"
        } else {
            format += "goto " + s.labelName + " //" + inlineComment
        }

    }
    fn formatFor(indent string , s ast.StatementFor) -> (format string = "") {
        format = indent
        format += "for "
        if s.Init == null &&
            s.condition == null &&
            s.increment == null {
            if s.inlineComment == null {
                format += "{\n"
            } else {
                format += "{ // " + s.inlineComment
            }

        } else if s.Init == null && s.condition != null && s.increment == null {
            format += this.formatExpression(indent + this.indentIncrement , s.condition) + " "
            if s.inlineComment == null {
                format += "{\n"
            } else {
                format += "{ // " + s.inlineComment
            }

        } else {
            if s.Init != null {
                format += this.formatExpression(indent + this.indentIncrement , s.Init) + " ; "
            }
            if s.condition != null {
                format += this.formatExpression(indent + this.indentIncrement , s.condition) + " ; "
            }
            if s.increment != null {
                format += this.formatExpression(indent + this.indentIncrement , s.increment) + " "
            }
            if s.inlineComment == null {
                format += "{\n"
            } else {
                format += "{ // " + s.inlineComment
            }

        }

        format += this.formatBlock(indent + this.indentIncrement , s.block)
        format += indent + "}\n"
    }
    fn formatSwitch(indent string , s ast.StatementSwitch) -> (format string = "") {
        format = indent
        format += "switch "

        if len(s.prefixExpressions) > 0 {
            for v := range s.prefixExpressions {
                format += this.formatExpression(indent , v)
                format += " ; "
                if v.containsLf {
                    format += "\n"
                    format += this.indentIncrement + indent
                } else if v.inlineComment != null {
                    format += " //" + v.inlineComment
                    format += this.indentIncrement + indent
                }
            }

        }
        format += this.formatExpression(indent , s.condition)
        format += " {\n"
        for c := range s.cases {
            format += indent + this.indentIncrement + "case "
            for k , e := range c.matches {
                format += this.formatExpression(indent , e)
                if k != len(c.matches) - 1 {
                    if e.containsLfOrInlineComment() == false {
                        format += " , "
                    } else {
                        format += ","
                    }

                }
                if e.containsLf {
                    format += "\n"
                    format += indent + this.indentIncrement + this.indentIncrement
                } else if e.inlineComment != null {
                    format += " //" + e.inlineComment
                    format += indent + this.indentIncrement + this.indentIncrement
                }
            }

            format += ":\n"
            if c.block != null {
                format += this.formatBlock(indent + this.indentIncrement + this.indentIncrement , c.block)
            }
        }

        if s.defaultBlock != null {
            format += indent + this.indentIncrement + "default:\n"
            format += this.formatBlock(indent + this.indentIncrement + this.indentIncrement , s.defaultBlock)
        }
        format += indent + "}\n"
    }
    fn formatWhen(indent string , w ast.StatementWhen) -> (format string = "") {
        format = indent
        if len(w.prefixExpressions) > 0 {
            for k , v := range w.prefixExpressions {
                format += this.formatExpression(indent + this.indentIncrement + indent , v)
                if k != len(w.prefixExpressions) - 1 {
                    if v.containsLfOrInlineComment() == false {
                        format += " , "
                    } else {
                        format += ","
                    }

                    if v.containsLf {
                        format += "\n"
                        format += indent + this.indentIncrement
                    } else if v.inlineComment != null {
                        format += " //" + v.inlineComment
                        format += indent + this.indentIncrement
                    }
                }
            }

            format += " ; "
        }
        if w.typeExpression == null {
            format += "when " + w.condition.typeName() + " {\n"
        } else {
            format += "when " +
                this.formatExpression(indent + this.indentIncrement , w.typeExpression) + " {\n"
        }

        for _ , c := range w.cases {
            d := indent + this.indentIncrement + "case "
            for k , v := range c.matches {
                d += v.typeName()
                if k != len(c.matches) - 1 {
                    if v.containsLfOrInlineComment() == false {
                        d += " , "
                    } else {
                        d += ","
                    }

                }
                if v.containsLf {
                    d += "\n"
                    d += indent + this.indentIncrement
                } else if v.inlineComment != null {
                    d += " //" + v.inlineComment
                    d += indent + this.indentIncrement
                }
            }

            d += ":\n"
            d += this.formatBlock(indent + this.indentIncrement + this.indentIncrement , c.block)
            format += d
        }

        if w.defaultBlock != null {
            format += indent + this.indentIncrement + "default:\n"
            format += this.formatBlock(indent + this.indentIncrement + this.indentIncrement , w.defaultBlock)
        }
        format += indent + "}\n"
    }
    fn formatReturn(indent string , s ast.StatementReturn , inlineComment string) -> (format string = "") {
        format = indent
        format += "return"
        if inlineComment != null || len(s.expressions) > 0 {
            format += " "
        }
        for k , v := range s.expressions {
            format += this.formatExpression(indent , v)
            if k != len(s.expressions) - 1 {
                if v.containsLfOrInlineComment() == false {
                    format += " , "
                } else {
                    format += ","
                }

            }
            if v.containsLf {
                format += "\n"
                format += indent + this.indentIncrement
                indent += this.indentIncrement
            } else if v.inlineComment != null {
                format += "//" + v.inlineComment
                format += indent + this.indentIncrement
                indent += this.indentIncrement
            }
        }

        if inlineComment == null {
            format += "\n"
        } else {
            format += " //" + inlineComment
        }

    }
    fn formatExpression(indent string , e ast.Expression) -> (format string = "") {
        switch e.Type {
            case ast.ExpressionTypeNull:
                format = "null"
            case ast.ExpressionTypeBool:
                return "" + e.boolValue
            case ast.ExpressionTypeByte,
                ast.ExpressionTypeShort,
                ast.ExpressionTypeChar,
                ast.ExpressionTypeInt,
                ast.ExpressionTypeLong,
                ast.ExpressionTypeFloat,
                ast.ExpressionTypeDouble,
                ast.ExpressionTypeString:
                return e.literalRaw
            case ast.ExpressionTypeArray:
                array := e.data.(ast.ExpressionArray)
                if array.Type != null {
                    format = array.Type.typeName() + "{"
                    for k , v := range array.expressions {
                        format += this.formatExpression(indent + this.indentIncrement , v)
                        if k != len(array.expressions) - 1 {
                            if v.containsLfOrInlineComment() == false {
                                format += " , "
                            } else {
                                format += ","
                            }

                        }
                    }

                    format += "}"
                } else {
                    format = "["
                    for k , v := range array.expressions {
                        format += this.formatExpression(indent , v)
                        if k != len(array.expressions) - 1 {
                            if v.containsLfOrInlineComment() == false {
                                format += " , "
                            } else {
                                format += ","
                            }

                        }
                    }

                    format += "]"
                }

            case ast.ExpressionTypeLogicalOr,
                ast.ExpressionTypeLogicalAnd,
                ast.ExpressionTypeOr,
                ast.ExpressionTypeAnd,
                ast.ExpressionTypeXor,
                ast.ExpressionTypeLsh,
                ast.ExpressionTypeRsh,
                ast.ExpressionTypeAdd,
                ast.ExpressionTypeSub,
                ast.ExpressionTypeMul,
                ast.ExpressionTypeDiv,
                ast.ExpressionTypeMod:
                bin := e.data.(ast.ExpressionBinary)
                if bin.containsLf {
                    format = this.formatExpression(indent , bin.left) + " " + e.op + "\n"
                    format += indent + this.indentIncrement + this.formatExpression(indent + this.indentIncrement , bin.right)
                } else if bin.inlineComment != null {
                    format = this.formatExpression(indent , bin.left) + " " + e.op + " //" + bin.inlineComment
                    format += indent + this.indentIncrement + this.formatExpression(indent + this.indentIncrement , bin.right)
                } else {
                    format = this.formatExpression(indent , bin.left) + " " +
                        e.op + " " + this.formatExpression(indent , bin.right)
                }

            case ast.ExpressionTypeVarAssign,
                ast.ExpressionTypeAssign,
                ast.ExpressionTypePlusAssign,
                ast.ExpressionTypeMinusAssign,
                ast.ExpressionTypeMulAssign,
                ast.ExpressionTypeDivAssign,
                ast.ExpressionTypeModAssign,
                ast.ExpressionTypeAndAssign,
                ast.ExpressionTypeOrAssign,
                ast.ExpressionTypeXorAssign,
                ast.ExpressionTypeLshAssign,
                ast.ExpressionTypeRshAssign,
                ast.ExpressionTypeEq,
                ast.ExpressionTypeNe,
                ast.ExpressionTypeGe,
                ast.ExpressionTypeGt,
                ast.ExpressionTypeLe,
                ast.ExpressionTypeLt:
                bin := e.data.(ast.ExpressionBinary)
                if bin.containsLf {
                    format = this.formatExpression(indent , bin.left) + " " + e.op + "\n"
                    format += indent + this.indentIncrement + this.formatExpression(indent + this.indentIncrement , bin.right)
                } else if bin.inlineComment != null {
                    format = this.formatExpression(indent , bin.left) + " " + e.op + " //" + bin.inlineComment
                    format += indent + this.indentIncrement + this.formatExpression(indent + this.indentIncrement , bin.right)
                } else {
                    format = this.formatExpression(indent , bin.left) + " " +
                        e.op + " " + this.formatExpression(indent , bin.right)
                }

            case ast.ExpressionTypeIndex:
                index := e.data.(ast.ExpressionIndex)
                format = this.formatExpression(indent , index.Expression) + "["
                format += this.formatExpression(indent , index.index)
                format += "]"
            case ast.ExpressionTypeSelection:
                selection := e.data.(ast.ExpressionSelection)
                if selection.Expression.Type == ast.ExpressionTypeDot {
                    format = "." + selection.name
                } else {
                    format = this.formatExpression(indent , selection.Expression) + "."
                    if selection.containsLf {
                        format += "\n"
                        format += indent + this.indentIncrement + selection.name
                    } else if selection.inlineComment != null {
                        format += " //" + selection.inlineComment
                        format += indent + this.indentIncrement + selection.name
                    } else {
                        format += selection.name
                    }

                }

            case ast.ExpressionTypeSelectionConst:
                selection := e.data.(ast.ExpressionSelection)
                format = this.formatExpression(indent , selection.Expression) + "."
                if selection.containsLf {
                    format += "\n"
                    format += indent + this.indentIncrement + selection.name
                } else if selection.inlineComment != null {
                    format += " //" + selection.inlineComment
                    format += indent + this.indentIncrement + selection.name
                } else {
                    format += selection.name
                }

            case ast.ExpressionTypeMethodCall:
                call := e.data.(ast.ExpressionMethodCall)
                if call.Expression.Type == ast.ExpressionTypeDot {
                    format += "." + call.name + "("
                } else {
                    format += this.formatExpression(indent , call.Expression) + "." + call.name + "("
                }

                for k , v := range call.args {
                    format += this.formatExpression(indent , v)
                    if k != len(call.args) - 1 {
                        if v.containsLfOrInlineComment() == false {
                            format += " , "
                        } else {
                            format += ","
                        }

                    }
                    if v.containsLf {
                        format += "\n"
                        format += this.indentIncrement + indent
                    } else if v.inlineComment != null {
                        format += " //" + v.inlineComment
                        format += this.indentIncrement + indent
                    }
                }

                format += ")"
            case ast.ExpressionTypeFunctionCall:
                call := e.data.(ast.ExpressionFunctionCall)
                format += this.formatExpression(indent , call.Expression) + "("
                for k , v := range call.args {
                    format += this.formatExpression(indent , v)
                    if k != len(call.args) - 1 {
                        if v.containsLfOrInlineComment() == false {
                            format += " , "
                        } else {
                            format += ","
                        }

                        if v.containsLf {
                            format += "\n"
                            format += this.indentIncrement + indent
                        } else if v.inlineComment != null {
                            format += " //" + v.inlineComment
                            format += this.indentIncrement + indent
                        }
                    }
                }

                format += ")"
            case ast.ExpressionTypeincrement:
                format += this.formatExpression(indent , e.data.(ast.Expression)) + "++"
            case ast.ExpressionTypeDecrement:
                format += this.formatExpression(indent , e.data.(ast.Expression)) + "--"
            case ast.ExpressionTypePrefixincrement:
                format += "++" + this.formatExpression(indent , e.data.(ast.Expression))
            case ast.ExpressionTypePrefixDecrement:
                format += "--" + this.formatExpression(indent , e.data.(ast.Expression))
            case ast.ExpressionTypeNegative , ast.ExpressionTypeNot , ast.ExpressionTypeBitwiseNot:
                format += e.op + this.formatExpression(indent , e.data.(ast.Expression))
            case ast.ExpressionTypeIdentifier:
                format = e.data.(ast.ExpressionIdentifier).name
            case ast.ExpressionTypeNew:
                n := e.data.(ast.ExpressionNew)
                format += "new " + n.Type.typeName() + "("
                for k , v := range n.args {
                    format += this.formatExpression(indent , v)
                    if k != len(n.args) - 1 {
                        if v.containsLfOrInlineComment() == false {
                            format += " , "
                        } else {
                            format += ","
                        }

                    }
                    if v.containsLf {
                        format += "\n"
                        format += this.indentIncrement + indent
                    } else if v.inlineComment != null {
                        format += " //" + v.inlineComment
                        format += this.indentIncrement + indent
                    }
                }

                format += ")"
            case ast.ExpressionTypeList:
                list := e.data.([]ast.Expression)
                for k , v := range list {
                    format += this.formatExpression(indent , v)
                    if k != len(list) - 1 {
                        format += " , "
                    }
                    if v.containsLf {
                        format += "\n"
                        format += this.indentIncrement + indent
                    } else if v.inlineComment != null {
                        format += " //" + v.inlineComment
                        format += this.indentIncrement + indent
                    }
                }

            case ast.ExpressionTypeFunctionLiteral:
                format = this.formatFunction(indent , e.data.(ast.Function) , false)
            case ast.ExpressionTypeVar:
                vs := e.data.(ast.ExpressionVar)
                if e.isPublic {
                    format += "public "
                }
                format += "var "
                for k , v := range vs.variables {
                    format += v.name
                    if k != len(vs.variables) - 1 {
                        if v.containsLfOrInlineComment() == false {
                            format += " , "
                        } else {
                            format += ","
                        }

                    }
                    if v.containsLf {
                        format += "\n"
                        format += this.indentIncrement + indent
                    } else if v.inlineComment != null {
                        format += " //" + v.inlineComment
                        format += this.indentIncrement + indent
                    }
                }

                if vs.Type != null {
                    format += " " + vs.Type.typeName()
                }
                if len(vs.initValues) > 0 {
                    format += " = "
                    for k , v := range vs.initValues {
                        format += this.formatExpression(indent , v)
                        if k != len(vs.initValues) - 1 {
                            if v.containsLfOrInlineComment() == false {
                                format += " , "
                            } else {
                                format += ","
                            }

                        }
                        if v.containsLf {
                            format += "\n"
                            format += this.indentIncrement + indent
                        } else if v.inlineComment != null {
                            format += " //" + v.inlineComment
                            format += this.indentIncrement + indent
                        }
                    }

                }
            case ast.ExpressionTypeConst:
                cs := e.data.([]ast.Constant)
                for v := range cs {
                    t := indent + "cosnt " + v.name + " "
                    if v.Type != null {
                        t += v.Type.typeName() + " "
                    }
                    t += "="
                    t += this.formatExpression(indent , v.defaultValueExpression) + "\n"
                    format += t
                }

            case ast.ExpressionTypeCheckCast:
                c := e.data.(ast.ExpressionTypeConversion)
                format += c.Type.typeName() + "("
                format += this.formatExpression(indent , c.Expression)
                format += ")"
            case ast.ExpressionTypeRange:
                format = "range " + this.formatExpression(indent , e.data.(ast.Expression))
            case ast.ExpressionTypeSlice:
                s := e.data.(ast.ExpressionSlice)
                format += this.formatExpression(indent , s.expressionOn) + "["
                if s.start != null {
                    format += this.formatExpression(indent , s.start)
                }
                if s.end != null && s.start != null {
                    format += " : "
                } else {
                    format += ":"
                }

                if s.end != null {
                    format += this.formatExpression(indent , s.end)
                }
                format += "]"
            case ast.ExpressionTypeMap:
                m := e.data.(ast.ExpressionMap)
                if m.Type == null {
                    format += "{"
                    if m.containsLf() {
                        format += "\n"
                        format += indent + this.indentIncrement
                    }
                    for k , v := range m.keyValuePairs {
                        format += this.formatExpression(indent , v.key) + " -> "
                        format += this.formatExpression(indent , v.value)
                        if k != len(m.keyValuePairs) - 1 {
                            if v.containsLfOrInlineComment() == false {
                                format += " , "
                            } else {
                                format += ","
                            }

                            if v.containsLf {
                                format += "\n"
                                format += indent + this.indentIncrement
                            } else if v.inlineComment != null {
                                format += "//" + v.inlineComment
                                format += indent + this.indentIncrement
                            }
                        } else {
                            if m.containsLf() {
                                format += "\n"
                            }
                        }

                    }

                    if m.containsLf() {
                        format += indent + "}"
                    } else {
                        format += "}"
                    }

                } else {
                    format += sprintf("map{%s -> %s}{" , m.Type.Map.K.typeName() , m.Type.Map.V.typeName())
                    if m.containsLf() {
                        format += "\n"
                        format += indent + this.indentIncrement
                    }
                    for k , v := range m.keyValuePairs {
                        format += this.formatExpression(indent , v.key) + " -> "
                        format += this.formatExpression(indent , v.value)
                        if k != len(m.keyValuePairs) - 1 {
                            if v.containsLfOrInlineComment() == false {
                                format += " , "
                            } else {
                                format += ","
                            }

                            if v.containsLf {
                                format += "\n"
                                format += indent + this.indentIncrement
                            } else if v.inlineComment != null {
                                format += "//" + v.inlineComment
                                format += indent + this.indentIncrement
                            }
                        } else {
                            if m.containsLf() {
                                format += "\n"
                            }
                        }

                    }

                    format += "}"
                }

            case ast.ExpressionTypeTypeAssert:
                a := e.data.(ast.ExpressionTypeAssert)
                format += this.formatExpression(indent , a.Expression) + ".("
                if a.isType {
                    format += "type"
                } else {
                    format += a.Type.typeName()
                }

                format += ")"
            case ast.ExpressionTypeQuestion:
                q := e.data.(ast.ExpressionQuestion)
                format += this.formatExpression(indent , q.selection)
                format += "?"
                format += this.formatExpression(indent , q.True)
                format += ":"
                format += this.formatExpression(indent , q.False)
            case ast.ExpressionTypeGlobal:
                return "global"
            case ast.ExpressionTypeParenthesis:
                return "(" + this.formatExpression(indent , e.data.(ast.Expression)) + ")"
            case ast.ExpressionTypeVArgs:
                return this.formatExpression(indent , e.data.(ast.Expression)) + "..."
            case ast.ExpressionTypeDot:
                return "."
            case ast.ExpressionTypeAutoCompletion:
        }

    }
    fn getStringMaxWideLength(s string) -> (length int) {
        t := s.split("\n")
        for v := range t {
            if len(v) > length {
                length = len(v)
            }
        }

    }
}


