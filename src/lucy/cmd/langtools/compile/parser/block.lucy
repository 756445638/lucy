import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/lex"
import "lucy/cmd/langtools/compile/jvm/cg"


class BlockParser  extends ParserExtends{
	
	StatementForParser StatementForParser
	StatementIfParser StatementIfParser
	StatementWhenParser StatementWhenParser
	StatementSwitchParser StatementSwitchParser

	fn BlockParser(parser Parser){
		this.super()
		this.parser = parser
		this.StatementForParser = new StatementForParser(parser,this)
        this.StatementIfParser = new StatementIfParser(parser,this)
        this.StatementWhenParser = new StatementWhenParser(parser,this)
        this.StatementSwitchParser = new StatementSwitchParser(parser,this)

	}
	

    fn validAfterDefer() -> (err error) {
        if this.parser.ExpressionParser.looksLikeExpression() ||
            this.parser.token.Type == lex.TokenLc {
            return null
        }
        return new error(sprintf("%s not valid token '%s' after defer",
            this.parser.errMsgPrefix(), this.parser.token.Description))
    }

	fn parseStatementList(block ast.Block, isGlobal bool) {
	    if block.statements == null {
	        block.statements = []ast.Statement{}
	    }
		block.pos = this.parser.mkPos()
		defer {
			block.endPos = this.parser.mkPos()
		}
		isDefer := false
		var deferPos ast.Pos
		isAbstract := false
		isFinal := false
		var finalPos ast.Pos
		comment := new CommentParser(this.parser)
		comment.parser = this.parser
		fn resetPrefix () {
			isFinal = false
			isDefer = false
			deferPos = null
			isAbstract = false
			comment.reset()
		}

		var err error
		for lex.TokenEof != this.parser.token.Type {
			if len(this.parser.errs) > this.parser.nErrors2Stop {
				break
			}
			if this.parser.ExpressionParser.looksLikeExpression() {
				this.parseExpressionStatement(block, isDefer, deferPos)
				resetPrefix()
				continue
			}
			switch this.parser.token.Type {
			case lex.TokenComment, lex.TokenMultiLineComment:
				comment.read()
			case lex.TokenSemicolon, lex.TokenLf: // may be empty statement
				resetPrefix()
				this.Next(lfNotToken) // look up next
				continue
			case lex.TokenFinal:
				pos := this.parser.mkPos()
				this.parser.Next(lfIsToken)
				this.parser.unExpectNewLineAndSkip()
				if err := this.parser.validAfterFinal(); err != null {
					isFinal = false
				} else {
					isFinal = true
					finalPos = pos
				}
				continue
			case lex.TokenDefer:
				pos := this.parser.mkPos()
				this.Next(lfIsToken)
				if err := this.validAfterDefer(); err != null {
					this.parser.errs.append( err)
				} else {
					isDefer = true
					deferPos = pos
				}
			case lex.TokenVar:
				pos := this.parser.mkPos()
				this.Next(lfIsToken) // skip var key word
				vs, err := this.parser.parseVar()
				if err != null {
					this.consume(untilSemicolonOrLf)
					this.Next(lfNotToken)
					continue
				}
				statement := new ast.Statement()
				statement.Type = ast.StatementTypeExpression
				statement.pos = this.parser.mkPos()
				statement.Expression = new ast.Expression()
				statement.Expression.Type = ast.ExpressionTypeVar
				statement.Expression.data = vs
				statement.Expression.pos = pos
				statement.Expression.op = "var"
				block.statements.append(statement)
				this.parser.validStatementEnding()

			case lex.TokenIf:
				pos := this.parser.mkPos()
				statement, err := this.StatementIfParser.parseIf()
				if err != null {
					this.consume(untilRc)
					this.Next(lfNotToken)
					continue
				}
				{
				    t := new ast.Statement()
				    t.Type = ast.StatementTypeIf
				    t.StatementIf = statement
				    t.pos = pos
				    block.statements.append(t)
				}

			case lex.TokenFor:
				pos := this.parser.mkPos()
				statement, err := this.StatementForParser.parseFor()
				if err != null {
					this.consume(untilRc)
					this.Next(lfNotToken)
					continue
				}
				statement.block.isForBlock = true
				{
				    t := new ast.Statement()
				    t.Type = ast.StatementTypeFor
				    t.StatementFor = statement
				    t.pos = pos
                    block.statements.append(t)
				}
			case lex.TokenAbstract:
				this.parser.Next(lfIsToken)
				this.parser.unExpectNewLineAndSkip()
				if err := this.parser.validAfterAbstract(); err == null {
					isAbstract = true
				}
			case lex.TokenSwitch:
				pos := this.parser.mkPos()
				statement, err := this.StatementSwitchParser.parseSwitch()
				if err != null {
					this.consume(untilRc)
					this.Next(lfNotToken)
					continue
				}
				{
				    t := new ast.Statement()
				    t.Type =  ast.StatementTypeSwitch
				    t.StatementSwitch =  statement
				    t.pos = pos
				    block.statements.append(t)
				}
			case lex.TokenWhen:
				pos := this.parser.mkPos()
				statement, err := this.StatementWhenParser.parseWhen()
				if err != null {
					this.consume(untilRc)
					this.Next(lfNotToken)
					continue
				}
				{
				    t := new ast.Statement()
				    t.Type = ast.StatementTypeWhen
				    t.StatementWhen = statement
				    t.pos = pos
                    block.statements.append(t)
				}
			case lex.TokenConst:
				pos := this.parser.mkPos()
				this.Next(lfIsToken)
				cs, err := this.parser.parseConst()
				if err != null {
					this.consume(untilSemicolonOrLf)
					this.Next(lfNotToken)
					continue
				}
				statement := new ast.Statement()
				statement.Type = ast.StatementTypeExpression
				statement.pos = pos
				{
				    t := new ast.Expression()
				    t.Type = ast.ExpressionTypeConst
				    t.data = cs
				    t.pos = pos
				    t.op = "const"
				    statement.Expression = t
				}
				block.statements.append(statement)
				this.parser.validStatementEnding()
				if this.parser.token.Type == lex.TokenSemicolon {
					this.Next(lfNotToken)
				}
			case lex.TokenReturn:
				if isGlobal {
					this.parser.errs.append(
						new error(sprintf("%s 'return' cannot used in packge init block",
							this.parser.errMsgPrefix())))
				}
				st := new ast.StatementReturn()
				st.pos = this.parser.mkPos()
				this.Next(lfIsToken)
				{
				    t := new ast.Statement()
				    t.Type = ast.StatementTypeReturn
				    t.StatementReturn = st
				    t.pos = st.pos
				    block.statements.append(t)
				}
				if this.parser.token.Type == lex.TokenRc {
					continue
				}
				if this.parser.token.Type == lex.TokenRc ||
					this.parser.token.Type == lex.TokenSemicolon ||
					this.parser.token.Type == lex.TokenLf ||
					this.parser.token.Type == lex.TokenComma ||
					this.parser.token.Type == lex.TokenMultiLineComment {
					this.Next(lfNotToken)
					continue
				}
				var es []ast.Expression
				es, err = this.parser.ExpressionParser.parseExpressions(lex.TokenSemicolon)
				if err != null {
					this.consume(untilSemicolonOrLf)
					this.Next(lfNotToken)
					continue
				}
				st.Expressions = es
				this.parser.validStatementEnding()
				this.Next(lfNotToken)
			case lex.TokenLc:
				pos := this.parser.mkPos()
				newBlock := new ast.Block()
				this.Next(lfNotToken) // skip {
				this.parseStatementList(newBlock, false)
				this.parser.ifTokenIsLfThenSkip()
				if this.parser.token.Type != lex.TokenRc {
					this.parser.errs.append( new error(sprintf("%s expect '}', but '%s'",
						this.parser.errMsgPrefix(), this.parser.token.Description)))
					this.consume(untilRc)
				}
				this.Next(lfNotToken)
				if isDefer {
					d := new ast.StatementDefer()
					d.block = newBlock
					d.pos = deferPos
					{
					    t := new ast.Statement()
					    t.Type = ast.StatementTypeDefer
					    t.Defer = d
					    t.pos = pos
					    block.statements.append(t)
					}

				} else {
					t := new ast.Statement()
					t.Type = ast.StatementTypeBlock
					t.block = newBlock
					t.pos = pos
					block.statements.append(t)
				}
				resetPrefix()
			case lex.TokenPass:
				if isGlobal == false {
					this.parser.errs.append(
						new error(sprintf("%s 'pass' can only be used in package init block",
							this.parser.errMsgPrefix())))
				}
				pos := this.parser.mkPos()
				this.Next(lfIsToken)
				this.parser.validStatementEnding()
				{
				    t := new ast.Statement()
				    t.Type = ast.StatementTypeReturn
				    t.pos = pos
				    t.Type = ast.StatementTypeReturn
				    t.StatementReturn = new ast.StatementReturn()
				    t.StatementReturn.pos = pos
				    block.statements.append(t)
				}
			case lex.TokenContinue:
				pos := this.parser.mkPos()
				this.Next(lfIsToken)
				this.parser.validStatementEnding()
				{
				    t := new ast.Statement()
				    t.Type = ast.StatementTypeContinue
				    t.pos = pos
				    t.StatementContinue = new ast.StatementContinue()
				    t.StatementContinue.pos = pos
				    block.statements.append(t)
				}
			case lex.TokenBreak:
				pos := this.parser.mkPos()
				this.Next(lfIsToken)
				this.parser.validStatementEnding()
				{
				    t := new ast.Statement()
				    t.Type = ast.StatementTypeBreak
				    t.pos = pos
				    t.StatementBreak = new ast.StatementBreak()
				    t.StatementBreak.pos = pos
				}
			case lex.TokenGoto:
				pos := this.parser.mkPos()
				this.Next(lfIsToken) // skip goto key word
				if this.parser.token.Type != lex.TokenIdentifier {
					this.parser.errs.append(
						new error(sprintf("%s  missing identifier after goto statement, but '%s'",
							this.parser.errMsgPrefix(), this.parser.token.Description)))
					this.consume(untilSemicolonOrLf)
					this.Next(lfNotToken)
					continue
				}
				statementGoto := new ast.StatementGoTo()
				statementGoto.pos = pos
				statementGoto.LabelName = this.parser.token.stringValue
				{
				    t := new ast.Statement()
				    t.Type = ast.StatementTypeGoTo
				    t.pos = pos
				    t.StatementGoTo = statementGoto
				    block.statements.append(t)
				}
				this.Next(lfIsToken)
				this.parser.validStatementEnding()
				this.Next(lfNotToken)
			case lex.TokenTypeAlias:
				pos := this.parser.mkPos()
				alias, err := this.parser.parseTypeAlias(comment)
				if err != null {
					this.consume(untilSemicolonOrLf)
					this.Next(lfNotToken)
					continue
				}
				this.parser.validStatementEnding()
				statement := new ast.Statement()
				statement.pos = pos
				statement.Type = ast.StatementTypeTypeAlias
				statement.TypeAlias = alias
				block.statements.append(statement)
				this.Next(lfNotToken)
			case lex.TokenClass, lex.TokenInterface:
				pos := this.parser.mkPos()
				c, _ := this.parser.ClassParser.parse(isAbstract)
				if c != null {
					statement := new ast.Statement()
					statement.pos = pos
					if isFinal {
						c.accessFlags |= cg.AccClassFinal
						c.finalPos = finalPos
					}
					statement.Type = ast.StatementTypeClass
					statement.Class = c
					block.statements.append(statement)
				}

			case lex.TokenEnum:
				pos := this.parser.mkPos()
				e, _ := this.parser.EnumParser.parse()
				if e != null {
					s := new ast.Statement()
					s.pos = pos
					s.Type = ast.StatementTypeEnum
					s.Enum = e
					block.statements.append(s)
				}
			case lex.TokenImport:
				pos := this.parser.mkPos()
				ims := this.parser.parseImports()
				for _, t := range ims {
					s := new ast.Statement()
					s.Type = ast.StatementTypeImport
					s.Import = t
					s.pos = pos
					block.statements.append(s)
				}
			case lex.TokenElse, lex.TokenElseif:
				this.parser.errs.append(
					new error(sprintf("%s unexpected '%s'", this.parser.errMsgPrefix(), this.parser.token.Description)))
				this.Next(lfIsToken)

			default:
				// something I cannot handle
				return
			}
		}
		return
	}

	fn parseExpressionStatement(block ast.Block, isDefer bool, deferPos ast.Pos) -> (isLabel bool) {
		pos := this.parser.mkPos()
		e, err := this.parser.ExpressionParser.parseExpression(true)
		if err != null {
			this.consume(untilSemicolonOrLf)
			this.Next(lfNotToken)
			return
		}
		if e.Type == ast.ExpressionTypeIdentifier &&
			this.parser.token.Type == lex.TokenColon {
			//lable found , good...
			if isDefer {
				this.parser.errs.append(
					new error(sprintf("%s defer mixup with statement lable has no meaning",
						this.parser.errMsgPrefix())))
			}
			isLabel = true
			pos := this.parser.mkPos()
			this.Next(lfIsToken) // skip :
			if this.parser.token.Type != lex.TokenLf {
				this.parser.errs.append(
					new error(sprintf("%s expect new line",
						this.parser.errMsgPrefix())))
			}
			statement := new ast.Statement()
			statement.pos = pos
			statement.Type = ast.StatementTypeLabel
			label := new ast.StatementLabel()
			label.pos = pos
			label.CodeOffset = -1
			statement.StatementLabel = label
			label.Statement = statement
			label.name = e.data.(ast.ExpressionIdentifier).name
			block.statements.append(statement)
			label.block = block
			err = block.Insert(label.name, e.pos, label) // insert first,so this label can be found before it is checked
			if err != null {
				this.parser.errs.append( err)
			}
		} else {
			this.parser.validStatementEnding()
			if isDefer {
				d := new ast.StatementDefer()
				d.pos = deferPos
			    {
			        t := new ast.Statement()
			        t.Type = ast.StatementTypeExpression
			        t.Expression = e
			        t.pos = pos
			        d.block.statements = [t]
			    }
			    {
			        t := new ast.Statement()
			        t.Type = ast.StatementTypeDefer
			        t.Defer = d
			        block.statements.append(t)
			    }

			} else {
			    t := new ast.Statement()
			    t.Type = ast.StatementTypeExpression
			    t.Expression = e
			    t.pos = pos
			    block.statements.append(t)
			}
		}
		return
	}
}

