import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/lex"

class FunctionParser extends ParserExtends{

    fn FunctionParser(parser Parser){
        this.super()
        this.parser = parser
    }

	/*
		when canBeAbstract is true , means can have no body
	*/
	fn parse(needName bool, isAbstract bool) -> (f ast.Function, err error) {
		f = new ast.Function()
		offset := this.parser.token.offset
		this.Next(lfIsToken) // skip fn key word
		this.parser.unExpectNewLineAndSkip()
		if needName && this.parser.token.Type != lex.TokenIdentifier {
			err = new error(sprintf("%s expect function name,but '%s'",
				this.parser.errMsgPrefix(), this.parser.token.Description))
			this.parser.errs.append( err)
			this.consume(untilLp)
		}
		f.pos = this.parser.mkPos()
		if this.parser.token.Type == lex.TokenIdentifier {
			f.name = this.parser.token.stringValue
			this.Next(lfNotToken)
		}
		f.Type, err = this.parseFunctionType()
		if err != null {
			if isAbstract {
				this.consume(untilSemicolonOrLf)
			} else {
				this.consume(untilLc)
			}
		}
		if isAbstract {
			return f, null
		}
		this.parser.ifTokenIsLfThenSkip()
		if this.parser.token.Type != lex.TokenLc {
			err = new error(sprintf("%s except '{' but '%s'",
				this.parser.errMsgPrefix(), this.parser.token.Description))
			this.parser.errs.append( err)
			this.consume(untilLc)
		}
		f.block = new ast.Block()
		f.block.isFunctionBlock = true
		f.block.Fn = f
		this.Next(lfNotToken) // skip {
		this.parser.BlockParser.parseStatementList(f.block, false)
		if this.parser.token.Type != lex.TokenRc {
			err = new error(sprintf("%s expect '}', but '%s'",
				this.parser.errMsgPrefix(), this.parser.token.Description))
			this.parser.errs.append( err)
			this.consume(untilRc)
		} else {
			f.sourceCode =
				this.parser.
					bs[offset : this.parser.token.offset+1]
		}
		this.Next(lfIsToken)
		return f, err
	}



	//(a,b int)->(total int)
	fn parseFunctionType() -> (functionType ast.FunctionType, err error) {
		functionType = new ast.FunctionType()
		if this.parser.token.Type == lex.TokenLt {
			this.Next(lfNotToken)
			functionType.TemplateNames, err = this.parser.parseNameList()
			if err != null {
				this.consume(untilLp)
				goto skipTemplateNames
			}
			this.parser.errs.appendAll(functionType.checkTemplateNameDuplication())
			this.Next(lfIsToken)
		}
		this.parser.unExpectNewLineAndSkip()
	skipTemplateNames:
		if this.parser.token.Type != lex.TokenLp {
			err = new error(sprintf("%s fn declared wrong,missing '(',but '%s'",
				this.parser.errMsgPrefix()))
			this.parser.errs.append( err)
			return
		}
		this.Next(lfNotToken)               // skip (
		if this.parser.token.Type != lex.TokenRp { // not )
			functionType.ParameterList, err = this.parseParameterOrReturnList()
			if err != null {
				this.consume(untilRp)
				this.Next(lfNotToken)
			}
		}
		this.parser.ifTokenIsLfThenSkip()
		if this.parser.token.Type != lex.TokenRp { // not )
			err = new error(sprintf("%s fn declared wrong,missing ')',but '%s'",
				this.parser.errMsgPrefix()))
			this.parser.errs.append( err)
			return
		}
		this.Next(lfIsToken)                   // skip )
		if this.parser.token.Type == lex.TokenArrow { // ->  parse return list
			this.Next(lfNotToken) // skip ->
			if this.parser.token.Type != lex.TokenLp {
				err = new error(sprintf("%s fn declared wrong, not '(' after '->'",
					this.parser.errMsgPrefix()))
				this.parser.errs.append( err)
				return
			}
			this.Next(lfNotToken) // skip (
			if this.parser.token.Type != lex.TokenRp {
				functionType.ReturnList, err = this.parseParameterOrReturnList()
				if err != null { // skip until next (,continue to analyse
					this.consume(untilRp)
					this.Next(lfIsToken)
				}
			}
			this.parser.ifTokenIsLfThenSkip()
			if this.parser.token.Type != lex.TokenRp {
				err = new error(sprintf("%s fn declared wrong,expected ')',but '%s'",
					this.parser.errMsgPrefix()))
				this.parser.errs.append( err)
				return
			}
			this.Next(lfIsToken) // skip )
		} else {
			functionType.ReturnList = new []ast.Variable(1)
			functionType.ReturnList[0] = new ast.Variable()
			functionType.ReturnList[0].pos = this.parser.mkPos()
			functionType.ReturnList[0].Type = new ast.Type()
			functionType.ReturnList[0].Type.pos = this.parser.mkPos()
			functionType.ReturnList[0].Type.Type = ast.VariableTypeVoid
		}
		return functionType, err
	}

	/*
		parse default value
		a int = ""
		int = 1

	*/
	fn parseTypedNameDefaultValue() -> (returnList []ast.Variable, err error) {
		returnList, err = this.parser.parseTypedName()
		if this.parser.token.Type != lex.TokenAssign {
			return
		}
		this.Next(lfIsToken) // skip =
		for k, v := range returnList {
			var er error
			v.defaultValueExpression, er = this.parser.ExpressionParser.parseExpression(false)
			if er != null {
				this.consume(untilComma)
				err = er
				this.Next(lfNotToken)
				continue
			}
			if this.parser.token.Type != lex.TokenComma ||
				k == len(returnList)-1 {
				break
			} else {
				this.Next(lfNotToken) // skip ,
			}
		}
		return returnList, err
	}
	fn parseParameterOrReturnList() -> (returnList []ast.Variable = []ast.Variable{}, err error) {
		for this.parser.token.Type != lex.TokenRp {
			if this.parser.token.Type == lex.TokenComma {
				this.parser.errs.append( new error(sprintf("%s extra comma",
					this.parser.errMsgPrefix())))
				this.Next(lfNotToken)
				continue
			}
			var v []ast.Variable
			v, err = this.parseTypedNameDefaultValue()
			if v != null {
				returnList.appendAll(v)
			}
			if err != null {
				break
			}
			if this.parser.token.Type == lex.TokenComma {
				this.Next(lfNotToken)
			} else {
				break
			}
		}
		return
	}	
	 
}

