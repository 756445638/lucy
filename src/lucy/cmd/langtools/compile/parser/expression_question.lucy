import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/lex"

class ExpressionQuestionParser extends ParserExtends {
	
	ep ExpressionParser
	fn ExpressionQuestionParser(parser Parser , ep ExpressionParser){
		this.super()
		this.parser = parser
		this.ep = ep 
	}

	fn parseQuestionExpression() -> (e ast.Expression,err error) {
		left, err := this.ep.ExpressionBinaryParser.parseLogicalOrExpression()
		if err != null {
			return left, err
		}
		if this.parser.token.Type != lex.TokenQuestion {
			return left, null
		}
		pos := this.parser.mkPos()
		this.Next(lfNotToken) // skip ?
		True, err := this.ep.ExpressionBinaryParser.parseLogicalOrExpression()
		if err != null {
			return left, null
		}
		this.parser.unExpectNewLineAndSkip()
		if this.parser.token.Type != lex.TokenColon {
			err = new error(sprintf("%s expect ':' ,but '%s'",
				this.parser.errMsgPrefix(), this.parser.token.Description))
			this.parser.errs.append( err)
			return left, err
		}
		this.Next(lfNotToken) // skip :
		False, err :=  this.ep.ExpressionBinaryParser.parseLogicalOrExpression()
		if err != null {
			return left, null
		}
		newExpression := new ast.Expression()
		newExpression.op = "question"
		newExpression.pos = pos
		newExpression.Type = ast.ExpressionTypeQuestion
		question := new ast.ExpressionQuestion()
		question.Selection = left
		question.True = True
		question.False = False
		newExpression.data = question
		return newExpression, null
	}	

}

