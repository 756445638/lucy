import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/lex"

class StatementSwitchParser extends ParserExtends{
	bp BlockParser
	fn StatementSwitchParser(parser Parser ,bp BlockParser){
		this.super()
		this.parser = parser
		this.bp = bp
	}
	
	fn parseSwitch() -> (statementSwitch ast.StatementSwitch,err error) {
		statementSwitch = new ast.StatementSwitch()
		statementSwitch.pos = this.parser.mkPos()
		this.Next(lfIsToken) // skip switch key word
		this.parser.unExpectNewLineAndSkip()
		statementSwitch.EndPos = this.parser.mkPos()
		statementSwitch.Condition, err = this.parser.ExpressionParser.parseExpression(false)
		if err != null {
			this.consume(untilLc)
		}
		this.parser.ifTokenIsLfThenSkip()
		for this.parser.token.Type == lex.TokenSemicolon {
			if statementSwitch.Condition != null {
				statementSwitch.PrefixExpressions.append(statementSwitch.Condition)
				statementSwitch.Condition = null
			}
			this.parser.Next(lfNotToken)
			statementSwitch.Condition, err = this.parser.ExpressionParser.parseExpression(false)
			if err != null {
				this.consume(untilLc)
			}
			this.parser.ifTokenIsLfThenSkip()
		}
		if this.parser.token.Type != lex.TokenLc {
			err = new error(sprintf("%s expect '{',but '%s'",
				this.parser.errMsgPrefix(), this.parser.token.Description))
			this.parser.errs.append( err)
			this.consume(untilLc)
		}
		this.Next(lfIsToken) // skip {  , must be case
		this.parser.expectNewLineAndSkip()
		if this.parser.token.Type != lex.TokenCase {
			err = new error(sprintf("%s expect 'case',but '%s'",
				this.parser.errMsgPrefix(), this.parser.token.Description))
			this.parser.errs.append( err)
			return null, err
		}
		for this.parser.token.Type == lex.TokenCase {
			this.Next(lfIsToken) // skip case
			this.parser.unExpectNewLineAndSkip()
			es, err := this.parser.ExpressionParser.parseExpressions(lex.TokenColon)
			if err != null {
				return statementSwitch, err
			}
			if this.parser.token.Type != lex.TokenColon {
				err = new error(sprintf("%s expect ':',but '%s'",
					this.parser.errMsgPrefix(), this.parser.token.Description))
				this.parser.errs.append( err)
				return statementSwitch, err
			}
			this.Next(lfIsToken) // skip :
			this.parser.expectNewLineAndSkip()
			var block ast.Block
			if this.parser.token.Type != lex.TokenCase &&
				this.parser.token.Type != lex.TokenDefault &&
				this.parser.token.Type != lex.TokenRc {
				block = new ast.Block()
				block.isSwitchBlock = true
				this.bp.parseStatementList(block, false)
			}
			t := new ast.StatementSwitchCase()
			t.Matches = es
			t.block = block
			if statementSwitch.StatementSwitchCases == null {
                statementSwitch.StatementSwitchCases = [t]
			}else {
			    statementSwitch.StatementSwitchCases.append(t)
			}
		}
		//default value
		if this.parser.token.Type == lex.TokenDefault {
			this.Next(lfIsToken) // skip default key word
			this.parser.unExpectNewLineAndSkip()
			if this.parser.token.Type != lex.TokenColon {
				err = new error(sprintf("%s missing colon after 'default'",
					this.parser.errMsgPrefix()))
				this.parser.errs.append( err)
			} else {
				this.Next(lfIsToken)
			}
			this.parser.expectNewLineAndSkip()
			block := new ast.Block()
			block.isSwitchBlock = true
			statementSwitch.Default = block
			if this.parser.token.Type != lex.TokenRc {
				this.bp.parseStatementList(block, false)
				statementSwitch.Default = block
			}
		}
		if this.parser.token.Type != lex.TokenRc {
			err = new error(sprintf("%s expect '}',but '%s'",
				this.parser.errMsgPrefix(), this.parser.token.Description))
			this.parser.errs.append( err)
			return statementSwitch, err
		}
		statementSwitch.EndPos = this.parser.mkPos()
		this.Next(lfNotToken) //  skip }
		return statementSwitch, null
	}

} 

