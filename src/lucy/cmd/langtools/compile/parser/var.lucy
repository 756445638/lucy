 import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/lex"


const	lfIsToken  = true
const	lfNotToken = false


{
	ast.ParseFunctionHandler = ParseFunction
}


var	untilLp = {
		lex.TokenLp-> true
	}
var	untilRp = {
		lex.TokenRp-> true
	}
var	untilGt = {
		lex.TokenGt-> true
	}
var	untilLc = {
		lex.TokenLc-> true
	}
var	untilRc = {
		lex.TokenRc-> true
	}
var	untilComma = {
		lex.TokenComma-> true,
	}
var	untilSemicolonOrLf = {
		lex.TokenSemicolon-> true,
		lex.TokenLf->        true
	}
 

fn ParseFunction(bs []byte, pos ast.Pos) -> (f ast.Function,es []error) {
	parser := new Parser(bs , null ,pos.filename , false , 10 )
	parser.lexer = lex.New(bs, pos.line, pos.column , -1 , -1 , -1 )
	parser.next(lfNotToken) // read fn
	f, err := parser.FunctionParser.parse(true, false,false)
	if err != null {
		parser.errs.append(err)
	}
	return f, parser.errs
}

var    autoNameIndex = 1

fn compileAutoName() -> (name string) {
	name = sprintf("autoName$%d", autoNameIndex)
	autoNameIndex++
}
