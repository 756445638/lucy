import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/lex"


class StatementWhenParser extends ParserExtends {
	
	bp BlockParser
	fn StatementWhenParser(parser Parser ,bp BlockParser){
		this.super()
		this.parser = parser
		this.bp = bp
	}
	
	fn parseWhen() -> (whenStatement ast.StatementWhen , err error) {
		whenStatement = new ast.StatementWhen()
		whenStatement.pos = this.parser.mkPos()
		this.parser.next(lfIsToken)
		this.parser.unExpectNewLineAndSkip()
		var condition ast.Type
		var typeExpression ast.Expression
		if this.parser.token.Type == lex.TokenIdentifier {
			idenfierToken := this.parser.token
			this.parser.next(lfIsToken) 
			thisToken := this.parser.token
			this.parser.tokenStack = [ idenfierToken , thisToken ]  // store on stack
			this.parser.next(lfIsToken)  // restore idenfierToken token
			if thisToken.Type == lex.TokenLc {
				condition , err = this.parser.parseType()
				if err != null {
					this.parser.errs.append(err)
					this.consume(untilLc)
				}
			}else {
				typeExpression, err = this.parser.ExpressionParser.parseExpression(false)
				if err != null {
					this.parser.errs.append(err)
					this.consume(untilLc)
				}
			}
		}else {
			typeExpression, err = this.parser.ExpressionParser.parseExpression(false)
			if err != null {
				this.parser.errs.append(err)
				this.consume(untilLc)
			}
		}
		whenStatement.condition = condition
		whenStatement.typeExpression = typeExpression
		this.parser.ifTokenIsLfThenSkip(true)
		if this.parser.token.Type != lex.TokenLc {
			err = new error(sprintf("%s expect '{',but '%s'",
				this.parser.errMsgPrefix(), this.parser.token.description))
			this.parser.errs.append( err)
			this.consume(untilLc)
		}
		this.next(lfIsToken) // skip {  , must be case
		if this.parser.token.Type == lex.TokenComment {
			whenStatement.inlineComment = this.parser.token.stringValue 
			this.next(lfNotToken)
		}else if this.parser.token.Type == lex.TokenLf {
			this.next(lfNotToken)
		}
		if this.parser.token.Type != lex.TokenCase {
			err = new error(sprintf("%s expect 'case',but '%s'",
				this.parser.errMsgPrefix(), this.parser.token.description))
			this.parser.errs.append(err)
		}
		for this.parser.token.Type == lex.TokenCase {
			this.next(lfIsToken) // skip case
			this.parser.unExpectNewLineAndSkip()
			var ts []ast.Type
			ts, err = this.parser.parseTypes(lex.TokenColon)
			if err != null {
				this.parser.errs.append( err)
				return whenStatement, err
			}
			this.parser.unExpectNewLineAndSkip()
			if this.parser.token.Type != lex.TokenColon {
				err = new error(sprintf("%s expect ':',but '%s'",
					this.parser.errMsgPrefix(), this.parser.token.description))
				this.parser.errs.append( err)
				t := new ast.StatementWhenCase()
				t.matches = ts 
				if whenStatement.cases == null{
					whenStatement.cases = [t]
				}else {
					whenStatement.cases.append(t)
				}
				continue
			}
			t := new ast.StatementWhenCase()
			this.next(lfIsToken) // skip :
			this.parser.expectNewLine()
			if this.parser.token.Type == lex.TokenComment {
				t.inlineComment = this.parser.token.stringValue 
				this.next(lfNotToken)
			}else if this.parser.token.Type == lex.TokenLf {
				this.next(lfNotToken)
			}
			var block ast.Block
			if this.parser.token.Type != lex.TokenCase &&
				this.parser.token.Type != lex.TokenDefault &&
				this.parser.token.Type != lex.TokenRc {
				block = new ast.Block()
				block.isSwitchBlock = true
				this.bp.parseStatementList(block, false)
			}
			t.matches = ts
			t.block = block
			if whenStatement.cases == null{
				whenStatement.cases = [t]
			}else {
				whenStatement.cases.append(t)
			}
			
		}
		//default value
		if this.parser.token.Type == lex.TokenDefault {
			this.next(lfIsToken) // skip default key word
			this.parser.unExpectNewLineAndSkip()
			if this.parser.token.Type != lex.TokenColon {
				err = new error(sprintf("%s missing colon after default",
					this.parser.errMsgPrefix()))
				this.parser.errs.append( err)
			} else {
				this.next(lfIsToken)
				if this.parser.token.Type == lex.TokenComment {
					whenStatement.elseInlineComment = this.parser.token.stringValue 
					this.next(lfNotToken)
				}else if this.parser.token.Type == lex.TokenLf {
					this.next(lfNotToken)
				}
			}
			if this.parser.token.Type != lex.TokenRc {
				block := new ast.Block()
				block.isSwitchBlock = true
				this.bp.parseStatementList(block, false)
				whenStatement.Default = block
			}
		}
		if this.parser.token.Type != lex.TokenRc {
			err = new error(sprintf("%s expect '}',but '%s'",
				this.parser.errMsgPrefix(), this.parser.token.description))
			this.parser.errs.append( err)
			return whenStatement, err
		}
		this.next(lfNotToken) //  skip }
	}


}
 
