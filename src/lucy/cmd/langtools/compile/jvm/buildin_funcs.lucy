// all rights reserved , check the LICENSE file

import "lucy/cmd/langtools/compile/ast"
import "lucy/jvm/cg"
import "lucy/cmd/langtools/compile/common" as common

class BuildinFunctionCall {
    eb                        BuildExpression
    BuildinFunctionAssert     BuildInFunctionAssert
    BuildinFunctionCatchPanic BuildInFunctionCatchPanic
    BuildinFunctionLen        BuildinFunctionLen
    BuildinFunctionPrint      BuildinFunctionPrint
    BuildinFunctionPrintf     BuildinFunctionPrintf
    BuildinFunctionSprintf    BuildinFunctionSprintf
    BuildinFunctionBlackHole  BuildinFunctionBlackHole
    
    fn BuildinFunctionCall(eb BuildExpression) {
        this.super()
        this.eb = eb
        this.BuildinFunctionAssert = new BuildInFunctionAssert(eb)
        this.BuildinFunctionCatchPanic = new BuildInFunctionCatchPanic(eb)
        this.BuildinFunctionLen = new BuildinFunctionLen(eb)
        this.BuildinFunctionPrint = new BuildinFunctionPrint(eb)
        this.BuildinFunctionPrintf = new BuildinFunctionPrintf(eb)
        this.BuildinFunctionSprintf = new BuildinFunctionSprintf(eb)
        this.BuildinFunctionAssert = new BuildInFunctionAssert(eb)
        this.BuildinFunctionBlackHole = new BuildinFunctionBlackHole(eb)
    }

    fn mkBuildInFunctionCall(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        call := e.data.(ast.ExpressionFunctionCall)
        if call.function.loadedFromCorePackage {
            maxStack = this.eb.buildExpressionCallArgs.buildCallArgs(c , code , call.args , call.vArgs , context , state)
            code.codes[code.codeLength] = cg.OP_invokestatic
            c.insertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(call.function.entrance.classHighLevel.name,
                    call.function.name,
                    call.function.entrance.descriptor) , code.codes[code.codeLength + 1 : code.codeLength + 3])
            code.codeLength += 3
            if e.isStatementExpression {
                if call.function.Type.voidReturn() == false {
                    if len(call.function.Type.returnList) > 1 {
                        code.codes[code.codeLength] = cg.OP_pop
                        code.codeLength++
                    } else {
                        if jvmSlotSize(e.value) == 1 {
                            code.codes[code.codeLength] = cg.OP_pop
                            code.codeLength++
                        } else {
                            code.codes[code.codeLength] = cg.OP_pop2
                            code.codeLength++
                        }

                    }

                }
            }
            return
        }
        switch call.function.name {
            case common.BuildInFunctionPrint:
                return this.BuildinFunctionPrint.mkBuildInPrint(c , code , e , context , state)
            case common.BuildInFunctionPanic:
                return this.BuildinFunctionCatchPanic.mkBuildInPanic(c , code , e , context , state)
            case common.BuildInFunctionCatch:
                return this.BuildinFunctionCatchPanic.mkBuildInCatch(c , code , e , context)

                // case common.BuildInFunctionMonitorEnter, common.BuildInFunctionMonitorExit:

            case common.BuildInFunctionPrintf:
                return this.BuildinFunctionPrintf.buildPrintf(c , code , e , context , state)
            case common.BuildInFunctionSprintf:
                return this.BuildinFunctionSprintf.buildSprintf(c , code , e , context , state)
            case common.BuildInFunctionLen:
                return this.BuildinFunctionLen.buildLen(c , code , e , context , state)
            case common.BuildInFunctionBlockHole:
                return this.BuildinFunctionBlackHole.mkBuildInBlackHole(c , code , e , context , state)
            case common.BuildInFunctionAssert:
                return this.BuildinFunctionAssert.build(c , code , e , context , state)
            default:
                panic("unknown  buildIn function:" + call.function.name)
        }

        return
    }

}


