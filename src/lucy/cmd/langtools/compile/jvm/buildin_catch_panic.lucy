package jvm

import (
	"gitee.com/yuyang-fine/lucy/src/cmd/compile/ast"
	"gitee.com/yuyang-fine/lucy/src/cmd/compile/jvm/cg"
)

func (this *BuildExpression) mkBuildInPanic(
	class cg.ClassHighLevel,
	code cg.AttributeCode,
	e ast.Expression,
	context Context,
	state StackMapState) (
	maxStack char) {
	call := e.Data.(*ast.ExpressionFunctionCall)
	meta := call.BuildInFunctionMeta.(*ast.BuildInFunctionPanicMeta)
	if meta.ArgThrowable {
		if call.Args[0].Type == ast.ExpressionTypeNew { // not new expression
			maxStack = this.build(class, code, call.Args[0], context, state)
		} else {
			code.Codes[code.CodeLength] = cg.OP_new
			className := call.Args[0].Value.Class.Name
			class.InsertClassConst(className, code.Codes[code.CodeLength+1:code.CodeLength+3])
			code.Codes[code.CodeLength+3] = cg.OP_dup
			code.CodeLength += 4
			{
				verificationTypeInfo := &cg.StackMapVerificationTypeInfo{}
				uninitializedVariableInfo := &cg.StackMapUninitializedVariableInfo{}
				uninitializedVariableInfo.CodeOffset = char(code.CodeLength - 4)
				verificationTypeInfo.Verify = uninitializedVariableInfo
				state.Stacks = append(state.Stacks, verificationTypeInfo)
				state.Stacks = append(state.Stacks, verificationTypeInfo)
			}
			stack := this.build(class, code, call.Args[0], context, state)
			state.popStack(2)
			maxStack = 2 + stack
			code.Codes[code.CodeLength] = cg.OP_invokespecial
			class.InsertMethodRefConst(cg.ConstantInfoMethodrefHighLevel{
				Class:      className,
				Method:     specialMethodInit,
				Descriptor: "(Ljava/lang/Throwable;)V",
			}, code.Codes[code.CodeLength+1:code.CodeLength+3])
			code.CodeLength += 3
		}
	} else {
		code.Codes[code.CodeLength] = cg.OP_new
		class.InsertClassConst(javaExceptionClass, code.Codes[code.CodeLength+1:code.CodeLength+3])
		code.Codes[code.CodeLength+3] = cg.OP_dup
		code.CodeLength += 4
		{
			verificationTypeInfo := &cg.StackMapVerificationTypeInfo{}
			uninitializedVariableInfo := &cg.StackMapUninitializedVariableInfo{}
			uninitializedVariableInfo.CodeOffset = char(code.CodeLength - 4)
			verificationTypeInfo.Verify = uninitializedVariableInfo
			state.Stacks = append(state.Stacks, verificationTypeInfo)
			state.Stacks = append(state.Stacks, verificationTypeInfo)
		}
		stack := this.build(class, code, call.Args[0], context, state)
		state.popStack(2)
		if t := 2 + stack; t > maxStack {
			maxStack = t
		}
		if t := 2 + this.stackTop2String(class, code, call.Args[0].Value, context, state); t > maxStack {
			maxStack = t
		}
		code.Codes[code.CodeLength] = cg.OP_invokespecial
		class.InsertMethodRefConst(cg.ConstantInfoMethodrefHighLevel{
			Class:      javaExceptionClass,
			Method:     specialMethodInit,
			Descriptor: "(Ljava/lang/String;)V",
		}, code.Codes[code.CodeLength+1:code.CodeLength+3])
		code.CodeLength += 3
	}
	code.Codes[code.CodeLength] = cg.OP_athrow
	code.CodeLength++
	context.MakeStackMap(code, state, code.CodeLength)
	return
}

func (this *BuildExpression) mkBuildInCatch(class cg.ClassHighLevel, code cg.AttributeCode,
	e ast.Expression, context Context) (maxStack char) {
	if e.IsStatementExpression { // statement call
		maxStack = 1
		code.Codes[code.CodeLength] = cg.OP_aconst_null
		code.CodeLength++
		copyOPs(code,
			storeLocalVariableOps(ast.VariableTypeObject, context.exceptionVarOffset)...)
	} else {
		maxStack = 2
		//load to stack
		copyOPs(code, loadLocalVariableOps(ast.VariableTypeObject, context.exceptionVarOffset)...) // load
		//set 2 null
		code.Codes[code.CodeLength] = cg.OP_aconst_null
		code.CodeLength++
		copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject, context.exceptionVarOffset)...) // store
		//check cast
		code.Codes[code.CodeLength] = cg.OP_checkcast
		if context.Defer.ExceptionClass != nil {
			class.InsertClassConst(context.Defer.ExceptionClass.Name, code.Codes[code.CodeLength+1:code.CodeLength+3])
		} else {
			class.InsertClassConst(ast.DefaultExceptionClass, code.Codes[code.CodeLength+1:code.CodeLength+3])
		}
		code.CodeLength += 3
	}
	return
}
