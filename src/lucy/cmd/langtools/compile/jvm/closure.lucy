 


enum  ClosureKind(
	ClosureClassInt = 1 ,
	ClosureClassLong,
	ClosureClassFloat,
	ClosureClassDouble,
	ClosureClassString,
	ClosureClassObject,
)

class Closure   {
	ClosureObjectMetas map { ClosureKind -> ClosureObjectMeta } 
}

class ClosureObjectMeta {
	className        string
	fieldName        string
	fieldDescription string
	fn ClosureObjectMeta(className , fieldName , fieldDescription string){
		this.super()
		this.className = className
		this.fieldName = fieldName
		this.fieldDescription = fieldDescription
	}


	fn getMeta(t ast.VariableTypeKind) (meta *ClosureObjectMeta) {
		switch t {
		case ast.VariableTypeBool:
			fallthrough
		case ast.VariableTypeByte:
			fallthrough
		case ast.VariableTypeShort:
			fallthrough
		case ast.VariableTypeEnum:
			fallthrough
		case ast.VariableTypeChar:
			fallthrough
		case ast.VariableTypeInt:
			meta = this.ClosureObjectMetas[ClosureClassInt]
		case ast.VariableTypeLong:
			meta = this.ClosureObjectMetas[ClosureClassLong]
		case ast.VariableTypeFloat:
			meta = this.ClosureObjectMetas[ClosureClassFloat]
		case ast.VariableTypeDouble:
			meta = this.ClosureObjectMetas[ClosureClassDouble]
		case ast.VariableTypeString:
			meta = this.ClosureObjectMetas[ClosureClassString]
		case ast.VariableTypeObject:
			fallthrough
		case ast.VariableTypeArray: //[]int
			fallthrough
		case ast.VariableTypeJavaArray: // java array int[]
			fallthrough
		case ast.VariableTypeFunction:
			fallthrough
		case ast.VariableTypeMap:
			meta = this.ClosureObjectMetas[ClosureClassObject]
		}
		return
	}

	/*
		create a closure var, init and leave on stack
	*/
	fn createClosureVar(c cg.ClassHighLevel,
		code cg.AttributeCode, v ast.Type) (maxStack char) {
		maxStack = 2
		var meta *ClosureObjectMeta
		switch v.Type {
		case ast.VariableTypeBool:
			fallthrough
		case ast.VariableTypeByte:
			fallthrough
		case ast.VariableTypeShort:
			fallthrough
		case ast.VariableTypeEnum:
			fallthrough
		case ast.VariableTypeChar:
			fallthrough
		case ast.VariableTypeInt:
			meta = this.ClosureObjectMetas[ClosureClassInt]
		case ast.VariableTypeLong:
			meta = this.ClosureObjectMetas[ClosureClassLong]
		case ast.VariableTypeFloat:
			meta = this.ClosureObjectMetas[ClosureClassFloat]
		case ast.VariableTypeDouble:
			meta = this.ClosureObjectMetas[ClosureClassDouble]
		case ast.VariableTypeString:
			meta = this.ClosureObjectMetas[ClosureClassString]
		case ast.VariableTypeObject:
			fallthrough
		case ast.VariableTypeFunction:
			fallthrough
		case ast.VariableTypeArray: //[]int
			fallthrough
		case ast.VariableTypeJavaArray: // java array int[]
			fallthrough
		case ast.VariableTypeMap:
			meta = this.ClosureObjectMetas[ClosureClassObject]
		}
		code.Codes[code.CodeLength] = cg.OP_new
		ast.TypeInsertClassConst(meta.className, code.Codes[code.CodeLength+1:code.CodeLength+3])
		code.Codes[code.CodeLength+3] = cg.OP_dup
		code.CodeLength += 4
		code.Codes[code.CodeLength] = cg.OP_invokespecial
		ast.TypeInsertMethodRefConst(cg.ConstantInfoMethodrefHighLevel{
			Class:      meta.className,
			Method:     specialMethodInit,
			Descriptor: "()V",
		}, code.Codes[code.CodeLength+1:code.CodeLength+3])
		code.CodeLength += 3
		return
	}

	fn storeLocalClosureVar(c cg.ClassHighLevel, code cg.AttributeCode, v ast.Variable) {
		var meta *ClosureObjectMeta
		switch v.Type.Type {
		case ast.VariableTypeBool:
			fallthrough
		case ast.VariableTypeByte:
			fallthrough
		case ast.VariableTypeShort:
			fallthrough
		case ast.VariableTypeEnum:
			fallthrough
		case ast.VariableTypeChar:
			fallthrough
		case ast.VariableTypeInt:
			meta = this.ClosureObjectMetas[ClosureClassInt]
		case ast.VariableTypeLong:
			meta = this.ClosureObjectMetas[ClosureClassLong]
		case ast.VariableTypeFloat:
			meta = this.ClosureObjectMetas[ClosureClassFloat]
		case ast.VariableTypeDouble:
			meta = this.ClosureObjectMetas[ClosureClassDouble]
		case ast.VariableTypeString:
			meta = this.ClosureObjectMetas[ClosureClassString]
		case ast.VariableTypeObject:
			fallthrough
		case ast.VariableTypeFunction:
			fallthrough
		case ast.VariableTypeMap:
			fallthrough
		case ast.VariableTypeArray:
			fallthrough
		case ast.VariableTypeJavaArray:
			meta = this.ClosureObjectMetas[ClosureClassObject]
		}
		code.Codes[code.CodeLength] = cg.OP_putfield
		ast.TypeInsertFieldRefConst(cg.ConstantInfoFieldrefHighLevel{
			Class:      meta.className,
			Field:      meta.fieldName,
			Descriptor: meta.fieldDescription,
		}, code.Codes[code.CodeLength+1:code.CodeLength+3])
		code.CodeLength += 3
	}

	/*
		create a closure var on stack
	*/
	fn loadLocalClosureVar(c cg.ClassHighLevel, code cg.AttributeCode,
		v ast.Variable) (maxStack char) {
		copyOPs(code, loadLocalVariableOps(ast.VariableTypeObject, v.LocalValOffset)...)
		this.unPack(class, code, v.Type)
		maxStack = jvmSlotSize(v.Type)
		return
	}

	/*
		closure object is on stack
	*/
	fn unPack(c cg.ClassHighLevel, code cg.AttributeCode, v ast.Type) {
		var meta *ClosureObjectMeta
		switch v.Type {
		case ast.VariableTypeBool:
			fallthrough
		case ast.VariableTypeByte:
			fallthrough
		case ast.VariableTypeShort:
			fallthrough
		case ast.VariableTypeEnum:
			fallthrough
		case ast.VariableTypeChar:
			fallthrough
		case ast.VariableTypeInt:
			meta = this.ClosureObjectMetas[ClosureClassInt]
		case ast.VariableTypeLong:
			meta = this.ClosureObjectMetas[ClosureClassLong]
		case ast.VariableTypeFloat:
			meta = this.ClosureObjectMetas[ClosureClassFloat]
		case ast.VariableTypeDouble:
			meta = this.ClosureObjectMetas[ClosureClassDouble]
		case ast.VariableTypeString:
			meta = this.ClosureObjectMetas[ClosureClassString]
		case ast.VariableTypeFunction:
			fallthrough
		case ast.VariableTypeMap:
			fallthrough
		case ast.VariableTypeObject:
			fallthrough
		case ast.VariableTypeArray:
			fallthrough
		case ast.VariableTypeJavaArray:
			meta = this.ClosureObjectMetas[ClosureClassObject]
		}
		code.Codes[code.CodeLength] = cg.OP_getfield
		ast.TypeInsertFieldRefConst(cg.ConstantInfoFieldrefHighLevel{
			Class:      meta.className,
			Field:      meta.fieldName,
			Descriptor: meta.fieldDescription,
		}, code.Codes[code.CodeLength+1:code.CodeLength+3])
		code.CodeLength += 3
		if v.IsPointer() && v.Type != ast.VariableTypeString {
			typeConverter.castPointer(class, code, v)
		}
	}
	
}




{
	closure.ClosureObjectMetas = new map { ClosureKind -> ClosureObjectMeta } ()
	closure.ClosureObjectMetas[ClosureClassInt] = new ClosureObjectMeta(
		"lucy/deps/ClosureInt",
		"value",
		"I"
	)
	closure.ClosureObjectMetas[ClosureClassLong] = new ClosureObjectMeta(
		"lucy/deps/ClosureLong",
		"value",
		"J"
	)
	closure.ClosureObjectMetas[ClosureClassFloat] = new ClosureObjectMeta(
		"lucy/deps/ClosureFloat",
		"value",
		"F"
	)
	closure.ClosureObjectMetas[ClosureClassDouble] = new ClosureObjectMeta(
		"lucy/deps/ClosureDouble",
		"value",
		"D"
	)
	closure.ClosureObjectMetas[ClosureClassString] = new ClosureObjectMeta(
		"lucy/deps/ClosureString",
		"value",
		"Ljava/lang/String;"
	)
	closure.ClosureObjectMetas[ClosureClassObject] = new ClosureObjectMeta(
		"lucy/deps/ClosureObject",
		"value",
		"Ljava/lang/Object;"
	)
}

