 import "lucy/binary"

public class AttributeLucyClassConst {
	public constants []LucyClassConst

	public fn FromBs(c Class, bs []byte) {
	    this.constants = []LucyClassConst{}
		for len(bs) > 0 {
			constant := new LucyClassConst()
			constant.name = string(c.ConstPool[binary.BigEndian.getChar(bs)].Info)
			constant.descriptor = string(c.ConstPool[binary.BigEndian.getChar(bs[2:])].Info)
			constant.ValueIndex = binary.BigEndian.getChar(bs[4:])
			constant.comment = string(c.ConstPool[binary.BigEndian.getChar(bs[6:])].Info)
			bs = bs[8:]
			this.constants.append(constant)
		}
	}

	fn ToAttributeInfo(c Class) -> (ret AttributeInfo)   {
		if this == null || len(this.constants) == 0 {
			return null
		}
		ret = new AttributeInfo()
		ret.nameIndex = c.InsertUtf8Const(AttributeNameLucyClassConst)
		ret.Info = new []byte(len(this.constants)*8)
		for k, v := range this.constants {
			b := ret.Info[k*8:]
			binary.BigEndian.putChar(b, c.InsertUtf8Const(v.name))
			binary.BigEndian.putChar(b[2:], c.InsertUtf8Const(v.descriptor))
			binary.BigEndian.putChar(b[4:], v.ValueIndex)
			binary.BigEndian.putChar(b[6:], c.InsertUtf8Const(v.comment))
		}
		ret.attributeLength = (len(ret.Info))
		return ret
	}	
}

public class LucyClassConst {
	public name       string
	public descriptor string
	public ValueIndex char
	public comment    string
}


