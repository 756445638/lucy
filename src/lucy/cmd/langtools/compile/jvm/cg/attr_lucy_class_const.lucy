package cg

import "encoding/binary"

class AttributeLucyClassConst {
	Constants []LucyClassConst

	fn FromBs(class Class, bs []byte) {
		for len(bs) > 0 {
			constant := &LucyClassConst{}
			constant.Name = string(class.ConstPool[binary.BigEndian.Uint16(bs)].Info)
			constant.Descriptor = string(class.ConstPool[binary.BigEndian.Uint16(bs[2:])].Info)
			constant.ValueIndex = binary.BigEndian.Uint16(bs[4:])
			constant.Comment = string(class.ConstPool[binary.BigEndian.Uint16(bs[6:])].Info)
			bs = bs[8:]
			this.Constants = append(this.Constants, constant)
		}
	}

	fn ToAttributeInfo(class Class) -> (ret AttributeInfo)   {
		if this == nil || len(this.Constants) == 0 {
			return nil
		}
		ret := &AttributeInfo{}
		ret.NameIndex = class.InsertUtf8Const(AttributeNameLucyClassConst)
		ret.Info = make([]byte, len(this.Constants)*8)
		for k, v := range this.Constants {
			b := ret.Info[k*8:]
			binary.BigEndian.PutUint16(b, class.InsertUtf8Const(v.Name))
			binary.BigEndian.PutUint16(b[2:], class.InsertUtf8Const(v.Descriptor))
			binary.BigEndian.PutUint16(b[4:], v.ValueIndex)
			binary.BigEndian.PutUint16(b[6:], class.InsertUtf8Const(v.Comment))
		}
		ret.attributeLength = uint32(len(ret.Info))
		return ret
	}	
}

class LucyClassConst {
	Name       string
	Descriptor string
	ValueIndex uint16
	Comment    string
}


