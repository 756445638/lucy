 import "lucy/binary"

public class AttributeLucyClassConst {
	public Constants []LucyClassConst

	fn FromBs(c Class, bs []byte) {
	    this.Constants = []LucyClassConst{}
		for len(bs) > 0 {
			constant := new LucyClassConst()
			constant.Name = string(c.ConstPool[binary.BigEndian.getChar(bs)].Info)
			constant.Descriptor = string(c.ConstPool[binary.BigEndian.getChar(bs[2:])].Info)
			constant.ValueIndex = binary.BigEndian.getChar(bs[4:])
			constant.Comment = string(c.ConstPool[binary.BigEndian.getChar(bs[6:])].Info)
			bs = bs[8:]
			this.Constants.append(constant)
		}
	}

	fn ToAttributeInfo(c Class) -> (ret AttributeInfo)   {
		if this == null || len(this.Constants) == 0 {
			return null
		}
		ret = new AttributeInfo()
		ret.NameIndex = c.InsertUtf8Const(AttributeNameLucyClassConst)
		ret.Info = new []byte(len(this.Constants)*8)
		for k, v := range this.Constants {
			b := ret.Info[k*8:]
			binary.BigEndian.putChar(b, c.InsertUtf8Const(v.Name))
			binary.BigEndian.putChar(b[2:], c.InsertUtf8Const(v.Descriptor))
			binary.BigEndian.putChar(b[4:], v.ValueIndex)
			binary.BigEndian.putChar(b[6:], c.InsertUtf8Const(v.Comment))
		}
		ret.attributeLength = (len(ret.Info))
		return ret
	}	
}

class LucyClassConst {
	Name       string
	Descriptor string
	ValueIndex char
	Comment    string
}


