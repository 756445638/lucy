import "lucy/binary"
import "java/lang/Float"
import "java/lang/Double"
 
public const	ConstantPoolTagUtf8               byte = 1
public const	ConstantPoolTagInteger            byte = 3
public const	ConstantPoolTagFloat              byte = 4
public const	ConstantPoolTagLong               byte = 5
public const	ConstantPoolTagDouble             byte = 6
public const	ConstantPoolTagClass              byte = 7
public const	ConstantPoolTagString             byte = 8
public const	ConstantPoolTagFieldref           byte = 9
public const	ConstantPoolTagMethodref          byte = 10
public const	ConstantPoolTagInterfaceMethodref byte = 11
public const	ConstantPoolTagNameAndType        byte = 12
public const	ConstantPoolTagMethodHandle       byte = 15
public const	ConstantPoolTagMethodType         byte = 16
public const	ConstantPoolTagInvokeDynamic      byte = 18
 

class ConstPool  {
	selfIndex char // using when it`s self
	Tag       byte
	Info      []byte
}

class ConstantInfoClass  {
	nameIndex char
	fn ConstantInfoClass(nameIndex char){
	    this.super()
	    this.nameIndex = nameIndex
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagClass
		p.Info = new []byte(2)
		binary.BigEndian.putChar(p.Info, this.nameIndex)
		return p
	}
}



class ConstantInfoString {
	index char
	fn ConstantInfoString(index char) {
	    this.super()
	    this.index = index
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagString
		p.Info = new []byte(2)
		binary.BigEndian.putChar(p.Info, this.index)
		return p
	}
}



class ConstantInfoInteger  {
	value int
	fn ConstantInfoInteger(value int) {
	    this.super()
	    this.value = value
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagInteger
		p.Info = new []byte(4)
		binary.BigEndian.putInt(p.Info, (this.value))
		return p
	}
}



class ConstantInfoFloat  {
	value float
	fn ConstantInfoFloat(value float){
	    this.super()
        this.value = value
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagFloat
		p.Info = new []byte(4)
		binary.BigEndian.putInt(p.Info, Float.floatToIntBits(this.value))
		return p
	}
}



class ConstantInfoLong  {
	value long
	fn ConstantInfoLong(value long) {
	    this.super()
	    this.value = value
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagLong
		p.Info = new []byte(8)
		binary.BigEndian.putLong(p.Info, (this.value))
		return p
	}	
}

 

class ConstantInfoDouble {
	value double
	fn ConstantInfoDouble(value double){
	    this.super()
	    this.value = value
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagDouble
		p.Info = new []byte(8)
		binary.BigEndian.putLong(p.Info, Double.doubleToLongBits(this.value))
		return p
	}
}



class ConstantInfoNameAndType {
	nameIndex, descriptorIndex char
    fn ConstantInfoNameAndType(nameIndex, descriptorIndex char) {
        this.super()
        this.nameIndex = nameIndex
        this.descriptorIndex = descriptorIndex
    }
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagNameAndType
		p.Info = new []byte(4)
		binary.BigEndian.putChar(p.Info, this.nameIndex)
		binary.BigEndian.putChar(p.Info[2:], this.descriptorIndex)
		return p
	}
}



class ConstantInfoMethodref {
	classIndex, nameAndTypeIndex char
	fn ConstantInfoMethodref(classIndex, nameAndTypeIndex char){
        this.super()
        this.classIndex = classIndex
        this.nameAndTypeIndex = nameAndTypeIndex
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagMethodref
		p.Info = new []byte(4)
		binary.BigEndian.putChar(p.Info, this.classIndex)
		binary.BigEndian.putChar(p.Info[2:], this.nameAndTypeIndex)
		return p
	}
}



class ConstantInfoInterfaceMethodref  {
	classIndex       char
	nameAndTypeIndex char
	fn ConstantInfoInterfaceMethodref(classIndex , nameAndTypeIndex char) {
        this.super()
        this.classIndex = classIndex
        this.nameAndTypeIndex = nameAndTypeIndex
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagInterfaceMethodref
		p.Info = new []byte(4)
		binary.BigEndian.putChar(p.Info, char(this.classIndex))
		binary.BigEndian.putChar(p.Info[2:], char(this.nameAndTypeIndex))
		return p
	}
}



class ConstantInfoFieldref  {
	classIndex       char
	nameAndTypeIndex char
	fn ConstantInfoFieldref(classIndex , nameAndTypeIndex char){
	    this.super()
        this.classIndex = classIndex
        this.nameAndTypeIndex = nameAndTypeIndex
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagFieldref
		p.Info = new []byte(4)
		binary.BigEndian.putChar(p.Info, this.classIndex)
		binary.BigEndian.putChar(p.Info[2:], this.nameAndTypeIndex)
		return p
	}
}



class ConstantInfoMethodHandle  {
	referenceKind  byte
	referenceIndex char
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagMethodHandle
		p.Info = new []byte(3)
		p.Info[0] = byte(this.referenceKind)
		binary.BigEndian.putChar(p.Info[1:], char(this.referenceIndex))
		return p
	}	
}



class ConstantInfoUtf8  {
	length char
	bs     []byte
	fn ConstantInfoUtf8(s string){
	    this.super()
        this.bs = []byte(s)
        this.length = char(this.bs.size())
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagUtf8
		p.Info = new []byte(2)
		binary.BigEndian.putChar(p.Info, char(this.length))
		p.Info . appendAll(this.bs)
		return p
	}
}



class ConstantInfoMethodType  {
	descriptorIndex char
	fn ConstantInfoMethodType(index char){ 
		this.super()
		this.descriptorIndex = index
	}
	fn ToConstPool() -> (p ConstPool) {
		p = new ConstPool()
		p.Tag = ConstantPoolTagMethodType
		p.Info = new []byte(2)
		binary.BigEndian.putChar(p.Info, char(this.descriptorIndex))
		return p
	}
}



/*
type ConstantInfoInvokeDynamic  {
	bootstrapMethodAttrIndex char
	nameAndTypeIndex         char
}

func (this *ConstantInfoInvokeDynamic) ToConstPool() *ConstPool {
	info := &ConstPool{}
	info.Tag = ConstantPoolTagInvokeDynamic
	info.Info = new []byte(4)
	binary.BigEndian.putChar(info.Info, this.bootstrapMethodAttrIndex)
	binary.BigEndian.putChar(info.Info[2:], this.nameAndTypeIndex)
	return info
}
*/