import "lucy/binary"


public class InnerClass {
	public innerClass  string
	public outerClass  string
	public name        string
	public accessFlags char
	
	fn fromBs(c Class, bs []byte) {
    		nameIndex := binary.BigEndian.getChar(c.ConstPool[binary.BigEndian.getChar(bs)].info)
    		this.innerClass = string(c.ConstPool[nameIndex].info)
    		if 0 == binary.BigEndian.getChar(bs[2:]) {
    			//TODO:: what zero means???
    		} else {
    			nameIndex = binary.BigEndian.getChar(c.ConstPool[binary.BigEndian.getChar(bs[2:])].info)
    			this.outerClass = string(c.ConstPool[nameIndex].info)
    		}
    		if 0 == binary.BigEndian.getChar(bs[4:]) {
    			//TODO:: what zero means???
    		} else {
    			this.name = string(c.ConstPool[binary.BigEndian.getChar(bs[4:])].info)
    		}
    		this.accessFlags = binary.BigEndian.getChar(bs[6:])
    }
}


public class AttributeInnerClasses {
	public classes []InnerClass
	public fn fromBs(c Class, bs []byte) {
		length := binary.BigEndian.getChar(bs)
		bs = bs[2:]
		if int(length*8) != len(bs) {
			panic("length not match")
		}
		this.classes = []InnerClass{}
		for len(bs) > 0 {
			inner := new InnerClass()
			inner.fromBs(c, bs[:8])
			this.classes.append( inner)
			bs = bs[8:]
		}
	}

	fn toAttributeInfo(c Class) -> (ret AttributeInfo) {
		if this == null || len(this.classes) == 0 {
			return null
		}
		ret = new AttributeInfo()
		ret.nameIndex = c.insertUtf8Const(AttributeNameInnerClasses)
		ret.info = new []byte(2)
		binary.BigEndian.putChar(ret.info, char(len(this.classes)))
		for _, v := range this.classes {
			bs8 := new []byte(8)
			binary.BigEndian.putChar(bs8, c.insertClassConst(v.innerClass))
			binary.BigEndian.putChar(bs8[2:], c.insertClassConst(v.outerClass))
			binary.BigEndian.putChar(bs8[4:], c.insertUtf8Const(v.name))
			binary.BigEndian.putChar(bs8[6:], v.accessFlags)
			ret.info.appendAll(bs8)
		}
		ret.attributeLength = (len(ret.info))
		return ret
	}

}












