

class MultiValueAutoVar {
	localVarOffset char
	fn MultiValueAutoVar(c cg.ClassHighLevel, code cg.AttributeCode, state StackMapState){
        this.localVarOffset = code.MaxLocals
        code.MaxLocals++
        copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject,
            this.localVarOffset)...)
        state.appendLocals(class, state.newObjectVariableType(javaRootObjectArray))
	}


    fn unPack(c cg.ClassHighLevel, code cg.AttributeCode,
        valueIndex int, typ ast.Type)  -> (maxStack char) {
        maxStack = this.unPack2Object(class, code, valueIndex)
        if typ.IsPointer() == false {
            typeConverter.unPackPrimitives(class, code, typ)
            if t := jvmSlotSize(typ); t > maxStack {
                maxStack = t
            }
        } else {
            typeConverter.castPointer(class, code, typ)
        }
        return
    }

    /*
        object is all i need
    */
    fn unPack2Object(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        valueIndex int) -> (maxStack char) {
        if valueIndex > 127 {
            panic("over 127")
        }
        maxStack = 2
        //a.buildLoadArrayListAutoVar(code, context) // local array list on stack
        copyOPs(code,
            loadLocalVariableOps(ast.VariableTypeObject, this.localVarOffset)...)
        loadInt32(class, code, int(valueIndex))
        code.Codes[code.CodeLength] = cg.OP_aaload
        code.CodeLength++
        return
    }


}



