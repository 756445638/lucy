import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"

class  BuildExpressionAssign {
	

	eb BuildExpression
    
    fn BuildExpressionAssign(eb BuildExpression){
        this.super()
        this.eb = eb
    }

	fn  buildExpressionAssign(
		c cg.ClassHighLevel,
		code cg.AttributeCode,
		e ast.Expression,
		context Context,
		state StackMapState) -> (maxStack char) {
		stackLength := len(state.Stacks)
		defer  {
			state.popStack(len(state.Stacks) - stackLength)
		}
		assign := e.Data.(ast.ExpressionAssign)
		left := assign.Lefts[0]
		right := assign.Values[0]
		var remainStack char
		var op []byte
		var leftValueKind LeftValueKind
		if left.IsIdentifier(ast.UnderScore) == false {
			maxStack, remainStack, op, leftValueKind =
				this.getLeftValue(c, code, left, context, state)
		}
		stack := this.build(c, code, right, context, state)
		if t := remainStack + stack; t > maxStack {
			maxStack = t
		}
		if left.IsIdentifier(ast.UnderScore) {
			if jvmSlotSize(right.Value) == 1 {
				code.Codes[code.CodeLength] = cg.OP_pop
			} else {
				code.Codes[code.CodeLength] = cg.OP_pop2
			}
			code.CodeLength++
		} else {
			currentStack := remainStack + jvmSlotSize(left.Value)
			if e.IsStatementExpression == false {
				currentStack += this.dupStackLeaveValueBelow(code, leftValueKind, left.Value)
				if currentStack > maxStack {
					maxStack = currentStack
				}
			}
			copyOPs(code, op...)
		}
		return
	}

	// a,b,c = 122,fdfd2232,"hello";
	fn  buildAssign(
		c cg.ClassHighLevel,
		code cg.AttributeCode,
		e ast.Expression,
		context Context,
		state StackMapState) -> (maxStack char) {
		assign := e.Data.(ast.ExpressionAssign)
		if e.IsStatementExpression == false || len(assign.Lefts) == 1 {
			return this.buildExpressionAssign(c, code, e, context, state)
		}
		if len(assign.Values) == 1 {
			maxStack = this.build(c, code, assign.Values[0], context, state)
		} else {
			maxStack = this.buildExpressions(c, code, assign.Values, context, state)
		}
		autoVar := new MultiValueAutoVar()(c, code, state)
		for k, v := range assign.Lefts {
			if v.IsIdentifier(ast.UnderScore) {
				continue
			}
			stackLength := len(state.Stacks)
			stack, remainStack, op, _ :=
				this.getLeftValue(c, code, v, context, state)
			if stack > maxStack {
				maxStack = stack
			}
			stack = autoVar.unPack(c, code, k, v.Value)
			if t := remainStack + stack; t > maxStack {
				maxStack = t
			}
			copyOPs(code, op...)
			state.popStack(len(state.Stacks) - stackLength)
		}
		return
	}

	fn  dupStackLeaveValueBelow(
		code cg.AttributeCode,
		leftValueKind LeftValueKind,
		stackTopType ast.Type) -> (increment char) {
		switch leftValueKind {
		case LeftValueKindLocalVar:
			if jvmSlotSize(stackTopType) == 1 {
				increment = 1
				code.Codes[code.CodeLength] = cg.OP_dup
			} else {
				code.Codes[code.CodeLength] = cg.OP_dup2
				increment = 2
			}
			code.CodeLength++
		case LeftValueKindPutStatic:
			if jvmSlotSize(stackTopType) == 1 {
				increment = 1
				code.Codes[code.CodeLength] = cg.OP_dup
			} else {
				code.Codes[code.CodeLength] = cg.OP_dup2
				increment = 2
			}
			code.CodeLength++
		case LeftValueKindPutField:
			if jvmSlotSize(stackTopType) == 1 {
				increment = 1
				code.Codes[code.CodeLength] = cg.OP_dup_x1
			} else {
				increment = 2
				code.Codes[code.CodeLength] = cg.OP_dup2_x1
			}
			code.CodeLength++
		case LeftValueKindArray, LeftValueKindLucyArray:
			if jvmSlotSize(stackTopType) == 1 {
				increment = 1
				code.Codes[code.CodeLength] = cg.OP_dup_x2
				code.CodeLength++
			} else {
				increment = 2
				code.Codes[code.CodeLength] = cg.OP_dup2_x2
				code.CodeLength++
			}

		case LeftValueKindMap:
			if jvmSlotSize(stackTopType) == 1 {
				increment = 1
				code.Codes[code.CodeLength] = cg.OP_dup_x2
				code.CodeLength++
			} else {
				increment = 2
				code.Codes[code.CodeLength] = cg.OP_dup2_x2
				code.CodeLength++
			}
		}

		return
	}
	

}

