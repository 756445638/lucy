// all rights reserved , check the LICENSE file

import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/common"
import "lucy/jvm/cg"

class BuildExpressionMap {
    eb BuildExpression

    fn BuildExpressionMap(eb BuildExpression) {
        this.super()
        this.eb = eb
    }

    fn buildMapLiteral(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        code.codes[code.codeLength] = cg.OP_new
        c.insertClassConst(mapClass , code.codes[code.codeLength + 1 : code.codeLength + 3])
        code.codes[code.codeLength + 3] = cg.OP_dup
        code.codeLength += 4
        maxStack = 2
        code.codes[code.codeLength] = cg.OP_invokespecial
        c.insertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(mapClass,
                specialMethodInit,
                "()V") , code.codes[code.codeLength + 1 : code.codeLength + 3])
        code.codeLength += 3
        values := e.data.(ast.ExpressionMap).keyValuePairs
        hashMapObject := state.newObjectVariableType(mapClass)
        state.pushStack(c , hashMapObject)
        defer {
            state.popStack(1)
        }

        for _ , v := range values {
            code.codes[code.codeLength] = cg.OP_dup
            code.codeLength++
            currentStack := char(2)
            state.pushStack(c , hashMapObject)
            stack := this.eb.build(c , code , v.key , context , state)
            if t := currentStack + stack ; t > maxStack {
                maxStack = t
            }
            if v.key.value.isPointer() == false {
                TypeConverterAndPrimitivePacker.packPrimitives(c , code , v.key.value)
            }
            state.pushStack(c , state.newObjectVariableType(javaRootClass))
            currentStack = 3 // stack is ... mapref mapref kref
            stack = this.eb.build(c , code , v.value , context , state)
            if t := currentStack + stack ; t > maxStack {
                maxStack = t
            }
            if v.value.value.isPointer() == false {
                TypeConverterAndPrimitivePacker.packPrimitives(c , code , v.value.value)
            }
            // put in hashmap
            code.codes[code.codeLength] = cg.OP_invokevirtual
            c.insertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(mapClass,
                    "put",
                    "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;") , code.codes[code.codeLength + 1 : code.codeLength + 3])
            code.codes[code.codeLength + 3] = cg.OP_pop
            code.codeLength += 4
            state.popStack(2)
        }

        return
    }

    fn buildMethodCallOnMap(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        call := e.data.(ast.ExpressionMethodCall)
        maxStack = this.eb.build(c , code , call.methodCallOn , context , state)
        stackLength := len(state.stacks)
        defer {
            state.popStack(len(state.stacks) - stackLength)
        }

        hashMapVerifyType := state.newObjectVariableType(mapClass)
        state.pushStack(c , hashMapVerifyType)
        switch call.name {
            case common.MapMethodKeyExist:
                variableType := call.args[0].value
                stack := this.eb.build(c , code , call.args[0] , context , state)
                if t := char(1) + stack ; t > maxStack {
                    maxStack = t
                }
                if variableType.isPointer() == false {
                    TypeConverterAndPrimitivePacker.packPrimitives(c , code , variableType)
                }
                code.codes[code.codeLength] = cg.OP_invokevirtual
                c.insertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(mapClass,
                        "containsKey",
                        "(Ljava/lang/Object;)Z") , code.codes[code.codeLength + 1 : code.codeLength + 3])
                code.codeLength += 3
                if e.isStatementExpression {
                    code.codes[code.codeLength] = cg.OP_pop
                    code.codeLength++
                }
            case common.MapMethodRemove:
                currentStack := char(1)
                for k , v := range call.args {
                    currentStack = 1
                    variableType := v.value
                    if k != len(call.args) - 1 {
                        code.codes[code.codeLength] = cg.OP_dup
                        currentStack++
                        if currentStack > maxStack {
                            maxStack = currentStack
                        }
                        state.pushStack(c , hashMapVerifyType)
                    }
                    stack := this.eb.build(c , code , v , context , state)
                    if t := stack + currentStack ; t > maxStack {
                        maxStack = t
                    }
                    if variableType.isPointer() == false {
                        TypeConverterAndPrimitivePacker.packPrimitives(c , code , variableType)
                    }
                    //call remove
                    code.codes[code.codeLength] = cg.OP_invokevirtual
                    c.insertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(mapClass,
                            "remove",
                            "(Ljava/lang/Object;)Ljava/lang/Object;") , code.codes[code.codeLength + 1 : code.codeLength + 3])
                    code.codes[code.codeLength + 3] = cg.OP_pop
                    code.codeLength += 4
                    if k != len(call.args) - 1 {
                        state.popStack(1)
                    }
                }

            case common.MapMethodRemoveAll:
                code.codes[code.codeLength] = cg.OP_invokevirtual
                c.insertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(mapClass,
                        "clear",
                        "()V") , code.codes[code.codeLength + 1 : code.codeLength + 3])
                code.codeLength += 3
            case common.MapMethodSize:
                code.codes[code.codeLength] = cg.OP_invokevirtual
                c.insertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(mapClass,
                        "size",
                        "()I") , code.codes[code.codeLength + 1 : code.codeLength + 3])
                code.codeLength += 3
                if e.isStatementExpression {
                    code.codes[code.codeLength] = cg.OP_pop
                    code.codeLength++
                }
        }

        return
    }

}


