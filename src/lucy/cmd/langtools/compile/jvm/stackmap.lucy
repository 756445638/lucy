
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"

class StackMapState {
	Locals []cg.StackMapVerificationTypeInfo
	Stacks []cg.StackMapVerificationTypeInfo

    fn StackMapState(last StackMapState) {
    	this.super()
    	if last == null {
    		return 
    	}
        this.Locals = new []cg.StackMapVerificationTypeInfo(len(last.Locals))
        copy(this.Locals, last.Locals)
    }


	fn appendLocals(c cg.ClassHighLevel, v ast.Type) {
		this.Locals = append(this.Locals,
			this.newStackMapVerificationTypeInfo(c, v))
	}

	fn addTop(absent StackMapState) {
		if this == absent {
			return
		}
		length := len(absent.Locals) - len(this.Locals)
		if length == 0 {
			return
		}
		oldLength := len(this.Locals)
		verify := new cg.StackMapVerificationTypeInfo()
		verify.Verify = new cg.StackMapTopVariableInfo()
		for i := 0; i < length; i++ {
			tt := absent.Locals[i+oldLength].Verify
			_, isDouble := tt.(cg.StackMapDoubleVariableInfo)
			_, isLong := tt.(cg.StackMapLongVariableInfo)
			if isDouble || isLong {
				this.Locals = append(this.Locals, verify, verify)
			} else {
				this.Locals = append(this.Locals, verify)
			}
		}
	}

	fn newObjectVariableType(name string) -> (ret ast.Type) {
		ret :=new ast.Type()
		ret.Type = ast.VariableTypeObject
		ret.Class = new ast.Class()
		ret.Class.Name = name
		return ret
	}

	fn popStack(pop int) {
		if pop == 0 {
			return
		}
		if pop < 0 {
			panic("negative pop")
		}
		if len(this.Stacks) == 0 {
			panic("already 0")
		}
		this.Stacks = this.Stacks[:len(this.Stacks)-pop]
	}
	fn pushStack(c cg.ClassHighLevel, v ast.Type) {
		if this == null {
			panic("s is null")
		}
		this.Stacks = append(this.Stacks, this.newStackMapVerificationTypeInfo(c, v))
	}


	fn newStackMapVerificationTypeInfo(c cg.ClassHighLevel,
		t ast.Type) -> (ret cg.StackMapVerificationTypeInfo) {
		ret = new cg.StackMapVerificationTypeInfo()
		switch t.Type {
		case ast.VariableTypeBool ,ast.VariableTypeByte , ast.VariableTypeShort,
		    ast.VariableTypeEnum ,ast.VariableTypeChar ,  ast.VariableTypeInt:
			ret.Verify = new cg.StackMapIntegerVariableInfo()
		case ast.VariableTypeLong:
			ret.Verify = new cg.StackMapLongVariableInfo()
		case ast.VariableTypeFloat:
			ret.Verify = newcg.StackMapFloatVariableInfo()
		case ast.VariableTypeDouble:
			ret.Verify = new cg.StackMapDoubleVariableInfo()
		case ast.VariableTypeNull:
			ret.Verify = newcg.StackMapNullVariableInfo()
		case ast.VariableTypeString:
			ret.Verify = new cg.StackMapObjectVariableInfo(c.InsertClassConst(javaStringClass))
		case ast.VariableTypeObject:
			ret.Verify = new cg.StackMapObjectVariableInfo( c.InsertClassConst(t.Class.Name))
		case ast.VariableTypeFunction:
			ret.Verify = new cg.StackMapObjectVariableInfo( c.InsertClassConst(javaMethodHandleClass))
		case ast.VariableTypeMap:
			ret.Verify = new cg.StackMapObjectVariableInfo(c.InsertClassConst(mapClass))
		case ast.VariableTypeArray:
			meta := ArrayMetas[t.Array.Type]
			ret.Verify = new cg.StackMapObjectVariableInfo(c.InsertClassConst(meta.className))
		case ast.VariableTypeJavaArray:
			d := Descriptor.typeDescriptor(t)
			ret.Verify = new cg.StackMapObjectVariableInfo(	c.InsertClassConst(d))
		default:
			panic(1)
		}
		return ret
	}


}


