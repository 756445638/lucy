
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"
 
class BuildinFunctionSprintf {
    
    eb BuildExpression
    
    fn BuildinFunctionSprintf(eb BuildExpression){
        this.super()
        this.eb = eb
    }
    
    fn build(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        length := len(state.Stacks)
        defer {
            state.popStack(len(state.Stacks) - length)
        }
        // format,must be string
        call := e.Data.(ast.ExpressionFunctionCall)
        meta := call.BuildInFunctionMeta.(ast.BuildInFunctionSprintfMeta)
        maxStack = this.eb.build(c, code, meta.Format, context, state)
        state.pushStack(c, state.newObjectVariableType(javaStringClass))
        loadInt32(c, code, int(meta.ArgsLength))
        code.Codes[code.CodeLength] = cg.OP_anewarray
        c.InsertClassConst("java/lang/Object", code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
        currentStack := char(2)
        if currentStack > maxStack {
            maxStack = currentStack
        }
        objectArray := new ast.Type()
        objectArray.Type = ast.VariableTypeJavaArray
        objectArray.Array = state.newObjectVariableType(javaRootClass)
        state.pushStack(c, objectArray)
        index := int(0)
        for _, v := range call.Args {
            currentStack = 2
            code.Codes[code.CodeLength] = cg.OP_dup
            code.CodeLength++
            loadInt32(c, code, index)
            currentStack += 2
            state.pushStack(c, objectArray)
            state.pushStack(c, typeInt)
            stack := this.eb.build(c, code, v, context, state)
            if t := currentStack + stack; t > maxStack {
                maxStack = t
            }
            if v.Value.IsPointer() == false {
                TypeConverterAndPrimitivePacker.packPrimitives(c, code, v.Value)
            }
            code.Codes[code.CodeLength] = cg.OP_aastore
            code.CodeLength++
            index++
            state.popStack(2)
        }
        code.Codes[code.CodeLength] = cg.OP_invokestatic
        c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                javaStringClass,
                 "format",
            "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;"
        ), code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
        if e.IsStatementExpression {
            code.Codes[code.CodeLength] = cg.OP_pop
            code.CodeLength++
        }
        return
    }
}


