// all rights reserved , check the LICENSE file

import "lucy/cmd/langtools/compile/ast"
import "lucy/jvm/cg"
import "lucy/binary"

class AutoVariableForRangeJavaArray {
	protected Elements char
	protected end      char
	protected K        char // loop control var when range java array 
	protected V        char
}

class BuildForRangeJavaArray {
	buildExpression BuildExpression
	buildBlock      BuildBlock

	fn BuildForRangeJavaArray(eb BuildExpression , bb BuildBlock) {
		this.super()
		this.buildExpression = eb
		this.buildBlock = bb
	}

	fn build(
		c cg.ClassHighLevel,
		code cg.AttributeCode,
		s ast.StatementFor,
		context Context,
		state StackMapState) -> (maxStack char) {
		//build array expression
		maxStack = this.buildExpression.build(c , code , s.rangeAttr.rangeOn , context , state) // array on stack
		code.codes[code.codeLength] = cg.OP_dup
		code.codeLength++
		noNullExit := new cg.Exit(cg.OP_ifnonnull , code)
		code.codes[code.codeLength] = cg.OP_pop
		code.codeLength++
		s.exits.append(new cg.Exit(cg.OP_goto , code))
		writeExits([]cg.Exit{noNullExit} , code.codeLength)
		state.pushStack(c , s.rangeAttr.rangeOn.value)
		context.makeStackMapForCode(code , state , code.codeLength)
		state.popStack(1)
		forState := new StackMapState(state)
		defer {
			state.addTop(forState)
			insertLocalVariables2Code(c.theClass , code , s.initExpressionBlock.variables)
		}
		attr := s.rangeAttr
		var autoVar = new AutoVariableForRangeJavaArray()
		{
			autoVar.Elements = code.maxLocals
			code.maxLocals++
			forState.appendLocals(c , attr.rangeOn.value)
			// K
			autoVar.K = code.maxLocals
			code.maxLocals++
			forState.appendLocals(c , typeInt)
			//end
			autoVar.end = code.maxLocals
			code.maxLocals++
			forState.appendLocals(c , typeInt)
		}

		//get length
		code.codes[code.codeLength] = cg.OP_dup //dup top
		code.codeLength++
		if 2 > maxStack {
			maxStack = char(2)
		}
		code.codes[code.codeLength] = cg.OP_arraylength
		code.codeLength++
		copyOPs(code , storeLocalVariableOps(ast.VariableTypeInt , autoVar.end))
		copyOPs(code , storeLocalVariableOps(ast.VariableTypeJavaArray , autoVar.Elements))

		code.codes[code.codeLength] = cg.OP_iconst_m1
		code.codeLength++
		copyOPs(code , storeLocalVariableOps(ast.VariableTypeInt , autoVar.K))

		//handle captured vars
		if s.condition.Type == ast.ExpressionTypeVarAssign {
			if attr.identifierValue != null &&
				attr.identifierValue.variable.beenCapturedAsLeftValue > 0 {
				closure.createClosureVar(c , code , attr.identifierValue.variable.Type)
				attr.identifierValue.variable.localValOffset = code.maxLocals
				code.maxLocals++
				copyOPs(code,
					storeLocalVariableOps(ast.VariableTypeObject , attr.identifierValue.variable.localValOffset))
				forState.appendLocals(c,
					forState.newObjectVariableType(closure.getMeta(attr.rangeOn.value.theArray.Type).className))
			}
			if attr.identifierKey != null &&
				attr.identifierKey.variable.beenCapturedAsLeftValue > 0 {
				closure.createClosureVar(c , code , attr.identifierKey.variable.Type)
				attr.identifierKey.variable.localValOffset = code.maxLocals
				code.maxLocals++
				copyOPs(code,
					storeLocalVariableOps(ast.VariableTypeObject , attr.identifierKey.variable.localValOffset))
				forState.appendLocals(c,
					forState.newObjectVariableType(closure.getMeta(ast.VariableTypeInt).className))
			}
		}
		s.continueCodeOffset = code.codeLength
		context.makeStackMapForCode(code , forState , code.codeLength)
		blockState := new StackMapState(forState)

		if autoVar.K > 255 {
			code.codes[code.codeLength] = cg.OP_wide
			code.codes[code.codeLength + 1] = cg.OP_iinc
			binary.BigEndian.putChar(code.codes[code.codeLength + 2:] , autoVar.K)
			binary.BigEndian.putChar(code.codes[code.codeLength + 4:] , char(1))
			code.codeLength += 6
		} else {
			code.codes[code.codeLength] = cg.OP_iinc
			code.codes[code.codeLength + 1] = byte(autoVar.K)
			code.codes[code.codeLength + 2] = 1b
			code.codeLength += 3
		}

		// load  k
		copyOPs(code , loadLocalVariableOps(ast.VariableTypeInt , autoVar.K))

		// load end
		copyOPs(code , loadLocalVariableOps(ast.VariableTypeInt , autoVar.end))
		if 2 > maxStack {
			maxStack = 2
		}
		s.exits.append(new cg.Exit(cg.OP_if_icmpge , code))
		//load elements
		if attr.identifierValue != null || attr.expressionValue != null {
			copyOPs(code , loadLocalVariableOps(ast.VariableTypeObject , autoVar.Elements))
			copyOPs(code , loadLocalVariableOps(ast.VariableTypeInt , autoVar.K))
			if 2 > maxStack {
				maxStack = 2
			}
			// load value
			switch attr.rangeOn.value.theArray.Type {
				case ast.VariableTypeBool , ast.VariableTypeByte:
					code.codes[code.codeLength] = cg.OP_baload
				case ast.VariableTypeShort:
					code.codes[code.codeLength] = cg.OP_saload
				case ast.VariableTypeChar:
					code.codes[code.codeLength] = cg.OP_caload
				case ast.VariableTypeEnum,
					ast.VariableTypeInt:
					code.codes[code.codeLength] = cg.OP_iaload
				case ast.VariableTypeLong:
					code.codes[code.codeLength] = cg.OP_laload
				case ast.VariableTypeFloat:
					code.codes[code.codeLength] = cg.OP_faload
				case ast.VariableTypeDouble:
					code.codes[code.codeLength] = cg.OP_daload
				default:
					code.codes[code.codeLength] = cg.OP_aaload
			}
			code.codeLength++
			// v
			autoVar.V = code.maxLocals
			code.maxLocals += jvmSlotSize(attr.rangeOn.value.theArray)
			//store to v tmp
			copyOPs(code,
				storeLocalVariableOps(attr.rangeOn.value.theArray.Type,
					autoVar.V))

			blockState.appendLocals(c , attr.rangeOn.value.theArray)
		}
		//current stack is 0
		if s.condition.Type == ast.ExpressionTypeVarAssign {
			if attr.identifierValue != null {
				if attr.identifierValue.variable.beenCapturedAsLeftValue > 0 {
					copyOPs(code , loadLocalVariableOps(ast.VariableTypeObject , attr.identifierValue.variable.localValOffset))
					copyOPs(code,
						loadLocalVariableOps(attr.rangeOn.value.theArray.Type,
							autoVar.V))
					this.buildExpression.storeLocalVar(c , code , attr.identifierValue.variable)
				} else {
					attr.identifierValue.variable.localValOffset = autoVar.V
				}
			}
			if attr.identifierKey != null {
				if attr.identifierKey.variable.beenCapturedAsLeftValue > 0 {
					copyOPs(code , loadLocalVariableOps(ast.VariableTypeObject,
							attr.identifierKey.variable.localValOffset))
					copyOPs(code,
						loadLocalVariableOps(ast.VariableTypeInt , autoVar.K))
					this.buildExpression.storeLocalVar(c , code , attr.identifierKey.variable)
				} else {
					attr.identifierKey.variable.localValOffset = autoVar.K
				}
			}
		} else {
			// store v
			//get ops,make_node_objects ops ready
			if attr.expressionValue != null {
				stackLength := len(blockState.stacks)
				stack , remainStack , ops , _ := this.buildExpression.buildExpressionLeftValue.getLeftValue(c,
					code , attr.expressionValue , context , blockState)
				if stack > maxStack {
					maxStack = stack
				}
				//load v
				copyOPs(code , loadLocalVariableOps(attr.rangeOn.value.theArray.Type,
						autoVar.V))
				if t := remainStack + jvmSlotSize(attr.rangeOn.value.theArray) ; t > maxStack {
					maxStack = t
				}
				copyOPs(code , ops)
				blockState.popStack(len(blockState.stacks) - stackLength)
			}
			if attr.expressionKey != null {
				stackLength := len(blockState.stacks)
				stack , remainStack , ops , _ := this.buildExpression.buildExpressionLeftValue.getLeftValue(c,
					code , attr.expressionKey , context , blockState)
				if stack > maxStack {
					maxStack = stack
				}
				if t := remainStack + 1 ; t > maxStack {
					maxStack = t
				}
				// load k
				copyOPs(code , loadLocalVariableOps(ast.VariableTypeInt , autoVar.K))
				copyOPs(code , ops)
				blockState.popStack(len(blockState.stacks) - stackLength)
			}
		}

		// build block
		this.buildBlock.buildBlock(c , code , s.block , context , blockState)
		forState.addTop(blockState)
		if s.block.notExecuteToLastStatement == false {
			jumpTo(code , s.continueCodeOffset)
		}
		return
	}

}

