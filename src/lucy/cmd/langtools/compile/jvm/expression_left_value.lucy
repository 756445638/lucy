
class BuildExpressionLeftValue {


    fn  getCaptureIdentifierLeftValue(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (
            maxStack,
            remainStack char,
            ops []byte,
            leftValueType LeftValueKind ) {
        identifier := e.Data.(ast.ExpressionIdentifier)
        meta := closure.getMeta(identifier.Variable.Type.Type)
        if context.function.Closure.ClosureVariableExist(identifier.Variable) { // capture var exits
            copyOPs(code, loadLocalVariableOps(ast.VariableTypeObject, 0)...)
            code.Codes[code.CodeLength] = cg.OP_getfield
            ast.TypeInsertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(
                ast.TypeName,
                identifier.Name,
               "L" + meta.className + ";"
            ), code.Codes[code.CodeLength+1:code.CodeLength+3])
            code.CodeLength += 3
        } else {
            copyOPs(code, loadLocalVariableOps(ast.VariableTypeObject, identifier.Variable.LocalValOffset)...)
        }
        state.pushStack(c, state.newObjectVariableType(meta.className))
        maxStack = 1
        remainStack = 1
        ops = new []byte(3)
        ops[0] = cg.OP_putfield
        ast.TypeInsertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(
            meta.className,
            meta.fieldName,
            meta.fieldDescription
        ), ops[1:3])
        leftValueType = LeftValueKindPutField
        return
    }

    fn  getMapLeftValue(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (
            maxStack, remainStack char,
            ops []byte,
            leftValueType LeftValueKind) {
        index := e.Data.(ast.ExpressionIndex)
        maxStack = this.build(c, code, index.Expression, context, state)
        state.pushStack(c, state.newObjectVariableType(mapClass))
        stack := this.build(c, code, index.Index, context, state)
        if t := 1 + stack; t > maxStack {
            maxStack = t
        }
        if index.Index.Value.IsPointer() == false {
            typeConverter.packPrimitives(c, code, index.Index.Value)
        }
        state.pushStack(c, state.newObjectVariableType(javaRootClass))
        remainStack = 2
        ops = []byte{}
        if index.Expression.Value.Map.V.IsPointer() == false {
            ops = append(ops,
                typeConverter.packPrimitivesBytes(c, index.Expression.Value.Map.V)...)
        }
        bs4 := new []byte(4)
        bs4[0] = cg.OP_invokevirtual
        ast.TypeInsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
            mapClass,
            "put",
            "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"
        ), bs4[1:3])
        bs4[3] = cg.OP_pop
        ops = append(ops, bs4...)
        leftValueType = LeftValueKindMap
        return
    }

    fn  getLeftValue(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (
        maxStack, remainStack char, ops []byte,
        leftValueType LeftValueKind) {
        switch e.Type {
        case ast.ExpressionTypeIdentifier:
            identifier := e.Data.(ast.ExpressionIdentifier)
            if identifier.Name == ast.UnderScore {
                panic("this is not happening")
            }
            if identifier.Variable.IsGlobal {
                ops = new []byte(3)
                leftValueType = LeftValueKindPutStatic
                ops[0] = cg.OP_putstatic
                ast.TypeInsertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(
                    this.BuildPackage.mainClass.Name,
                    identifier.Name,
                    Descriptor.typeDescriptor(identifier.Variable.Type)
                ), ops[1:3])
                return
            }
            if identifier.Variable.BeenCapturedAsLeftValue > 0 {
                return this.getCaptureIdentifierLeftValue(c, code, e, context, state)
            }
            leftValueType = LeftValueKindLocalVar
            ops = storeLocalVariableOps(identifier.Variable.Type.Type, identifier.Variable.LocalValOffset)
        case ast.ExpressionTypeIndex:
            index := e.Data.(ast.ExpressionIndex)
            if index.Expression.Value.Type == ast.VariableTypeArray {
                maxStack = this.build(c, code, index.Expression, context, state)
                state.pushStack(c, index.Expression.Value)
                stack := this.build(c, code, index.Index, context, state)
                if t := stack + 1; t > maxStack {
                    maxStack = t
                }
                meta := ArrayMetas[index.Expression.Value.Array.Type]
                ops = new []byte(3)
                ops[0] = cg.OP_invokevirtual
                ast.TypeInsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                    meta.className,
                    "set",
                    meta.setMethodDescription
                ), ops[1:3])
                state.pushStack(c, typeInt)
                leftValueType = LeftValueKindLucyArray
                remainStack = 2 // [arrayref ,index]
            } else if index.Expression.Value.Type == ast.VariableTypeMap { // map
                return this.getMapLeftValue(c, code, e, context, state)
            } else { // java array
                maxStack = this.build(c, code, index.Expression, context, state)
                state.pushStack(c, index.Expression.Value)
                stack := this.build(c, code, index.Index, context, state)
                if t := stack + 1; t > maxStack {
                    maxStack = t
                }
                leftValueType = LeftValueKindArray
                remainStack = 2 // [objectref ,index]
                state.pushStack(c, typeInt )
                switch e.Value.Type {
                case ast.VariableTypeBool:
                    ops = []byte{cg.OP_bastore}
                case ast.VariableTypeByte:
                    ops = []byte{cg.OP_bastore}
                case ast.VariableTypeShort:
                    ops = []byte{cg.OP_sastore}
                case ast.VariableTypeChar:
                    ops = []byte{cg.OP_castore}
                case ast.VariableTypeEnum , ast.VariableTypeInt:
                    ops = []byte{cg.OP_iastore}
                case ast.VariableTypeLong:
                    ops = []byte{cg.OP_lastore}
                case ast.VariableTypeFloat:
                    ops = []byte{cg.OP_fastore}
                case ast.VariableTypeDouble:
                    ops = []byte{cg.OP_dastore}
                default:
                    ops = []byte{cg.OP_aastore}
                }
                return
            }
        case ast.ExpressionTypeSelection:
            selection := e.Data.(ast.ExpressionSelection)
            switch selection.Expression.Value.Type {
            case ast.VariableTypePackage:
                ops = new []byte(3)
                ops[0] = cg.OP_putstatic
                if selection.PackageVariable.JvmDescriptor == "" {
                    selection.PackageVariable.JvmDescriptor = Descriptor.typeDescriptor(selection.PackageVariable.Type)
                }
                ast.TypeInsertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(
                    selection.Expression.Value.Package.Name + "/main",
                    selection.PackageVariable.Name,
                    selection.PackageVariable.JvmDescriptor
                ), ops[1:3])
                maxStack = 0
                leftValueType = LeftValueKindPutStatic
                remainStack = 0
            case ast.VariableTypeDynamicSelector:
                ops = new []byte(3)
                if selection.Field.IsStatic() {
                    ops[0] = cg.OP_putstatic
                    leftValueType = LeftValueKindPutStatic
                } else {
                    code.Codes[code.CodeLength] = cg.OP_aload_0
                    code.CodeLength++
                    state.pushStack(c, state.newObjectVariableType(selection.Expression.Value.Class.Name))
                    ops[0] = cg.OP_putfield
                    remainStack = 1
                    maxStack = 1
                    leftValueType = LeftValueKindPutField
                }
                if selection.Field.JvmDescriptor == "" {
                    selection.Field.JvmDescriptor = Descriptor.typeDescriptor(selection.Field.Type)
                }
                ast.TypeInsertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(
                    selection.Expression.Value.Class.Name,
                    selection.Name,
                    selection.Field.JvmDescriptor
                ), ops[1:3])
            default:
                ops = new []byte(3)
                if selection.Field.JvmDescriptor == "" {
                    selection.Field.JvmDescriptor = Descriptor.typeDescriptor(selection.Field.Type)
                }
                ast.TypeInsertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(
                    selection.Expression.Value.Class.Name,
                    selection.Name,
                    selection.Field.JvmDescriptor
                ), ops[1:3])
                if selection.Field.IsStatic() {
                    leftValueType = LeftValueKindPutStatic
                    ops[0] = cg.OP_putstatic
                } else {
                    leftValueType = LeftValueKindPutField
                    ops[0] = cg.OP_putfield
                    maxStack = this.build(c, code, selection.Expression, context, state)
                    remainStack = 1
                    state.pushStack(c, selection.Expression.Value)
                }
            }
        }
        return
    }

}

