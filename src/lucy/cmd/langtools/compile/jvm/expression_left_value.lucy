import "lucy/cmd/langtools/compile/ast"
import "lucy/jvm/cg"

class BuildExpressionLeftValue {
    eb BuildExpression
    fn BuildExpressionLeftValue(eb BuildExpression) {
        this.super()
        this.eb = eb
    }

    fn getCaptureIdentifierLeftValue(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (
        maxStack char,
        remainStack char,
        ops []byte,
        leftValueType LeftValueKind) {
        identifier := e.data.(ast.ExpressionIdentifier)
        meta := closure.getMeta(identifier.Variable.Type.Type)
        if context.function.closure.closureVariableExist(identifier.Variable) {
            copyOPs(code , loadLocalVariableOps(ast.VariableTypeObject , char(0)))
            code.codes[code.codeLength] = cg.OP_getfield
            c.insertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(c.name,
                identifier.name,
                "L" + meta.className + ";") , code.codes[code.codeLength + 1 : code.codeLength + 3])
            code.codeLength += 3
        } else {
            copyOPs(code , loadLocalVariableOps(ast.VariableTypeObject , identifier.Variable.localValOffset))
        }

        state.pushStack(c , state.newObjectVariableType(meta.className))
        maxStack = 1
        remainStack = 1
        ops = new []byte(3)
        ops[0] = cg.OP_putfield
        c.insertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(meta.className,
            meta.fieldName,
            meta.fieldDescription) , ops[1 : 3])
        leftValueType = LeftValueKindPutField
        return
    }

    fn getMapLeftValue(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (
        maxStack char , remainStack char,
        ops []byte,
        leftValueType LeftValueKind) {
        index := e.data.(ast.ExpressionIndex)
        maxStack = this.eb.build(c , code , index.Expression , context , state)
        state.pushStack(c , state.newObjectVariableType(mapClass))
        stack := this.eb.build(c , code , index.index , context , state)
        if t := char(1) + stack ; t > maxStack {
            maxStack = t
        }
        if index.index.value.isPointer() == false {
            TypeConverterAndPrimitivePacker.packPrimitives(c , code , index.index.value)
        }
        state.pushStack(c , state.newObjectVariableType(javaRootClass))
        remainStack = 2
        ops = []byte{}
        if index.Expression.value.Map.V.isPointer() == false {
            ops.appendAll(TypeConverterAndPrimitivePacker.packPrimitivesBytes(c , index.Expression.value.Map.V))
        }
        bs4 := new []byte(4)
        bs4[0] = cg.OP_invokevirtual
        c.insertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(mapClass,
            "put",
            "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;") , bs4[1 : 3])
        bs4[3] = cg.OP_pop
        ops.appendAll(bs4)
        leftValueType = LeftValueKindMap
        return
    }

    fn getLeftValue(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (
        maxStack char , remainStack char , ops []byte,
        leftValueType LeftValueKind) {
        switch e.Type {
            case ast.ExpressionTypeIdentifier:
                identifier := e.data.(ast.ExpressionIdentifier)
                if identifier.name == ast.UnderScore {
                    panic("this is not happening")
                }
                if identifier.Variable.isGlobal {
                    ops = new []byte(3)
                    leftValueType = LeftValueKindPutStatic
                    ops[0] = cg.OP_putstatic
                    c.insertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(this.eb.bp.mainClass.name,
                        identifier.name,
                        Descriptor.typeDescriptor(identifier.Variable.Type)) , ops[1 : 3])
                    return
                }
                if identifier.Variable.beenCapturedAsLeftValue > 0 {
                    return this.getCaptureIdentifierLeftValue(c , code , e , context , state)
                }
                leftValueType = LeftValueKindLocalVar
                ops = storeLocalVariableOps(identifier.Variable.Type.Type , identifier.Variable.localValOffset)
            case ast.ExpressionTypeIndex:
                index := e.data.(ast.ExpressionIndex)
                if index.Expression.value.Type == ast.VariableTypeArray {
                    maxStack = this.eb.build(c , code , index.Expression , context , state)
                    state.pushStack(c , index.Expression.value)
                    stack := this.eb.build(c , code , index.index , context , state)
                    if t := stack + 1 ; t > maxStack {
                        maxStack = t
                    }
                    meta := ArrayMetas[index.Expression.value.array.Type]
                    ops = new []byte(3)
                    ops[0] = cg.OP_invokevirtual
                    c.insertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(meta.className,
                        "set",
                        meta.setMethodDescription) , ops[1 : 3])
                    state.pushStack(c , typeInt)
                    leftValueType = LeftValueKindLucyArray
                    remainStack = 2 // [arrayref ,index]
                } else if index.Expression.value.Type == ast.VariableTypeMap {
                    return this.getMapLeftValue(c , code , e , context , state)
                } else {
                    maxStack = this.eb.build(c , code , index.Expression , context , state)
                    state.pushStack(c , index.Expression.value)
                    stack := this.eb.build(c , code , index.index , context , state)
                    if t := stack + 1 ; t > maxStack {
                        maxStack = t
                    }
                    leftValueType = LeftValueKindArray
                    remainStack = 2 // [objectref ,index]
                    state.pushStack(c , typeInt)
                    switch e.value.Type {
                        case ast.VariableTypeBool:
                            ops = []byte{cg.OP_bastore}
                        case ast.VariableTypeByte:
                            ops = []byte{cg.OP_bastore}
                        case ast.VariableTypeShort:
                            ops = []byte{cg.OP_sastore}
                        case ast.VariableTypeChar:
                            ops = []byte{cg.OP_castore}
                        case ast.VariableTypeEnum,
                            ast.VariableTypeInt:
                            ops = []byte{cg.OP_iastore}
                        case ast.VariableTypeLong:
                            ops = []byte{cg.OP_lastore}
                        case ast.VariableTypeFloat:
                            ops = []byte{cg.OP_fastore}
                        case ast.VariableTypeDouble:
                            ops = []byte{cg.OP_dastore}
                        default:
                            ops = []byte{cg.OP_aastore}
                    }

                    return
                }

            case ast.ExpressionTypeSelection:
                selection := e.data.(ast.ExpressionSelection)
                switch selection.Expression.value.Type {
                    case ast.VariableTypePackage:
                        ops = new []byte(3)
                        ops[0] = cg.OP_putstatic
                        if selection.packageVariable.jvmDescriptor == null ||
                            selection.packageVariable.jvmDescriptor == "" {
                            selection.packageVariable.jvmDescriptor = Descriptor.typeDescriptor(selection.packageVariable.Type)
                        }
                        c.insertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(selection.Expression.value.Package.name + "/main",
                            selection.packageVariable.name,
                            selection.packageVariable.jvmDescriptor) , ops[1 : 3])
                        maxStack = 0
                        leftValueType = LeftValueKindPutStatic
                        remainStack = 0
                    case ast.VariableTypeDynamicSelector:
                        ops = new []byte(3)
                        if selection.field.isStatic() {
                            ops[0] = cg.OP_putstatic
                            leftValueType = LeftValueKindPutStatic
                        } else {
                            code.codes[code.codeLength] = cg.OP_aload_0
                            code.codeLength++
                            state.pushStack(c , state.newObjectVariableType(selection.Expression.value.Class.name))
                            ops[0] = cg.OP_putfield
                            remainStack = 1
                            maxStack = 1
                            leftValueType = LeftValueKindPutField
                        }

                        if selection.field.jvmDescriptor == null ||
                            selection.field.jvmDescriptor == "" {
                            selection.field.jvmDescriptor = Descriptor.typeDescriptor(selection.field.Type)
                        }
                        c.insertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(selection.Expression.value.Class.name,
                            selection.name,
                            selection.field.jvmDescriptor) , ops[1 : 3])
                    default:
                        ops = new []byte(3)
                        if selection.field.jvmDescriptor == null ||
                            selection.field.jvmDescriptor == "" {
                            selection.field.jvmDescriptor = Descriptor.typeDescriptor(selection.field.Type)
                        }
                        c.insertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(selection.Expression.value.Class.name,
                            selection.name,
                            selection.field.jvmDescriptor) , ops[1 : 3])
                        if selection.field.isStatic() {
                            leftValueType = LeftValueKindPutStatic
                            ops[0] = cg.OP_putstatic
                        } else {
                            leftValueType = LeftValueKindPutField
                            ops[0] = cg.OP_putfield
                            maxStack = this.eb.build(c , code , selection.Expression , context , state)
                            remainStack = 1
                            state.pushStack(c , selection.Expression.value)
                        }

                }

        }

        return
    }

}


