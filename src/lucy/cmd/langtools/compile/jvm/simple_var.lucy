import "lucy/cmd/langtools/compile/ast"
import "lucy/jvm/cg"
import "lucy/binary"

/*
	store local var according on type and offset
*/
fn storeLocalVariableOps(variableType ast.VariableTypeKind , offset char) -> (bs []byte) {
    switch variableType {
        case ast.VariableTypeBool,
            ast.VariableTypeByte,
            ast.VariableTypeShort,
            ast.VariableTypeEnum,
            ast.VariableTypeChar,
            ast.VariableTypeInt:
            switch int(offset) {
                case 0:
                    return []byte{cg.OP_istore_0}
                case 1:
                    return []byte{cg.OP_istore_1}
                case 2:
                    return []byte{cg.OP_istore_2}
                case 3:
                    return []byte{cg.OP_istore_3}
                default:
                    if offset > 255 {
                        bs = new []byte(4)
                        bs[0] = cg.OP_wide
                        bs[1] = cg.OP_istore
                        binary.BigEndian.putChar(bs[2:] , offset)
                        return
                    }
                    return []byte{cg.OP_istore , byte(offset)}
            }
        case ast.VariableTypeLong:
            switch int(offset) {
                case 0:
                    return []byte{cg.OP_lstore_0}
                case 1:
                    return []byte{cg.OP_lstore_1}
                case 2:
                    return []byte{cg.OP_lstore_2}
                case 3:
                    return []byte{cg.OP_lstore_3}
                default:
                    if offset > 255 {
                        bs = new []byte(4)
                        bs[0] = cg.OP_wide
                        bs[1] = cg.OP_lstore
                        binary.BigEndian.putChar(bs[2:] , offset)
                        return
                    }
                    return []byte{cg.OP_lstore , byte(offset)}
            }
        case ast.VariableTypeFloat:
            switch int(offset) {
                case 0:
                    return []byte{cg.OP_fstore_0}
                case 1:
                    return []byte{cg.OP_fstore_1}
                case 2:
                    return []byte{cg.OP_fstore_2}
                case 3:
                    return []byte{cg.OP_fstore_3}
                default:
                    if offset > 255 {
                        bs = new []byte(4)
                        bs[0] = cg.OP_wide
                        bs[1] = cg.OP_fstore
                        binary.BigEndian.putChar(bs[2:] , offset)
                        return
                    }
                    return []byte{cg.OP_fstore , byte(offset)}
            }
        case ast.VariableTypeDouble:
            switch int(offset) {
                case 0:
                    return []byte{cg.OP_dstore_0}
                case 1:
                    return []byte{cg.OP_dstore_1}
                case 2:
                    return []byte{cg.OP_dstore_2}
                case 3:
                    return []byte{cg.OP_dstore_3}
                default:
                    if offset > 255 {
                        bs = new []byte(4)
                        bs[0] = cg.OP_wide
                        bs[1] = cg.OP_dstore
                        binary.BigEndian.putChar(bs[2:] , offset)
                        return
                    }
                    return []byte{cg.OP_dstore , byte(offset)}
            }
        default:
            switch int(offset) {
                case 0:
                    return []byte{cg.OP_astore_0}
                case 1:
                    return []byte{cg.OP_astore_1}
                case 2:
                    return []byte{cg.OP_astore_2}
                case 3:
                    return []byte{cg.OP_astore_3}
                default:
                    if offset > 255 {
                        bs = new []byte(4)
                        bs[0] = cg.OP_wide
                        bs[1] = cg.OP_astore
                        binary.BigEndian.putChar(bs[2:] , offset)
                        return
                    }
                    return []byte{cg.OP_astore , byte(offset)}
            }
    }
}

fn loadLocalVariableOps(variableType ast.VariableTypeKind , offset char) -> (bs []byte) {
    switch variableType {
        case ast.VariableTypeBool,
            ast.VariableTypeByte,
            ast.VariableTypeShort,
            ast.VariableTypeEnum,
            ast.VariableTypeChar,
            ast.VariableTypeInt:
            switch int(offset) {
                case 0:
                    return []byte{cg.OP_iload_0}
                case 1:
                    return []byte{cg.OP_iload_1}
                case 2:
                    return []byte{cg.OP_iload_2}
                case 3:
                    return []byte{cg.OP_iload_3}
                default:
                    if offset > 255 {
                        bs = new []byte(4)
                        bs[0] = cg.OP_wide
                        bs[1] = cg.OP_iload
                        binary.BigEndian.putChar(bs[2:] , offset)
                        return
                    }
                    return []byte{cg.OP_iload , byte(offset)}
            }
        case ast.VariableTypeLong:
            switch int(offset) {
                case 0:
                    return []byte{cg.OP_lload_0}
                case 1:
                    return []byte{cg.OP_lload_1}
                case 2:
                    return []byte{cg.OP_lload_2}
                case 3:
                    return []byte{cg.OP_lload_3}
                default:
                    if offset > 255 {
                        bs = new []byte(4)
                        bs[0] = cg.OP_wide
                        bs[1] = cg.OP_lload
                        binary.BigEndian.putChar(bs[2:] , offset)
                        return
                    }
                    return []byte{cg.OP_lload , byte(offset)}
            }
        case ast.VariableTypeFloat:
            switch int(offset) {
                case 0:
                    return []byte{cg.OP_fload_0}
                case 1:
                    return []byte{cg.OP_fload_1}
                case 2:
                    return []byte{cg.OP_fload_2}
                case 3:
                    return []byte{cg.OP_fload_3}
                default:
                    if offset > 255 {
                        bs = new []byte(4)
                        bs[0] = cg.OP_wide
                        bs[1] = cg.OP_fload
                        binary.BigEndian.putChar(bs[2:] , offset)
                        return
                    }
                    return []byte{cg.OP_fload , byte(offset)}
            }
        case ast.VariableTypeDouble:
            switch int(offset) {
                case 0:
                    return []byte{cg.OP_dload_0}
                case 1:
                    return []byte{cg.OP_dload_1}
                case 2:
                    return []byte{cg.OP_dload_2}
                case 3:
                    return []byte{cg.OP_dload_3}
                default:
                    if offset > 255 {
                        bs = new []byte(4)
                        bs[0] = cg.OP_wide
                        bs[1] = cg.OP_dload
                        binary.BigEndian.putChar(bs[2:] , offset)
                        return
                    }
                    return []byte{cg.OP_dload , byte(offset)}
            }
        default:
            switch int(offset) {
                case 0:
                    return []byte{cg.OP_aload_0}
                case 1:
                    return []byte{cg.OP_aload_1}
                case 2:
                    return []byte{cg.OP_aload_2}
                case 3:
                    return []byte{cg.OP_aload_3}
                default:
                    if offset > 255 {
                        bs = new []byte(4)
                        bs[0] = cg.OP_wide
                        bs[1] = cg.OP_aload
                        binary.BigEndian.putChar(bs[2:] , offset)
                        return
                    }
                    return []byte{cg.OP_aload , byte(offset)}
            }
    }
}
