 
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"


class BuildExpression {
	bp BuildPackage
    BuildExpressionArithmetic BuildExpressionArithmetic
    BuildExpressionArray BuildExpressionArray
    BuildExpressionAssign BuildExpressionAssign
    BuildExpressionCallArgs BuildExpressionCallArgs
    BuildExpressionConversion BuildExpressionConversion
    BuildExpressionFunction BuildExpressionFunction
    BuildExpressionFunctionCall BuildExpressionFunctionCall
    BuildExpressionIdentifier BuildExpressionIdentifier
    BuildExpressionIncrement BuildExpressionIncrement
    BuildExpressionIndex BuildExpressionIndex
    BuildExpressionLeftValue BuildExpressionLeftValue
    BuildExpressionLogical BuildExpressionLogical
    BuildExpressionMap BuildExpressionMap
    BuildExpressionMethodCall BuildExpressionMethodCall
    BuildExpressionNew BuildExpressionNew
    BuildExpressionOpAssign BuildExpressionOpAssign
    BuildExpressionQuestion BuildExpressionQuestion
    BuildExpressionRelation BuildExpressionRelation
    BuildExpressionSelection BuildExpressionSelection
    BuildExpressionSlice BuildExpressionSlice
    BuildExpressionStrcat BuildExpressionStrcat
    BuildExpressionAssert BuildExpressionAssert
    BuildExpressionTypeConversion BuildExpressionTypeConversion
    BuildExpressionUnary BuildExpressionUnary
    BuildExpressionVar BuildExpressionVar
    BuildExpressionVarAssign BuildExpressionVarAssign

    fn BuildExpression(bp BuildPackage){
        this.super()
        this.bp = bp
        this.BuildExpressionArithmetic = new BuildExpressionArithmetic(this)
        this.BuildExpressionArray = new BuildExpressionArray(this)
        this.BuildExpressionAssign = new BuildExpressionAssign(this)
        this.BuildExpressionCallArgs = new BuildExpressionCallArgs(this)
        this.BuildExpressionConversion = new BuildExpressionConversion(this)
        this.BuildExpressionFunction = new BuildExpressionFunction(this)
        this.BuildExpressionFunctionCall = new  BuildExpressionFunctionCall(this)
        this.BuildExpressionIdentifier = new  BuildExpressionIdentifier(this)
        this.BuildExpressionIncrement = new BuildExpressionIncrement(this)
        this.BuildExpressionIndex = new BuildExpressionIndex(this)
        this.BuildExpressionLeftValue = new  BuildExpressionLeftValue(this)
        this.BuildExpressionLogical = new BuildExpressionLogical(this)
        this.BuildExpressionMap = new BuildExpressionMap(this)
        this.BuildExpressionMethodCall = new  BuildExpressionMethodCall(this)
        this.BuildExpressionNew = new BuildExpressionNew(this)
        this.BuildExpressionOpAssign = new BuildExpressionOpAssign(this)
        this.BuildExpressionQuestion = new  BuildExpressionQuestion(this)
        this.BuildExpressionRelation = new BuildExpressionRelation(this)
        this.BuildExpressionSelection = new BuildExpressionSelection(this)
        this.BuildExpressionSlice = new  BuildExpressionSlice(this)
        this.BuildExpressionStrcat = new  BuildExpressionStrcat(this)
        this.BuildExpressionAssert = new  BuildExpressionAssert(this)
        this.BuildExpressionTypeConversion = new  BuildExpressionTypeConversion(this)
        this.BuildExpressionUnary = new BuildExpressionUnary(this)
        this.BuildExpressionVar= new  BuildExpressionVar(this)
        this.BuildExpressionVarAssign = new  BuildExpressionVarAssign(this)
    }


    fn build(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        if e.IsCompileAuto == false {
            context.appendLimeNumberAndSourceFile(e.Pos, code, c)
        }
        switch e.Type {
        case ast.ExpressionTypeNull:
            code.Codes[code.CodeLength] = cg.OP_aconst_null
            code.CodeLength++
            maxStack = 1
        case ast.ExpressionTypeBool:
            if e.boolValue {
                code.Codes[code.CodeLength] = cg.OP_iconst_1
            } else {
                code.Codes[code.CodeLength] = cg.OP_iconst_0
            }
            code.CodeLength++
            maxStack = 1
        case ast.ExpressionTypeByte:
            code.Codes[code.CodeLength] = cg.OP_bipush
            code.Codes[code.CodeLength+1] = byte(e.longValue)
            code.CodeLength += 2
            maxStack = 1
        case ast.ExpressionTypeInt, ast.ExpressionTypeShort, ast.ExpressionTypeChar:
            loadInt32(c, code, int(e.longValue))
            maxStack = 1
        case ast.ExpressionTypeLong:
            if e.longValue == 0 {
                code.Codes[code.CodeLength] = cg.OP_lconst_0
                code.CodeLength++
            } else if e.longValue == 1 {
                code.Codes[code.CodeLength] = cg.OP_lconst_1
                code.CodeLength++
            } else {
                code.Codes[code.CodeLength] = cg.OP_ldc2_w
                c.InsertLongConst(e.longValue, code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            }
            maxStack = 2
        case ast.ExpressionTypeFloat:
            if e.doubleValue == 0d {
                code.Codes[code.CodeLength] = cg.OP_fconst_0
                code.CodeLength++
            } else if e.doubleValue == 1d{
                code.Codes[code.CodeLength] = cg.OP_fconst_1
                code.CodeLength++
            } else if e.doubleValue == 2d {
                code.Codes[code.CodeLength] = cg.OP_fconst_2
                code.CodeLength++
            } else {
                code.Codes[code.CodeLength] = cg.OP_ldc_w
                c.InsertFloatConst(float(e.doubleValue), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            }
            maxStack = 1
        case ast.ExpressionTypeDouble:
            if e.doubleValue == 0d {
                code.Codes[code.CodeLength] = cg.OP_dconst_0
                code.CodeLength++
            } else if e.doubleValue == 1d {
                code.Codes[code.CodeLength] = cg.OP_dconst_1
                code.CodeLength++
            } else {
                code.Codes[code.CodeLength] = cg.OP_ldc2_w
                c.InsertDoubleConst(e.doubleValue, code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            }
            maxStack = 2
        case ast.ExpressionTypeString:
            code.Codes[code.CodeLength] = cg.OP_ldc_w
            c.InsertStringConst(e.stringValue, code.Codes[code.CodeLength+1:code.CodeLength+3])
            code.CodeLength += 3
            if len([]byte(e.Data.(string))) > 65536 {
                panic("jvm max string length is 65536")
            }
            maxStack = 1
        //binary expression
        case ast.ExpressionTypeLogicalOr ,ast.ExpressionTypeLogicalAnd :
            maxStack = this.BuildExpressionLogical.buildLogical(c, code, e, context, state)
        case ast.ExpressionTypeOr ,ast.ExpressionTypeAnd ,ast.ExpressionTypeXor ,
            ast.ExpressionTypeLsh , ast.ExpressionTypeRsh,ast.ExpressionTypeAdd, ast.ExpressionTypeSub,
            ast.ExpressionTypeMul , ast.ExpressionTypeDiv , ast.ExpressionTypeMod:
            maxStack = this.BuildExpressionArithmetic.buildArithmetic(c, code, e, context, state)
        case ast.ExpressionTypeAssign :
            maxStack = this.buildAssign(c, code, e, context, state)
        case ast.ExpressionTypeVarAssign:
            maxStack = this.BuildExpressionAssign.buildVarAssign(c, code, e, context, state)
        case ast.ExpressionTypePlusAssign,  ast.ExpressionTypeMinusAssign ,ast.ExpressionTypeMulAssign ,
            ast.ExpressionTypeDivAssign , ast.ExpressionTypeModAssign , ast.ExpressionTypeAndAssign ,
            ast.ExpressionTypeOrAssign , ast.ExpressionTypeLshAssign ,ast.ExpressionTypeRshAssign ,
             ast.ExpressionTypeXorAssign:
            maxStack = this.BuildExpressionOpAssign.buildOpAssign(c, code, e, context, state)
        case ast.ExpressionTypeEq ,ast.ExpressionTypeNe , ast.ExpressionTypeGe ,
        ast.ExpressionTypeGt, ast.ExpressionTypeLe , ast.ExpressionTypeLt :
            maxStack = this.BuildExpressionRelation.buildRelations(c, code, e, context, state)
        case ast.ExpressionTypeIndex:
            maxStack = this.BuildExpressionIndex.buildIndex(c, code, e, context, state)
        case ast.ExpressionTypeSelection:
            maxStack = this.BuildExpressionSelection.buildSelection(c, code, e, context, state)
        case ast.ExpressionTypeMethodCall:
            maxStack = this.BuildExpressionMethodCall.buildMethodCall(c, code, e, context, state)
        case ast.ExpressionTypeFunctionCall:
            maxStack = this.BuildExpressionFunctionCall.buildFunctionCall(c, code, e, context, state)
        //
        case ast.ExpressionTypeIncrement ,ast.ExpressionTypeDecrement ,
             ast.ExpressionTypePrefixIncrement,ast.ExpressionTypePrefixDecrement:
            maxStack = this.BuildExpressionIncrement.buildSelfIncrement(c, code, e, context, state)
        //
        case ast.ExpressionTypeBitwiseNot ,ast.ExpressionTypeNegative , ast.ExpressionTypeNot :

            maxStack = this.BuildExpressionUnary.buildUnary(c, code, e, context, state)
        //
        case ast.ExpressionTypeIdentifier:
            maxStack = this.BuildExpressionIdentifier.buildIdentifier(c, code, e, context)
        case ast.ExpressionTypeNew:
            maxStack = this.BuildExpressionNew.buildNew(c, code, e, context, state)
        case ast.ExpressionTypeFunctionLiteral:
            maxStack = this.BuildPackage.buildFunctionExpression(c, code, e, context, state)
        case ast.ExpressionTypeCheckCast: // []byte(str)
            maxStack = this.BuildExpressionTypeConversion.BuildExpressionAssert.buildTypeConversion(c, code, e, context, state)
        case ast.ExpressionTypeConst:
            /*
             analyse at ast stage
            */
        case ast.ExpressionTypeSlice:
            maxStack = this.BuildExpressionSlice.buildSlice(c, code, e, context, state)
        case ast.ExpressionTypeArray:
            maxStack = this.BuildExpressionArray.buildArray(c, code, e, context, state)
        case ast.ExpressionTypeMap:
            maxStack = this.BuildExpressionMap.buildMapLiteral(c, code, e, context, state)
        case ast.ExpressionTypeVar:
            maxStack = this.BuildExpressionVar.buildVar(c, code, e, context, state)
        case ast.ExpressionTypeTypeAssert:
            maxStack = this.BuildExpressionVarAssign.buildTypeAssert(c, code, e, context, state)
        case ast.ExpressionTypeQuestion:
            maxStack = this.BuildExpressionQuestion.buildQuestion(c, code, e, context, state)
        case ast.ExpressionTypeVArgs:
            maxStack = this.build(c, code, e.Data.(ast.Expression), context, state)
        default:
            panic("missing handle:" + e.Op)
        }
        return
    }

    fn jvmSize(e ast.Expression) -> (size char) {
        if len(e.MultiValues) > 1 {
            return 1
        }
        return jvmSlotSize(e.Value)
    }

    fn buildExpressions(c cg.ClassHighLevel, code cg.AttributeCode,
        es []ast.Expression, context Context, state StackMapState) -> (maxStack char) {
        length := 0
        for _, e := range es {
            if e.HaveMultiValue() {
                length += len(e.MultiValues)
            } else {
                length++
            }
        }
        loadInt32(c, code, int(length))
        code.Codes[code.CodeLength] = cg.OP_anewarray
        c.InsertClassConst(javaRootClass, code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
        if 1 > maxStack {
            maxStack = 1
        }
        arrayListObject := state.newObjectVariableType(javaRootObjectArray)
        state.pushStack(c, arrayListObject)
        defer state.popStack(1)
        index := int(0)
        for _, v := range es {
            currentStack := char(1)
            if v.HaveMultiValue() {
                stack := this.build(c, code, v, context, state)
                if t := currentStack + stack; t > maxStack {
                    maxStack = t
                }
                autoVar := new MultiValueAutoVar(c, code, state)
                for kk, _ := range v.MultiValues {
                    currentStack = 1
                    code.Codes[code.CodeLength] = cg.OP_dup
                    code.CodeLength++
                    currentStack++
                    stack = autoVar.unPack2Object(c, code, kk)
                    if t := stack + currentStack; t > maxStack {
                        maxStack = t
                    }
                    loadInt32(c, code, index)
                    if 4 > maxStack { // current stack is  arrayRef arrayRef value index
                        maxStack = 4
                    }
                    code.Codes[code.CodeLength] = cg.OP_swap
                    code.Codes[code.CodeLength+1] = cg.OP_aastore
                    code.CodeLength += 2
                    index++
                }
                continue
            }
            code.Codes[code.CodeLength] = cg.OP_dup
            code.CodeLength++
            state.pushStack(c, arrayListObject)
            currentStack++
            stack := this.build(c, code, v, context, state)
            if t := currentStack + stack; t > maxStack {
                maxStack = t
            }
            if v.Value.IsPointer() == false {
                TypeConverterAndPrimitivePacker.packPrimitives(c, code, v.Value)
            }
            loadInt32(c, code, index)
            if 4 > maxStack { // current stack is  arrayRef arrayRef value index
                maxStack = 4
            }
            code.Codes[code.CodeLength] = cg.OP_swap
            code.Codes[code.CodeLength+1] = cg.OP_aastore
            code.CodeLength += 2
            state.popStack(1) // @270
            index++
        }
        return
    }

    fn storeGlobalVariable(c cg.ClassHighLevel, code cg.AttributeCode,
        v ast.Variable) {
        code.Codes[code.CodeLength] = cg.OP_putstatic
        if v.JvmDescriptor == "" {
            v.JvmDescriptor = Descriptor.typeDescriptor(v.Type)
        }
        c.InsertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(
                v.GlobalVarClassName,
                v.Name,
             v.JvmDescriptor
        ), code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
    }


}

