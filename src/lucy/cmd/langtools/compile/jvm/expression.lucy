// all rights reserved , check the LICENSE file

import "lucy/cmd/langtools/compile/ast"
import "lucy/jvm/cg"

class BuildExpression {
	buildPackage                  BuildPackage
	buildExpressionArithmetic     BuildExpressionArithmetic
	buildExpressionArray          BuildExpressionArray
	buildExpressionAssign         BuildExpressionAssign
	buildExpressionCallArgs       BuildExpressionCallArgs
	buildExpressionConversion     BuildExpressionConversion
	buildExpressionFunction       BuildExpressionFunction
	buildExpressionFunctionCall   BuildExpressionFunctionCall
	buildExpressionIdentifier     BuildExpressionIdentifier
	buildExpressionIncrement      BuildExpressionIncrement
	buildExpressionIndex          BuildExpressionIndex
	buildExpressionLeftValue      BuildExpressionLeftValue
	buildExpressionLogical        BuildExpressionLogical
	buildExpressionMap            BuildExpressionMap
	buildExpressionMethodCall     BuildExpressionMethodCall
	buildExpressionNew            BuildExpressionNew
	buildExpressionOpAssign       BuildExpressionOpAssign
	buildExpressionQuestion       BuildExpressionQuestion
	buildExpressionRelation       BuildExpressionRelation
	buildExpressionSelection      BuildExpressionSelection
	buildExpressionSlice          BuildExpressionSlice
	buildExpressionStrcat         BuildExpressionStringCat
	buildExpressionAssert         BuildExpressionAssert
	buildExpressionTypeConversion BuildExpressionTypeConversion
	buildExpressionUnary          BuildExpressionUnary
	buildExpressionVar            BuildExpressionVar
	buildExpressionVarAssign      BuildExpressionVarAssign
	buildTemplateFunctionCall     BuildTemplateFunctionCall

	fn BuildExpression(buildPackage BuildPackage) {
		this.super()
		this.buildPackage = buildPackage
		this.buildExpressionArithmetic = new BuildExpressionArithmetic(this)
		this.buildExpressionArray = new BuildExpressionArray(this)
		this.buildExpressionAssign = new BuildExpressionAssign(this)
		this.buildExpressionCallArgs = new BuildExpressionCallArgs(this)
		this.buildExpressionConversion = new BuildExpressionConversion(this)
		this.buildExpressionFunction = new BuildExpressionFunction(this , buildPackage)
		this.buildExpressionFunctionCall = new BuildExpressionFunctionCall(this)
		this.buildExpressionIdentifier = new BuildExpressionIdentifier(this)
		this.buildExpressionIncrement = new BuildExpressionIncrement(this)
		this.buildExpressionIndex = new BuildExpressionIndex(this)
		this.buildExpressionLeftValue = new BuildExpressionLeftValue(this)
		this.buildExpressionLogical = new BuildExpressionLogical(this)
		this.buildExpressionMap = new BuildExpressionMap(this)
		this.buildExpressionMethodCall = new BuildExpressionMethodCall(this)
		this.buildExpressionNew = new BuildExpressionNew(this)
		this.buildExpressionOpAssign = new BuildExpressionOpAssign(this)
		this.buildExpressionQuestion = new BuildExpressionQuestion(this)
		this.buildExpressionRelation = new BuildExpressionRelation(this)
		this.buildExpressionSelection = new BuildExpressionSelection(this)
		this.buildExpressionSlice = new BuildExpressionSlice(this)
		this.buildExpressionStrcat = new BuildExpressionStringCat(this)
		this.buildExpressionAssert = new BuildExpressionAssert(this)
		this.buildExpressionTypeConversion = new BuildExpressionTypeConversion(this)
		this.buildExpressionUnary = new BuildExpressionUnary(this)
		this.buildExpressionVar = new BuildExpressionVar(this)
		this.buildExpressionVarAssign = new BuildExpressionVarAssign(this)
		this.buildTemplateFunctionCall = new BuildTemplateFunctionCall(this , buildPackage)
	}

	fn build(
		c cg.ClassHighLevel,
		code cg.AttributeCode,
		e ast.Expression,
		context Context,
		state StackMapState) -> (maxStack char) {
		if e.isCompilerAuto == false {
			context.appendLineNumber(e.pos , code , c)
		}
		switch e.Type {
			case ast.ExpressionTypeNull:
				code.codes[code.codeLength] = cg.OP_aconst_null
				code.codeLength++
				maxStack = 1
			case ast.ExpressionTypeBool:
				if e.boolValue {
					code.codes[code.codeLength] = cg.OP_iconst_1
				} else {
					code.codes[code.codeLength] = cg.OP_iconst_0
				}
				code.codeLength++
				maxStack = 1
			case ast.ExpressionTypeByte:
				code.codes[code.codeLength] = cg.OP_bipush
				code.codes[code.codeLength + 1] = byte(e.longValue)
				code.codeLength += 2
				maxStack = 1
			case ast.ExpressionTypeInt,
				ast.ExpressionTypeShort,
				ast.ExpressionTypeChar:
				loadInt(c , code , int(e.longValue))
				maxStack = 1
			case ast.ExpressionTypeLong:
				if e.longValue == 0 {
					code.codes[code.codeLength] = cg.OP_lconst_0
					code.codeLength++
				} else if e.longValue == 1 {
					code.codes[code.codeLength] = cg.OP_lconst_1
					code.codeLength++
				} else {
					code.codes[code.codeLength] = cg.OP_ldc2_w
					c.insertLongConst(e.longValue , code.codes[code.codeLength + 1 : code.codeLength + 3])
					code.codeLength += 3
				}

				maxStack = 2
			case ast.ExpressionTypeFloat:
				if e.doubleValue == 0d {
					code.codes[code.codeLength] = cg.OP_fconst_0
					code.codeLength++
				} else if e.doubleValue == 1d {
					code.codes[code.codeLength] = cg.OP_fconst_1
					code.codeLength++
				} else if e.doubleValue == 2d {
					code.codes[code.codeLength] = cg.OP_fconst_2
					code.codeLength++
				} else {
					code.codes[code.codeLength] = cg.OP_ldc_w
					c.insertFloatConst(float(e.doubleValue) , code.codes[code.codeLength + 1 : code.codeLength + 3])
					code.codeLength += 3
				}

				maxStack = 1
			case ast.ExpressionTypeDouble:
				if e.doubleValue == 0d {
					code.codes[code.codeLength] = cg.OP_dconst_0
					code.codeLength++
				} else if e.doubleValue == 1d {
					code.codes[code.codeLength] = cg.OP_dconst_1
					code.codeLength++
				} else {
					code.codes[code.codeLength] = cg.OP_ldc2_w
					c.insertDoubleConst(e.doubleValue , code.codes[code.codeLength + 1 : code.codeLength + 3])
					code.codeLength += 3
				}

				maxStack = 2
			case ast.ExpressionTypeString:
				code.codes[code.codeLength] = cg.OP_ldc_w
				c.insertStringConst(e.stringValue , code.codes[code.codeLength + 1 : code.codeLength + 3])
				code.codeLength += 3
				if len([]byte(e.stringValue)) > 65536 {
					panic("jvm max string length is 65536")
				}
				maxStack = 1
				//binary expression
			case ast.ExpressionTypeLogicalOr , ast.ExpressionTypeLogicalAnd:
				maxStack = this.buildExpressionLogical.buildLogical(c , code , e , context , state)
			case ast.ExpressionTypeOr,
				ast.ExpressionTypeAnd,
				ast.ExpressionTypeXor,
				ast.ExpressionTypeLsh,
				ast.ExpressionTypeRsh,
				ast.ExpressionTypeAdd,
				ast.ExpressionTypeSub,
				ast.ExpressionTypeMul,
				ast.ExpressionTypeDiv,
				ast.ExpressionTypeMod:
				maxStack = this.buildExpressionArithmetic.buildArithmetic(c , code , e , context , state)
			case ast.ExpressionTypeAssign:
				maxStack = this.buildExpressionAssign.buildAssign(c , code , e , context , state)
			case ast.ExpressionTypeVarAssign:
				maxStack = this.buildExpressionVarAssign.buildVarAssign(c , code , e , context , state)
			case ast.ExpressionTypePlusAssign,
				ast.ExpressionTypeMinusAssign,
				ast.ExpressionTypeMulAssign,
				ast.ExpressionTypeDivAssign,
				ast.ExpressionTypeModAssign,
				ast.ExpressionTypeAndAssign,
				ast.ExpressionTypeOrAssign,
				ast.ExpressionTypeLshAssign,
				ast.ExpressionTypeRshAssign,
				ast.ExpressionTypeXorAssign:
				maxStack = this.buildExpressionOpAssign.buildOpAssign(c , code , e , context , state)
			case ast.ExpressionTypeEq,
				ast.ExpressionTypeNe,
				ast.ExpressionTypeGe,
				ast.ExpressionTypeGt,
				ast.ExpressionTypeLe,
				ast.ExpressionTypeLt:
				maxStack = this.buildExpressionRelation.buildRelations(c , code , e , context , state)
			case ast.ExpressionTypeIndex:
				maxStack = this.buildExpressionIndex.buildIndex(c , code , e , context , state)
			case ast.ExpressionTypeSelection:
				maxStack = this.buildExpressionSelection.buildSelection(c , code , e , context , state)
			case ast.ExpressionTypeMethodCall:
				maxStack = this.buildExpressionMethodCall.buildMethodCall(c , code , e , context , state)
			case ast.ExpressionTypeFunctionCall:
				maxStack = this.buildExpressionFunctionCall.buildFunctionCall(c , code , e , context , state)
				//
			case ast.ExpressionTypeIncrement , ast.ExpressionTypeDecrement,
				ast.ExpressionTypePrefixIncrement , ast.ExpressionTypePrefixDecrement:
				maxStack = this.buildExpressionIncrement.buildSelfIncrement(c , code , e , context , state)
				//
			case ast.ExpressionTypeBitwiseNot , ast.ExpressionTypeNegative , ast.ExpressionTypeNot:
				maxStack = this.buildExpressionUnary.buildUnary(c , code , e , context , state)
				//
			case ast.ExpressionTypeIdentifier:
				maxStack = this.buildExpressionIdentifier.buildIdentifier(c , code , e , context)
			case ast.ExpressionTypeNew:
				maxStack = this.buildExpressionNew.buildNew(c , code , e , context , state)
			case ast.ExpressionTypeFunctionLiteral:
				maxStack = this.buildExpressionFunction.buildFunctionExpression(c , code , e , context , state)
			case ast.ExpressionTypeCheckCast:
				maxStack = this.buildExpressionTypeConversion.buildTypeConversion(c , code , e , context , state)
			case ast.ExpressionTypeConst:
				/*
             		analyse at ast stage
            	*/
			case ast.ExpressionTypeSlice:
				maxStack = this.buildExpressionSlice.buildSlice(c , code , e , context , state)
			case ast.ExpressionTypeArray:
				maxStack = this.buildExpressionArray.buildArray(c , code , e , context , state)
			case ast.ExpressionTypeMap:
				maxStack = this.buildExpressionMap.buildMapLiteral(c , code , e , context , state)
			case ast.ExpressionTypeVar:
				maxStack = this.buildExpressionVar.buildVar(c , code , e , context , state)
			case ast.ExpressionTypeTypeAssert:
				maxStack = this.buildExpressionAssert.buildAssert(c , code , e , context , state)
			case ast.ExpressionTypeQuestion:
				maxStack = this.buildExpressionQuestion.buildQuestion(c , code , e , context , state)
			case ast.ExpressionTypeVArgs:
				maxStack = this.build(c , code , e.data.(ast.Expression) , context , state)
			case ast.ExpressionTypeParenthesis:
				maxStack = this.build(c , code , e.data.(ast.Expression) , context , state)
			default:
				panic("missing handle:" + e.op)
		}

		return
	}

	fn buildExpressions(c cg.ClassHighLevel , code cg.AttributeCode,
		es []ast.Expression , context Context , state StackMapState) -> (maxStack char) {
		length := 0
		for _ , e := range es {
			if e.haveMultiValue() {
				length += len(e.multiValues)
			} else {
				length++
			}

		}

		loadInt(c , code , int(length))
		code.codes[code.codeLength] = cg.OP_anewarray
		c.insertClassConst(javaRootClass , code.codes[code.codeLength + 1 : code.codeLength + 3])
		code.codeLength += 3
		if 1 > maxStack {
			maxStack = 1
		}
		arrayListObject := state.newObjectVariableType(javaRootObjectArray)
		state.pushStack(c , arrayListObject)
		defer {
			state.popStack(1)
		}
		index := int(0)
		for _ , v := range es {
			currentStack := char(1)
			if v.haveMultiValue() {
				stack := this.build(c , code , v , context , state)
				if t := currentStack + stack ; t > maxStack {
					maxStack = t
				}
				autoVar := new MultiValueAutoVar(c , code , state)
				for kk , _ := range v.multiValues {
					currentStack = 1
					code.codes[code.codeLength] = cg.OP_dup
					code.codeLength++
					currentStack++
					stack = autoVar.unPack2Object(c , code , kk)
					if t := stack + currentStack ; t > maxStack {
						maxStack = t
					}
					loadInt(c , code , index)
					if 4 > maxStack {
						maxStack = 4
					}
					code.codes[code.codeLength] = cg.OP_swap
					code.codes[code.codeLength + 1] = cg.OP_aastore
					code.codeLength += 2
					index++
				}
				continue
			}
			code.codes[code.codeLength] = cg.OP_dup
			code.codeLength++
			state.pushStack(c , arrayListObject)
			currentStack++
			stack := this.build(c , code , v , context , state)
			if t := currentStack + stack ; t > maxStack {
				maxStack = t
			}
			if v.value.isPointer() == false {
				TypeConverterAndPrimitivePacker.packPrimitives(c , code , v.value)
			}
			loadInt(c , code , index)
			if 4 > maxStack {
				maxStack = 4
			}
			code.codes[code.codeLength] = cg.OP_swap
			code.codes[code.codeLength + 1] = cg.OP_aastore
			code.codeLength += 2
			state.popStack(1) // @270
			index++
		}

		return
	}

	fn storeGlobalVariable(c cg.ClassHighLevel , code cg.AttributeCode,
		v ast.Variable) {
		code.codes[code.codeLength] = cg.OP_putstatic
		if v.jvmDescriptor == null ||
			v.jvmDescriptor == "" {
			v.jvmDescriptor = Descriptor.typeDescriptor(v.Type)
		}
		c.insertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(v.globalVarClassName,
				v.name,
				v.jvmDescriptor) , code.codes[code.codeLength + 1 : code.codeLength + 3])
		code.codeLength += 3
	}

	fn loadLocalVar(c cg.ClassHighLevel,
		code cg.AttributeCode , v ast.Variable) -> (maxStack char) {
		if v.beenCapturedAsLeftValue > 0 {
			return closure.loadLocalClosureVar(c , code , v)
		}
		maxStack = jvmSlotSize(v.Type)
		copyOPs(code , loadLocalVariableOps(v.Type.Type , v.localValOffset))
		return
	}

	fn storeLocalVar(c cg.ClassHighLevel,
		code cg.AttributeCode , v ast.Variable) -> (maxStack char) {
		if v.beenCapturedAsLeftValue > 0 {
			closure.storeLocalClosureVar(c , code , v)
			return
		}
		maxStack = jvmSlotSize(v.Type)
		copyOPs(code , storeLocalVariableOps(v.Type.Type , v.localValOffset))
		return
	}

	fn dupStackLeaveValueBelow(
		code cg.AttributeCode,
		leftValueKind LeftValueKind,
		stackTopType ast.Type) -> (increment char) {
		switch leftValueKind {
			case LeftValueKindLocalVar:
				if jvmSlotSize(stackTopType) == 1 {
					increment = 1
					code.codes[code.codeLength] = cg.OP_dup
				} else {
					code.codes[code.codeLength] = cg.OP_dup2
					increment = 2
				}

				code.codeLength++
			case LeftValueKindPutStatic:
				if jvmSlotSize(stackTopType) == 1 {
					increment = 1
					code.codes[code.codeLength] = cg.OP_dup
				} else {
					code.codes[code.codeLength] = cg.OP_dup2
					increment = 2
				}

				code.codeLength++
			case LeftValueKindPutField:
				if jvmSlotSize(stackTopType) == 1 {
					increment = 1
					code.codes[code.codeLength] = cg.OP_dup_x1
				} else {
					increment = 2
					code.codes[code.codeLength] = cg.OP_dup2_x1
				}

				code.codeLength++
			case LeftValueKindArray , LeftValueKindLucyArray:
				if jvmSlotSize(stackTopType) == 1 {
					increment = 1
					code.codes[code.codeLength] = cg.OP_dup_x2
					code.codeLength++
				} else {
					increment = 2
					code.codes[code.codeLength] = cg.OP_dup2_x2
					code.codeLength++
				}

			case LeftValueKindMap:
				if jvmSlotSize(stackTopType) == 1 {
					increment = 1
					code.codes[code.codeLength] = cg.OP_dup_x2
					code.codeLength++
				} else {
					increment = 2
					code.codes[code.codeLength] = cg.OP_dup2_x2
					code.codeLength++
				}

		}

		return
	}

}

