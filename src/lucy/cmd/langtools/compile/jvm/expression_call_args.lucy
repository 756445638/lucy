
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"


class BuildExpressionCallArgs {


	eb BuildExpression
    
    fn BuildExpressionCallArgs(eb BuildExpression){
        this.super()
        this.eb = eb
    }

	fn buildCallArgs(
		c cg.ClassHighLevel,
		code cg.AttributeCode,
		args []ast.Expression,
		vArgs ast.CallVariableArgs,
		context Context,
		state StackMapState) -> (maxStack char) {
		currentStack := char(0)
		stackLength := len(state.Stacks)
		defer  {
			state.popStack(len(state.Stacks) - stackLength) // let`s pop
		}
		for _, e := range args {
			stack := this.build(c, code, e, context, state)
			if t := stack + currentStack; t > maxStack {
				maxStack = t
			}
			currentStack += jvmSlotSize(e.Value)
			state.pushStack(c, e.Value)
		}
		if vArgs == null {
			return
		}
		if vArgs.NoArgs {
			code.Codes[code.CodeLength] = cg.OP_aconst_null
			code.CodeLength++
			if t := 1 + currentStack; t > maxStack {
				maxStack = t
			}
		} else {
			if vArgs.PackArray2VArgs {
				stack := this.build(c, code, vArgs.Expressions[0], context, state)
				if t := currentStack + stack; t > maxStack {
					maxStack = t
				}
			} else {
				loadInt32(c, code, int(vArgs.Length))
				newArrayBaseOnType(c, code, vArgs.Type.Array)
				state.pushStack(c, vArgs.Type)
				currentStack++
				op := storeArrayElementOp(vArgs.Type.Array.Type)
				index := int(0)
				for _, e := range vArgs.Expressions {
					code.Codes[code.CodeLength] = cg.OP_dup
					code.CodeLength++
					state.pushStack(c, vArgs.Type)
					loadInt32(c, code, index)
					state.pushStack(c,typeInt)
					currentStack += 2
					stack := this.build(c, code, e, context, state)
					if t := currentStack + stack; t > maxStack {
						maxStack = t
					}
					code.Codes[code.CodeLength] = op
					code.CodeLength++
					state.popStack(2)
					currentStack -= 2
					index++
				}
			}
		}
		return
	}	

}

 
