
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"

class BuildReturn {


    fn  buildReturnStatement(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        statementReturn ast.StatementReturn,
        context Context,
        state StackMapState) -> (maxStack char) {
        if context.function.Type.VoidReturn() { // no return value
            if statementReturn.defers != null && len(statementReturn.defers) > 0 {
                stack := this.buildDefersForReturn(c, code, context, state, statementReturn)
                if stack > maxStack {
                    maxStack = stack
                }
            }
            code.Codes[code.CodeLength] = cg.OP_return
            code.CodeLength++
            return
        }
        if len(context.function.Type.ReturnList) == 1 {
            if len(statementReturn.Expressions) > 0 {
                maxStack = this.BuildExpression.build(c, code, statementReturn.Expressions[0], context, state)
            }
            // execute defer first
            if len(statementReturn.defers) > 0 {
                //return value  is on stack,  store to local var
                if len(statementReturn.Expressions) > 0 {
                    this.storeLocalVar(c, code, context.function.Type.ReturnList[0])
                }
                stack := this.buildDefersForReturn(c, code, context, state, statementReturn)
                if stack > maxStack {
                    maxStack = stack
                }
                //restore the stack
                if len(statementReturn.Expressions) > 0 { //restore stack
                    this.loadLocalVar(c, code, context.function.Type.ReturnList[0])
                }
            }
            // in this case,load local var is not under exception handle,should be ok
            if len(statementReturn.Expressions) == 0 {
                this.loadLocalVar(c, code, context.function.Type.ReturnList[0])
            }
            switch context.function.Type.ReturnList[0].Type.Type {
            case ast.VariableTypeBool:
                fallthrough
            case ast.VariableTypeByte:
                fallthrough
            case ast.VariableTypeShort:
                fallthrough
            case ast.VariableTypeEnum:
                fallthrough
            case ast.VariableTypeChar:
                fallthrough
            case ast.VariableTypeInt:
                code.Codes[code.CodeLength] = cg.OP_ireturn
            case ast.VariableTypeLong:
                code.Codes[code.CodeLength] = cg.OP_lreturn
            case ast.VariableTypeFloat:
                code.Codes[code.CodeLength] = cg.OP_freturn
            case ast.VariableTypeDouble:
                code.Codes[code.CodeLength] = cg.OP_dreturn
            default:
                code.Codes[code.CodeLength] = cg.OP_areturn
            }
            code.CodeLength++
            return
        }
        //multi returns
        if len(statementReturn.Expressions) > 0 {
            if len(statementReturn.Expressions) == 1 {
                maxStack = this.BuildExpression.build(c, code,
                    statementReturn.Expressions[0], context, state)
            } else {
                maxStack = this.BuildExpression.buildExpressions(c, code,
                    statementReturn.Expressions, context, state)
            }
        }
        if len(statementReturn.defers) > 0 {
            //store a simple var,should be no exception
            if len(statementReturn.Expressions) > 0 {
                copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject,
                    context.multiValueVarOffset)...)
            }
            stack := this.buildDefersForReturn(c, code, context, state, statementReturn)
            if stack > maxStack {
                maxStack = stack
            }
            //restore the stack
            if len(statementReturn.Expressions) > 0 {
                copyOPs(code,
                    loadLocalVariableOps(ast.VariableTypeObject,
                        context.multiValueVarOffset)...)
            }
        }
        // return value is on stack
        if len(statementReturn.Expressions) > 0 {
            code.Codes[code.CodeLength] = cg.OP_areturn
            code.CodeLength++
            return
        }
        stack := this.buildReturnFromReturnVars(c, code, context)
        if stack > maxStack {
            maxStack = stack
        }
        return
    }

    fn  buildReturnFromReturnVars(c cg.ClassHighLevel,
        code cg.AttributeCode, context Context) -> (maxStack char) {
        if context.function.Type.VoidReturn() { // when has no return,should not call this function
            return
        }
        if len(context.function.Type.ReturnList) == 1 {
            this.loadLocalVar(c, code, context.function.Type.ReturnList[0])
            maxStack = jvmSlotSize(context.function.Type.ReturnList[0].Type)
            switch context.function.Type.ReturnList[0].Type.Type {
            case ast.VariableTypeBool , ast.VariableTypeByte ,ast.VariableTypeShort,
              ast.VariableTypeChar, ast.VariableTypeEnum ,ast.VariableTypeInt   :
                code.Codes[code.CodeLength] = cg.OP_ireturn
            case ast.VariableTypeLong:
                code.Codes[code.CodeLength] = cg.OP_lreturn
            case ast.VariableTypeFloat:
                code.Codes[code.CodeLength] = cg.OP_freturn
            case ast.VariableTypeDouble:
                code.Codes[code.CodeLength] = cg.OP_dreturn
            default:
                code.Codes[code.CodeLength] = cg.OP_areturn
            }
            code.CodeLength++
            return
        }
        //multi returns
        //new a array list
        loadInt32(c, code, int(len(context.function.Type.ReturnList)))
        code.Codes[code.CodeLength] = cg.OP_anewarray
        c.InsertClassConst(javaRootClass, code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
        maxStack = 1 // max stack is
        index := int(0)
        for _, v := range context.function.Type.ReturnList {
            currentStack := char(1)
            code.Codes[code.CodeLength] = cg.OP_dup
            code.CodeLength++
            currentStack++
            this.loadLocalVar(c, code, v)
            if t := currentStack + jvmSlotSize(v.Type); t > maxStack {
                maxStack = t
            }
            if v.Type.isPointer() == false {
                TypeConverterAndPrimitivePacker.packPrimitives(c, code, v.Type)
            }
            loadInt32(c, code, index)
            if 4 > maxStack {
                maxStack = 4
            }
            code.Codes[code.CodeLength] = cg.OP_swap
            code.Codes[code.CodeLength+1] = cg.OP_aastore
            code.CodeLength += 2
            index++
        }
        code.Codes[code.CodeLength] = cg.OP_areturn
        code.CodeLength++
        return
    }

    fn  buildDefersForReturn(c cg.ClassHighLevel, code cg.AttributeCode,
        context Context, from StackMapState,
        statementReturn ast.StatementReturn) -> (maxStack char) {
        if len(statementReturn.defers) == 0 {
            return
        }
        code.Codes[code.CodeLength] = cg.OP_aconst_null
        code.CodeLength++
        if 1 > maxStack {
            maxStack = 1
        }
        index := len(statementReturn.defers) - 1
        for index >= 0 { // build defer,cannot have return statement is defer
            state := statementReturn.defers[index].StackMapState.(StackMapState)
            state = new StackMapState(state) // clone
            state.addTop(from)
            state.pushStack(c, state.newObjectVariableType(throwableClass))
            context.MakeStackMap(code, state, code.CodeLength)
            e := new cg.ExceptionTable()
            e.StartPc = char(statementReturn.defers[index].StartPc)
            e.EndPc = char(code.CodeLength)
            e.HandlerPc = char(code.CodeLength)
            if statementReturn.defers[index].ExceptionClass == null {
                e.CatchType = c.InsertClassConst(ast.DefaultExceptionClass)
            } else {
                e.CatchType = c.InsertClassConst(statementReturn.defers[index].ExceptionClass.name) // custom c
            }
            code.Exceptions = append(code.Exceptions, e)
            //expect exception on stack
            copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject,
                context.exceptionVarOffset)...) // this code will make_node_objects stack is empty
            state.popStack(1)
            // build block
            context.Defer = statementReturn.defers[index]
            this.buildBlock(c, code, statementReturn.defers[index].Block, context, state)
            from.addTop(state)
            context.Defer = null
            statementReturn.defers[index].ResetLabels()
            //if need throw
            copyOPs(code, loadLocalVariableOps(ast.VariableTypeObject, context.exceptionVarOffset)...)
            code.Codes[code.CodeLength] = cg.OP_dup
            code.CodeLength++
            if 2 > maxStack {
                maxStack = 2
            }
            state.pushStack(c, state.newObjectVariableType(throwableClass))
            context.MakeStackMap(code, state, code.CodeLength+6)
            context.MakeStackMap(code, state, code.CodeLength+7)
            state.popStack(1)
            code.Codes[code.CodeLength] = cg.OP_ifnonnull
            binary.BigEndian.putChar(code.Codes[code.CodeLength+1:code.CodeLength+3], 6)
            code.Codes[code.CodeLength+3] = cg.OP_goto
            binary.BigEndian.putChar(code.Codes[code.CodeLength+4:code.CodeLength+6], 4) // goto pop
            code.Codes[code.CodeLength+6] = cg.OP_athrow
            code.Codes[code.CodeLength+7] = cg.OP_pop // pop exception on stack
            code.CodeLength += 8
            if index != 0 {
                code.Codes[code.CodeLength] = cg.OP_aconst_null
                code.CodeLength++
            } else {
                //exception that have been handled
                if len(statementReturn.Expressions) > 0 && len(context.function.Type.ReturnList) > 1 {
                    //load when function have multi returns if read to end
                    copyOPs(code, loadLocalVariableOps(ast.VariableTypeObject, context.multiValueVarOffset)...)
                    exit := new cg.Exit(cg.OP_ifnonnull, code)
                    this.buildReturnFromReturnVars(c, code, context)
                    context.MakeStackMap(code, state, code.CodeLength)
                    writeExits([]cg.Exit{exit}, code.CodeLength)
                }
            }
            index--
        }
        return
    }


}

