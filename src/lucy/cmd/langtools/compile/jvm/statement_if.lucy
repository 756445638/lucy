

func (this *BuildPackage) buildIfStatement(
	c cg.ClassHighLevel,
	code cg.AttributeCode,
	s *ast.StatementIf,
	context Context,
	state StackMapState) (maxStack char) {
	ifState := (&StackMapState{}).initFromLast(state)
	defer state.addTop(ifState)
	for _, v := range s.PrefixExpressions {
		stack := this.BuildExpression.build(class, code, v, context, ifState)
		if stack > maxStack {
			maxStack = stack
		}
	}
	trueBlockState := (&StackMapState{}).initFromLast(ifState)
	stack, exit :=
		this.BuildExpression.buildConditionNotOk(class, code, context, trueBlockState, s.Condition)
	if stack > maxStack {
		maxStack = stack
	}
	this.buildBlock(class, code, &s.Block, context, trueBlockState)
	ifState.addTop(trueBlockState)
	if s.Else != null || len(s.ElseIfList) > 0 {
		if s.Block.NotExecuteToLastStatement == false {
			s.Exits = append(s.Exits, (&cg.Exit{}).Init(cg.OP_goto, code))
		}
	}
	for k, v := range s.ElseIfList {
		context.MakeStackMap(code, ifState, code.CodeLength) // state is not change,all block var should be access from outside
		writeExits([]*cg.Exit{exit}, code.CodeLength)
		elseIfState := (&StackMapState{}).initFromLast(ifState)
		stack, exit =
			this.BuildExpression.buildConditionNotOk(class, code, context, elseIfState, v.Condition)
		if stack > maxStack {
			maxStack = stack
		}
		this.buildBlock(class, code, v.Block, context, elseIfState)
		if s.Else != null || k != len(s.ElseIfList)-1 {
			if v.Block.NotExecuteToLastStatement == false {
				s.Exits = append(s.Exits, (&cg.Exit{}).Init(cg.OP_goto, code))
			}
		}
		// when done
		ifState.addTop(elseIfState)
	}
	context.MakeStackMap(code, ifState, code.CodeLength)
	writeExits([]*cg.Exit{exit}, code.CodeLength)
	if s.Else != null {
		elseBlockState := (&StackMapState{}).initFromLast(ifState)
		this.buildBlock(class, code, s.Else, context, elseBlockState)
		ifState.addTop(elseBlockState)
	}
	return
}
