
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"

class BuildIf {
    eb BuildExpression
    bb BuildBlock 
    
    fn BuildIf(eb BuildExpression , bb BuildBlock ){
        this.super()
        this.eb = eb
        this.bb = bb
    }

    fn buildIfStatement(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        s ast.StatementIf,
        context Context,
        state StackMapState) ->(maxStack char) {
        ifState := new StackMapState(state)
        defer state.addTop(ifState)
        for _, v := range s.prefixExpressions {
            stack := this.eb.build(c, code, v, context, ifState)
            if stack > maxStack {
                maxStack = stack
            }
        }
        trueBlockState := new StackMapState(ifState)
        stack, exit :=
            this.bb.buildConditionNotOk(c, code, context, trueBlockState, s.condition)
        if stack > maxStack {
            maxStack = stack
        }
        this.bb.buildBlock(c, code, s.block, context, trueBlockState)
        ifState.addTop(trueBlockState)
        if s.Else != null || len(s.elseIfList) > 0 {
            if s.block.notExecuteToLastStatement == false {
                s.exits.append(new cg.Exit(cg.OP_goto, code))
            }
        }
        for k, v := range s.elseIfList {
            context.MakeStackMap(code, ifState, code.codeLength) // state is not change,all block var should be access from outside
            writeExits([]cg.Exit{exit}, code.codeLength)
            elseIfState := new StackMapState(ifState)
            stack, exit =
                this.bb.buildConditionNotOk(c, code, context, elseIfState, v.condition)
            if stack > maxStack {
                maxStack = stack
            }
            this.bb.buildBlock(c, code, v.block, context, elseIfState)
            if s.Else != null || k != len(s.elseIfList)-1 {
                if v.block.notExecuteToLastStatement == false {
                    s.exits.append( new cg.Exit(cg.OP_goto, code))
                }
            }
            // when done
            ifState.addTop(elseIfState)
        }
        context.MakeStackMap(code, ifState, code.codeLength)
        writeExits([]cg.Exit{exit}, code.codeLength)
        if s.Else != null {
            elseBlockState := new StackMapState(ifState)
            this.bb.buildBlock(c, code, s.Else, context, elseBlockState)
            ifState.addTop(elseBlockState)
        }
        return
    }

}


