
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"

class BuildIf {

    fn buildIfStatement(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        s ast.StatementIf,
        context Context,
        state StackMapState) ->(maxStack char) {
        ifState := new StackMapState(state)
        defer state.addTop(ifState)
        for _, v := range s.PrefixExpressions {
            stack := this.BuildExpression.build(c, code, v, context, ifState)
            if stack > maxStack {
                maxStack = stack
            }
        }
        trueBlockState := new StackMapState(ifState)
        stack, exit :=
            this.BuildExpression.buildConditionNotOk(c, code, context, trueBlockState, s.Condition)
        if stack > maxStack {
            maxStack = stack
        }
        this.buildBlock(c, code, s.Block, context, trueBlockState)
        ifState.addTop(trueBlockState)
        if s.Else != null || len(s.ElseIfList) > 0 {
            if s.Block.NotExecuteToLastStatement == false {
                s.Exits = append(s.Exits, new cg.Exit(cg.OP_goto, code))
            }
        }
        for k, v := range s.ElseIfList {
            context.MakeStackMap(code, ifState, code.CodeLength) // state is not change,all block var should be access from outside
            writeExits([]cg.Exit{exit}, code.CodeLength)
            elseIfState := new StackMapState(ifState)
            stack, exit =
                this.BuildExpression.buildConditionNotOk(c, code, context, elseIfState, v.Condition)
            if stack > maxStack {
                maxStack = stack
            }
            this.buildBlock(c, code, v.Block, context, elseIfState)
            if s.Else != null || k != len(s.ElseIfList)-1 {
                if v.Block.NotExecuteToLastStatement == false {
                    s.Exits = append(s.Exits, new cg.Exit(cg.OP_goto, code))
                }
            }
            // when done
            ifState.addTop(elseIfState)
        }
        context.MakeStackMap(code, ifState, code.CodeLength)
        writeExits([]cg.Exit{exit}, code.CodeLength)
        if s.Else != null {
            elseBlockState := new StackMapState(ifState)
            this.buildBlock(c, code, s.Else, context, elseBlockState)
            ifState.addTop(elseBlockState)
        }
        return
    }

}


