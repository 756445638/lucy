// all rights reserved , check the LICENSE file

import "lucy/cmd/langtools/compile/ast"
import "lucy/jvm/cg"
import "lucy/binary"

public class DefaultValueParse {
    static fn encode(
        c cg.ClassHighLevel,
        f ast.Function) -> (dp cg.AttributeDefaultParameters) {
        dp = new cg.AttributeDefaultParameters()
        dp.start = char(f.defaultValueStartAt)
        dp.constants = []char{}
        for i := dp.start ; i < char(len(f.Type.parameterList)) ; i++ {
            switch f.Type.parameterList[i].defaultValueExpression.Type {
                case ast.ExpressionTypeBool:
                    if f.Type.parameterList[i].defaultValueExpression.boolValue {
                        dp.constants.append(c.Class.insertIntConst(1))
                    } else {
                        dp.constants.append(c.Class.insertIntConst(0))
                    }
                case ast.ExpressionTypeByte,
                    ast.ExpressionTypeShort,
                    ast.ExpressionTypeChar,
                    ast.ExpressionTypeInt:
                    t := f.Type.parameterList[i].defaultValueExpression.longValue
                    dp.constants.append(c.Class.insertIntConst(int(t)))
                case ast.ExpressionTypeLong:
                    dp.constants.append(c.Class.insertLongConst(f.Type.parameterList[i].defaultValueExpression.longValue))
                case ast.ExpressionTypeFloat:
                    dp.constants.append(c.Class.insertFloatConst(float(f.Type.parameterList[i].defaultValueExpression.doubleValue)))
                case ast.ExpressionTypeDouble:
                    dp.constants.append(c.Class.insertDoubleConst(f.Type.parameterList[i].defaultValueExpression.doubleValue))
                case ast.ExpressionTypeString:
                    dp.constants.append(c.Class.insertStringConst(f.Type.parameterList[i].defaultValueExpression.stringValue))
            }
        }
    }

    public static fn decode(c cg.Class , f ast.Function , dp cg.AttributeDefaultParameters) {
        f.haveDefaultValue = true
        f.defaultValueStartAt = int(dp.start)
        for i := char(0) ; i < char(len(dp.constants)) ; i++ {
            v := f.Type.parameterList[dp.start + i]
            v.defaultValueExpression = new ast.Expression()
            v.defaultValueExpression.value = v.Type
            switch v.Type.Type {
                case ast.VariableTypeBool:
                    v.defaultValueExpression.Type = ast.ExpressionTypeBool
                    v.defaultValueExpression.boolValue =
                        binary.BigEndian.getInt(c.constPools[dp.constants[i]].info) != 0
                case ast.VariableTypeByte:
                    v.defaultValueExpression.Type = ast.ExpressionTypeByte
                    v.defaultValueExpression.longValue =
                        long(binary.BigEndian.getInt(c.constPools[dp.constants[i]].info))
                case ast.VariableTypeShort:
                    v.defaultValueExpression.Type = ast.ExpressionTypeShort
                    v.defaultValueExpression.longValue =
                        long(binary.BigEndian.getInt(c.constPools[dp.constants[i]].info))
                case ast.VariableTypeChar:
                    v.defaultValueExpression.Type = ast.ExpressionTypeChar
                    v.defaultValueExpression.longValue =
                        long(binary.BigEndian.getInt(c.constPools[dp.constants[i]].info))
                case ast.VariableTypeInt:
                    v.defaultValueExpression.Type = ast.ExpressionTypeInt
                    v.defaultValueExpression.longValue =
                        long(binary.BigEndian.getInt(c.constPools[dp.constants[i]].info))
                case ast.VariableTypeLong:
                    v.defaultValueExpression.Type = ast.ExpressionTypeLong
                    v.defaultValueExpression.longValue =
                        long(binary.BigEndian.getLong(c.constPools[dp.constants[i]].info))
                case ast.VariableTypeFloat:
                    v.defaultValueExpression.Type = ast.ExpressionTypeFloat
                    v.defaultValueExpression.doubleValue =
                        double(binary.BigEndian.getInt(c.constPools[dp.constants[i]].info))
                case ast.VariableTypeDouble:
                    v.defaultValueExpression.Type = ast.ExpressionTypeDouble
                    v.defaultValueExpression.doubleValue =
                        double(binary.BigEndian.getInt(c.constPools[dp.constants[i]].info))
                case ast.VariableTypeString:
                    v.defaultValueExpression.Type = ast.ExpressionTypeString
                    utf8Index := binary.BigEndian.getChar(c.constPools[dp.constants[i]].info)
                    v.defaultValueExpression.stringValue =
                        string(c.constPools[utf8Index].info)
            }
        }
    }
}


