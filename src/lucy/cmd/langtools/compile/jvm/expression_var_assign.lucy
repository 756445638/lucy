
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"


class BuildExpressionVarAssign {

    eb BuildExpression
    fn BuildExpressionVarAssign(eb BuildExpression){
        this.super()
        this.eb = eb
    }
    
    fn buildVarAssign(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        vs := e.Data.(ast.ExpressionVarAssign)
        stackLength := len(state.Stacks)
        defer   {
            state.popStack(len(state.Stacks) - stackLength)
        }
        if len(vs.Lefts) == 1 {
            v := vs.Lefts[0].Data.(ast.ExpressionIdentifier).Variable
            //fmt.Println(v.Name, v.Pos.ErrMsgPrefix())
            currentStack := char(0)
            if v.BeenCapturedAsLeftValue > 0 {
                closure.createClosureVar(c, code, v.Type)
                code.Codes[code.CodeLength] = cg.OP_dup
                code.CodeLength++
                currentStack = 2
                obj := state.newObjectVariableType(closure.getMeta(v.Type.Type).className)
                state.pushStack(c, obj)
                state.pushStack(c, obj)
            }
            stack := this.eb.build(c, code, vs.InitValues[0], context, state)
            if t := currentStack + stack; t > maxStack {
                maxStack = t
            }
            if v.IsGlobal {
                this.eb.storeGlobalVariable(c, code, v)
            } else {
                v.LocalValOffset = code.MaxLocals
                this.eb.storeLocalVar(c, code, v)
                if v.BeenCapturedAsLeftValue > 0 {
                    code.MaxLocals++
                    copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject, v.LocalValOffset)...)
                    state.appendLocals(c, state.newObjectVariableType(closure.getMeta(v.Type.Type).className))
                } else {
                    code.MaxLocals += jvmSlotSize(v.Type)
                    state.appendLocals(c, v.Type)
                }
            }
            return
        }
        if len(vs.InitValues) == 1 {
            maxStack = this.eb.build(c, code, vs.InitValues[0], context, state)
        } else {
            maxStack = this.buildExpressions(c, code, vs.InitValues, context, state)
        }
        autoVar := new MultiValueAutoVar()(c, code, state)
        for k, v := range vs.Lefts {
            if v.Type != ast.ExpressionTypeIdentifier {
                stack, remainStack, ops, _ := this.getLeftValue(c, code, v, context, state)
                if stack > maxStack {
                    maxStack = stack
                }
                if t := remainStack + autoVar.unPack(c, code, k, v.Value); t > maxStack {
                    maxStack = t
                }
                copyOPs(code, ops...)
                continue
            }
            //identifier
            identifier := v.Data.(ast.ExpressionIdentifier)
            if identifier.Name == ast.UnderScore {
                continue
            }
            variable := identifier.Variable
            if variable.IsGlobal {
                stack := autoVar.unPack(c, code, k, variable.Type)
                if stack > maxStack {
                    maxStack = stack
                }
                this.BuildPackage.storeGlobalVariable(c, code, variable)
                continue
            }
            //this variable not been captured,also not declared here
            if vs.IfDeclaredBefore[k] {
                if variable.BeenCapturedAsLeftValue > 0 {
                    copyOPs(code, loadLocalVariableOps(ast.VariableTypeObject, variable.LocalValOffset)...)
                    stack := autoVar.unPack(c, code, k, variable.Type)
                    if t := 1 + stack; t > maxStack {
                        maxStack = t
                    }
                } else {
                    stack := autoVar.unPack(c, code, k, variable.Type)
                    if stack > maxStack {
                        maxStack = stack
                    }
                }
                this.BuildPackage.storeLocalVar(c, code, variable)
            } else {
                variable.LocalValOffset = code.MaxLocals
                currentStack := char(0)
                if variable.BeenCapturedAsLeftValue > 0 {
                    code.MaxLocals++
                    stack := closure.createClosureVar(c, code, variable.Type)
                    if stack > maxStack {
                        maxStack = stack
                    }
                    code.Codes[code.CodeLength] = cg.OP_dup
                    code.CodeLength++
                    if 2 > maxStack {
                        maxStack = 2
                    }
                    copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject, variable.LocalValOffset)...)
                    currentStack = 1
                    state.appendLocals(c, state.newObjectVariableType(closure.getMeta(variable.Type.Type).className))
                } else {
                    code.MaxLocals += jvmSlotSize(variable.Type)
                    state.appendLocals(c, variable.Type)
                }
                if t := currentStack + autoVar.unPack(c, code, k, variable.Type); t > maxStack {
                    maxStack = t
                }
                this.BuildPackage.storeLocalVar(c, code, variable)
            }
        }
        return
    }



}


