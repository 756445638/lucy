

func (this *BuildPackage) buildForStatement(
	c cg.ClassHighLevel,
	code cg.AttributeCode,
	s *ast.StatementFor,
	context Context,
	state StackMapState) (maxStack char) {
	if s.RangeAttr != null {
		if s.RangeAttr.RangeOn.Value.Type == ast.VariableTypeArray {
			return this.buildForRangeStatementForArray(class, code, s, context, state)
		} else if s.RangeAttr.RangeOn.Value.Type == ast.VariableTypeJavaArray {
			return this.buildForRangeStatementForJavaArray(class, code, s, context, state)
		} else { // for map
			return this.buildForRangeStatementForMap(class, code, s, context, state)
		}
	}
	forState := (&StackMapState{}).initFromLast(state)
	defer func() {
		state.addTop(forState)
	}()
	//init
	if s.Init != null {
		stack := this.BuildExpression.build(class, code, s.Init, context, forState)
		if stack > maxStack {
			maxStack = stack
		}
	}
	var firstTimeExit *cg.Exit
	if s.Condition != null {
		stack, exit := this.BuildExpression.buildConditionNotOk(class, code, context, forState, s.Condition)
		if stack > maxStack {
			maxStack = stack
		}
		s.Exits = append(s.Exits, exit)
		firstTimeExit = (&cg.Exit{}).Init(cg.OP_goto, code) // goto body
	}
	s.ContinueCodeOffset = code.CodeLength
	context.MakeStackMap(code, forState, code.CodeLength)
	if s.Increment != null {
		stack := this.BuildExpression.build(class, code, s.Increment, context, forState)
		if stack > maxStack {
			maxStack = stack
		}
	}
	if s.Condition != null {
		stack, exit := this.BuildExpression.buildConditionNotOk(class, code, context, forState, s.Condition)
		if stack > maxStack {
			maxStack = stack
		}
		s.Exits = append(s.Exits, exit)
	}
	if firstTimeExit != null {
		writeExits([]*cg.Exit{firstTimeExit}, code.CodeLength)
		context.MakeStackMap(code, forState, code.CodeLength)
	}
	this.buildBlock(class, code, s.Block, context, forState)
	if s.Block.NotExecuteToLastStatement == false {
		jumpTo(code, s.ContinueCodeOffset)
	}
	return
}
