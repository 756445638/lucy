
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"


class BuildExpressionOpAssign {
    
    eb BuildExpression
    
    fn BuildExpressionOpAssign(eb BuildExpression){
        this.super()
        this.eb = eb
    }
    
    /*
        s += "456";
    */
    fn  buildStrPlusAssign(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        stackLength := len(state.Stacks)
        defer  {
            state.popStack(len(state.Stacks) - stackLength)
        }
        bin := e.Data.(ast.ExpressionBinary)
        maxStack, remainStack, op, leftValueKind :=
            this.BuildExpressionLeftValue.getLeftValue(c, code, bin.Left, context, state)
        currentStack := remainStack
        stack := this.eb.build(c, code, bin.Left, context, state)
        if t := currentStack + stack; t > maxStack {
            maxStack = t
        }
        state.pushStack(c, bin.Left.Value)
        currentStack += jvmSlotSize(bin.Left.Value)
        stack = this.build(c, code, bin.Right, context, state)
        if t := currentStack + stack; t > maxStack {
            maxStack = t
        }
        code.Codes[code.CodeLength] = cg.OP_invokevirtual
        c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
            javaStringClass,
            `concat`,
            "(Ljava/lang/String;)Ljava/lang/String;"
        ), code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
        if e.IsStatementExpression == false {
            if t := currentStack +
                this.dupStackLeaveValueBelow(code, leftValueKind, e.Value); t > maxStack {
                maxStack = t
            }
        }
        //copy op
        copyOPs(code, op...)
        return
    }
    fn  buildOpAssign(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        length := len(state.Stacks)
        defer   {
            state.popStack(len(state.Stacks) - length)
        }
        bin := e.Data.(ast.ExpressionBinary)
        if bin.Left.Value.Type == ast.VariableTypeString {
            return this.buildStrPlusAssign(c, code, e, context, state)
        }
        maxStack, remainStack, op, leftValueKind := this.getLeftValue(c, code, bin.Left, context, state)
        //left value must can be used as right value,
        stack := this.build(c, code, bin.Left, context, state) // load it`s value
        if t := stack + remainStack; t > maxStack {
            maxStack = t
        }
        state.pushStack(c, e.Value)
        currentStack := jvmSlotSize(e.Value) + remainStack // incase int -> long
        stack = this.build(c, code, bin.Right, context, state)
        if t := currentStack + stack; t > maxStack {
            maxStack = t
        }
        switch bin.Left.Value.Type {
        case ast.VariableTypeByte:
            if e.Type == ast.ExpressionTypePlusAssign {
                code.Codes[code.CodeLength] = cg.OP_iadd
                code.Codes[code.CodeLength+1] = cg.OP_i2b
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeMinusAssign {
                code.Codes[code.CodeLength] = cg.OP_isub
                code.Codes[code.CodeLength+1] = cg.OP_i2b
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeMulAssign {
                code.Codes[code.CodeLength] = cg.OP_imul
                code.Codes[code.CodeLength+1] = cg.OP_i2b
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeDivAssign {
                code.Codes[code.CodeLength] = cg.OP_idiv
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeModAssign {
                code.Codes[code.CodeLength] = cg.OP_irem
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeAndAssign {
                code.Codes[code.CodeLength] = cg.OP_iand
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeOrAssign {
                code.Codes[code.CodeLength] = cg.OP_ior
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeLshAssign {
                code.Codes[code.CodeLength] = cg.OP_ishl
                code.Codes[code.CodeLength+1] = cg.OP_i2b
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeRshAssign {
                code.Codes[code.CodeLength] = cg.OP_ishr
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeXorAssign {
                code.Codes[code.CodeLength] = cg.OP_ixor
                code.CodeLength++
            }
        case ast.VariableTypeShort:
            if e.Type == ast.ExpressionTypePlusAssign {
                code.Codes[code.CodeLength] = cg.OP_iadd
                code.Codes[code.CodeLength+1] = cg.OP_i2s
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeMinusAssign {
                code.Codes[code.CodeLength] = cg.OP_isub
                code.Codes[code.CodeLength+1] = cg.OP_i2s
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeMulAssign {
                code.Codes[code.CodeLength] = cg.OP_imul
                code.Codes[code.CodeLength+1] = cg.OP_i2s
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeDivAssign {
                code.Codes[code.CodeLength] = cg.OP_idiv
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeModAssign {
                code.Codes[code.CodeLength] = cg.OP_irem
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeAndAssign {
                code.Codes[code.CodeLength] = cg.OP_iand
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeOrAssign {
                code.Codes[code.CodeLength] = cg.OP_ior
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeLshAssign {
                code.Codes[code.CodeLength] = cg.OP_ishl
                code.Codes[code.CodeLength+1] = cg.OP_i2s
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeRshAssign {
                code.Codes[code.CodeLength] = cg.OP_ishr
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeXorAssign {
                code.Codes[code.CodeLength] = cg.OP_ixor
                code.CodeLength++
            }
        case ast.VariableTypeChar:
            if e.Type == ast.ExpressionTypePlusAssign {
                code.Codes[code.CodeLength] = cg.OP_iadd
                code.Codes[code.CodeLength+1] = cg.OP_i2c
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeMinusAssign {
                code.Codes[code.CodeLength] = cg.OP_isub
                code.Codes[code.CodeLength+1] = cg.OP_i2c
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeMulAssign {
                code.Codes[code.CodeLength] = cg.OP_imul
                code.Codes[code.CodeLength+1] = cg.OP_i2c
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeDivAssign {
                code.Codes[code.CodeLength] = cg.OP_idiv
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeModAssign {
                code.Codes[code.CodeLength] = cg.OP_irem
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeAndAssign {
                code.Codes[code.CodeLength] = cg.OP_iand
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeOrAssign {
                code.Codes[code.CodeLength] = cg.OP_ior
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeLshAssign {
                code.Codes[code.CodeLength] = cg.OP_ishl
                code.Codes[code.CodeLength+1] = cg.OP_i2c
                code.CodeLength += 2
            } else if e.Type == ast.ExpressionTypeRshAssign {
                code.Codes[code.CodeLength] = cg.OP_ishr
                code.CodeLength++
            } else if e.Type == ast.ExpressionTypeXorAssign {
                code.Codes[code.CodeLength] = cg.OP_ixor
                code.CodeLength++
            }
        case ast.VariableTypeInt:
            if e.Type == ast.ExpressionTypePlusAssign {
                code.Codes[code.CodeLength] = cg.OP_iadd
            } else if e.Type == ast.ExpressionTypeMinusAssign {
                code.Codes[code.CodeLength] = cg.OP_isub
            } else if e.Type == ast.ExpressionTypeMulAssign {
                code.Codes[code.CodeLength] = cg.OP_imul
            } else if e.Type == ast.ExpressionTypeDivAssign {
                code.Codes[code.CodeLength] = cg.OP_idiv
            } else if e.Type == ast.ExpressionTypeModAssign {
                code.Codes[code.CodeLength] = cg.OP_irem
            } else if e.Type == ast.ExpressionTypeAndAssign {
                code.Codes[code.CodeLength] = cg.OP_iand
            } else if e.Type == ast.ExpressionTypeOrAssign {
                code.Codes[code.CodeLength] = cg.OP_ior
            } else if e.Type == ast.ExpressionTypeLshAssign {
                code.Codes[code.CodeLength] = cg.OP_ishl
            } else if e.Type == ast.ExpressionTypeRshAssign {
                code.Codes[code.CodeLength] = cg.OP_ishr
            } else if e.Type == ast.ExpressionTypeXorAssign {
                code.Codes[code.CodeLength] = cg.OP_ixor
            }
            code.CodeLength++
        case ast.VariableTypeLong:
            if e.Type == ast.ExpressionTypePlusAssign {
                code.Codes[code.CodeLength] = cg.OP_ladd
            } else if e.Type == ast.ExpressionTypeMinusAssign {
                code.Codes[code.CodeLength] = cg.OP_lsub
            } else if e.Type == ast.ExpressionTypeMulAssign {
                code.Codes[code.CodeLength] = cg.OP_lmul
            } else if e.Type == ast.ExpressionTypeDivAssign {
                code.Codes[code.CodeLength] = cg.OP_ldiv
            } else if e.Type == ast.ExpressionTypeModAssign {
                code.Codes[code.CodeLength] = cg.OP_lrem
            } else if e.Type == ast.ExpressionTypeAndAssign {
                code.Codes[code.CodeLength] = cg.OP_land
            } else if e.Type == ast.ExpressionTypeOrAssign {
                code.Codes[code.CodeLength] = cg.OP_lor
            } else if e.Type == ast.ExpressionTypeLshAssign {
                code.Codes[code.CodeLength] = cg.OP_lshl
            } else if e.Type == ast.ExpressionTypeRshAssign {
                code.Codes[code.CodeLength] = cg.OP_lshr
            } else if e.Type == ast.ExpressionTypeXorAssign {
                code.Codes[code.CodeLength] = cg.OP_lxor
            }
            code.CodeLength++
        case ast.VariableTypeFloat:
            if e.Type == ast.ExpressionTypePlusAssign {
                code.Codes[code.CodeLength] = cg.OP_fadd
            } else if e.Type == ast.ExpressionTypeMinusAssign {
                code.Codes[code.CodeLength] = cg.OP_fsub
            } else if e.Type == ast.ExpressionTypeMulAssign {
                code.Codes[code.CodeLength] = cg.OP_fmul
            } else if e.Type == ast.ExpressionTypeDivAssign {
                code.Codes[code.CodeLength] = cg.OP_fdiv
            } else if e.Type == ast.ExpressionTypeModAssign {
                code.Codes[code.CodeLength] = cg.OP_frem
            }
            code.CodeLength++
        case ast.VariableTypeDouble:
            if e.Type == ast.ExpressionTypePlusAssign {
                code.Codes[code.CodeLength] = cg.OP_dadd
            } else if e.Type == ast.ExpressionTypeMinusAssign {
                code.Codes[code.CodeLength] = cg.OP_dsub
            } else if e.Type == ast.ExpressionTypeMulAssign {
                code.Codes[code.CodeLength] = cg.OP_dmul
            } else if e.Type == ast.ExpressionTypeDivAssign {
                code.Codes[code.CodeLength] = cg.OP_ddiv
            } else if e.Type == ast.ExpressionTypeModAssign {
                code.Codes[code.CodeLength] = cg.OP_drem
            }
            code.CodeLength++
        }
        if e.IsStatementExpression == false {
            currentStack += this.dupStackLeaveValueBelow(code, leftValueKind, bin.Left.Value)
            if currentStack > maxStack {
                maxStack = currentStack
            }
        }
        //copy op
        copyOPs(code, op...)
        return
    }

}

