
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"

class BuildExpressionIndex {
    

    eb BuildExpression
    
    fn BuildExpressionIndex(eb BuildExpression){
        this.super()
        this.eb = eb
    }


    fn  buildIndex(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        index := e.data.(ast.ExpressionIndex)
        if index.Expression.value.Type == ast.VariableTypeMap {
            return this.buildMapIndex(c, code, e, context, state)
        }
        if index.Expression.value.Type == ast.VariableTypeString {
            return this.buildStringIndex(c, code, e, context, state)
        }
        stackLength := len(state.Stacks)
        defer  {
            state.popStack(len(state.Stacks) - stackLength)
        }
        maxStack = this.eb.build(c, code, index.Expression, context, state)
        state.pushStack(c, index.Expression.value)
        stack := this.eb.build(c, code, index.index, context, state)
        if t := stack + 1; t > maxStack {
            maxStack = t
        }
        if index.Expression.value.Type == ast.VariableTypeArray {
            meta := ArrayMetas[e.value.Type]
            code.Codes[code.CodeLength] = cg.OP_invokevirtual
            c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                meta.className,
                "get",
               meta.getMethodDescription
            ), code.Codes[code.CodeLength+1:code.CodeLength+3])
            code.CodeLength += 3
            if e.value.isPointer() && e.value.Type != ast.VariableTypeString {
                TypeConverterAndPrimitivePacker.castPointer(c, code, e.value)
            }
        } else {
            switch e.value.Type {
            case ast.VariableTypeBool, ast.VariableTypeByte:
                code.Codes[code.CodeLength] = cg.OP_baload
            case ast.VariableTypeShort:
                code.Codes[code.CodeLength] = cg.OP_saload
            case ast.VariableTypeChar:
                code.Codes[code.CodeLength] = cg.OP_caload
            case ast.VariableTypeEnum ,ast.VariableTypeInt:
                code.Codes[code.CodeLength] = cg.OP_iaload
            case ast.VariableTypeLong:
                code.Codes[code.CodeLength] = cg.OP_laload
            case ast.VariableTypeFloat:
                code.Codes[code.CodeLength] = cg.OP_faload
            case ast.VariableTypeDouble:
                code.Codes[code.CodeLength] = cg.OP_daload
            default:
                code.Codes[code.CodeLength] = cg.OP_aaload
            }
            code.CodeLength++
        }
        return
    }

    fn  buildStringIndex(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        length := len(state.Stacks)
        defer  {
            state.popStack(len(state.Stacks) - length)
        }
        index := e.data.(ast.ExpressionIndex)
        maxStack = this.eb.build(c, code, index.Expression, context, state)
        code.Codes[code.CodeLength] = cg.OP_invokevirtual
        c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
            javaStringClass,
            "getBytes",
            "()[B"
        ), code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
        state.pushStack(c, state.newObjectVariableType("[B"))
        stack := this.eb.build(c, code, index.index, context, state)
        if t := char(1) + stack; t > maxStack {
            maxStack = t
        }
        code.Codes[code.CodeLength] = cg.OP_baload
        code.CodeLength++
        return
    }
    fn  buildMapIndex(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        length := len(state.Stacks)
        defer   {
            state.popStack(len(state.Stacks) - length)
        }
        index := e.data.(ast.ExpressionIndex)
        maxStack = this.eb.build(c, code, index.Expression, context, state)
        currentStack := char(1)
        //build index
        state.pushStack(c, index.Expression.value)
        stack := this.eb.build(c, code, index.index, context, state)
        if t := currentStack + stack; t > maxStack {
            maxStack = t
        }
        currentStack = 2 // mapref kref
        if index.Expression.value.Map.K.isPointer() == false {
            TypeConverterAndPrimitivePacker.packPrimitives(c, code, index.Expression.value.Map.K)
        }
        code.Codes[code.CodeLength] = cg.OP_invokevirtual
        c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
            mapClass,
            "get",
            "(Ljava/lang/Object;)Ljava/lang/Object;"
        ), code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
        state.popStack(1)
        if index.Expression.value.Map.V.Type == ast.VariableTypeEnum {
            TypeConverterAndPrimitivePacker.unPackPrimitives(c, code, index.Expression.value.Map.V)
        } else if index.Expression.value.Map.V.isPointer() {
            TypeConverterAndPrimitivePacker.castPointer(c, code, index.Expression.value.Map.V)
        } else {
            code.Codes[code.CodeLength] = cg.OP_dup // increment the stack
            code.CodeLength++
            if 2 > maxStack { // stack is  ... valueObjectRef valueObjectRef
                maxStack = 2
            }
            noNullExit := new cg.Exit(cg.OP_ifnonnull, code)
            switch index.Expression.value.Map.V.Type {
            case ast.VariableTypeBool ,ast.VariableTypeByte ,ast.VariableTypeShort ,  ast.VariableTypeChar,
                ast.VariableTypeInt:
                code.Codes[code.CodeLength] = cg.OP_pop
                code.Codes[code.CodeLength+1] = cg.OP_iconst_0
                code.CodeLength += 2
            case ast.VariableTypeLong:
                code.Codes[code.CodeLength] = cg.OP_pop
                code.Codes[code.CodeLength+1] = cg.OP_lconst_0
                code.CodeLength += 2
            case ast.VariableTypeFloat:
                code.Codes[code.CodeLength] = cg.OP_pop
                code.Codes[code.CodeLength+1] = cg.OP_fconst_0
                code.CodeLength += 2
            case ast.VariableTypeDouble:
                code.Codes[code.CodeLength] = cg.OP_pop
                code.Codes[code.CodeLength+1] = cg.OP_dconst_0
                code.CodeLength += 2
            }
            nullExit := new cg.Exit(cg.OP_goto, code)
            state.pushStack(c, state.newObjectVariableType(javaRootClass))
            context.MakeStackMap(code, state, code.CodeLength)
            state.popStack(1) // pop java_root_class ref
            writeExits([]cg.Exit{noNullExit}, code.CodeLength)
            TypeConverterAndPrimitivePacker.unPackPrimitives(c, code, index.Expression.value.Map.V)
            writeExits([]cg.Exit{nullExit}, code.CodeLength)
            state.pushStack(c, e.value)
            context.MakeStackMap(code, state, code.CodeLength)
            state.popStack(1)
        }
        return
    }


}
