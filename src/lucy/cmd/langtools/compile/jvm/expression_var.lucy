// all rights reserved , check the LICENSE file


import "lucy/cmd/langtools/compile/ast"
import "lucy/jvm/cg"

class BuildExpressionVar {
    
    eb BuildExpression
    
    fn BuildExpressionVar(eb BuildExpression){
        this.super()
        this.eb = eb
    }

    fn buildVar(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        vs := e.data.(ast.ExpressionVar)
        //
        for _, v := range vs.variables {
            v.localValOffset = code.maxLocals
            if v.beenCapturedAsLeftValue > 0 {
                code.maxLocals++
            } else {
                code.maxLocals += jvmSlotSize(v.Type)
            }
        }
        index := len(vs.variables) - 1
        currentStack := char(0)
        for index >= 0 {
            if vs.variables[index].beenCapturedAsLeftValue > 0 {
                v := vs.variables[index]
                closure.createClosureVar(c, code, v.Type)
                code.codes[code.codeLength] = cg.OP_dup
                code.codeLength++
                closureObj := state.newObjectVariableType(closure.getMeta(v.Type.Type).className)
                state.pushStack(c, closureObj)
                state.pushStack(c, closureObj)
                currentStack += 2
            }
            index--
        }
        index = 0

        for _, v := range vs.initValues {
            if v.haveMultiValue() {
                stack := this.eb.build(c, code, v, context, state)
                if t := currentStack + stack; t > maxStack {
                    maxStack = t
                }
                autoVar := new MultiValueAutoVar(c, code, state)
                for kk, tt := range v.multiValues {
                    stack = autoVar.unPack(c, code, kk, tt)
                    if t := stack + currentStack; t > maxStack {
                        maxStack = t
                    }
                    if vs.variables[index].isGlobal {
                        this.eb.storeGlobalVariable(c, code, vs.variables[index])
                    } else {
                        this.eb.storeLocalVar(c, code, vs.variables[index])
                        if vs.variables[index].beenCapturedAsLeftValue > 0 {
                            copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject,
                                vs.variables[index].localValOffset))
                            state.popStack(2)
                            state.appendLocals(c,
                                state.newObjectVariableType(closure.getMeta(vs.variables[index].Type.Type).className))
                            currentStack -= 2
                        } else {
                            state.appendLocals(c, vs.variables[index].Type)
                        }
                    }
                    index++
                }
                continue
            }
            //
            stack := this.eb.build(c, code, v, context, state)
            if t := currentStack + stack; t > maxStack {
                maxStack = t
            }
            if vs.variables[index].isGlobal {
                this.eb.storeGlobalVariable(c, code, vs.variables[index])
            } else {
                this.eb.storeLocalVar(c, code, vs.variables[index])
                if vs.variables[index].beenCapturedAsLeftValue > 0 {
                    copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject,
                        vs.variables[index].localValOffset))
                    state.popStack(2)
                    state.appendLocals(c,
                        state.newObjectVariableType(closure.getMeta(vs.variables[index].Type.Type).className))
                    currentStack -= 2
                } else {
                    state.appendLocals(c, vs.variables[index].Type)
                }
            }
            index++
        }
        return
    }




}

