// all rights reserved , check the LICENSE file

import "lucy/cmd/langtools/compile/ast"
import "lucy/jvm/cg"

class BuildinFunctionBlackHole {
    buildExpression BuildExpression

    fn BuildinFunctionBlackHole(eb BuildExpression) {
        this.super()
        this.buildExpression = eb
    }

    fn mkBuildInBlackHole(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        call := e.data.(ast.ExpressionFunctionCall)
        for _ , v := range call.args {
            stack := this.buildExpression.build(c , code , v , context , state)
            if stack > maxStack {
                maxStack = stack
            }
            if 1 == jvmSlotSize(v.value) {
                code.codes[code.codeLength] = cg.OP_pop
            } else {
                code.codes[code.codeLength] = cg.OP_pop2
            }
            code.codeLength++
        }
        return
    }

}


