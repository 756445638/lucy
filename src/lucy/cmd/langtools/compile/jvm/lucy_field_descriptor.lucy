

import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"

class LucyFieldSignature {


    static fn Need(variableType ast.Type)->(need bool)  {
        return variableType.Type == ast.VariableTypeMap ||
            variableType.Type == ast.VariableTypeArray ||
            variableType.Type == ast.VariableTypeEnum ||
            variableType.Type == ast.VariableTypeFunction
    }

    static fn Encode(variableType ast.Type) -> (d string) {
        if variableType.Type == ast.VariableTypeMap {
            d = "M" // start token of map
            d += .Encode(variableType.Map.K)
            d += .Encode(variableType.Map.V)
            return d
        }
        if variableType.Type == ast.VariableTypeEnum {
            d = "E"
            d += variableType.Enum.name + ";"
            return d
        }
        if variableType.Type == ast.VariableTypeArray {
            d = "]"
            d += .Encode(variableType.array)
            return d
        }
        if variableType.Type == ast.VariableTypeFunction {
            d = LucyMethodSignature.Encode(variableType.FunctionType)
            return d
        }
        return Descriptor.typeDescriptor(variableType)
    }

    static fn Decode(bs []byte) -> (bsSliced []byte,t ast.Type,err  error) {
        if bs[0] == 'M' {
            bs = bs[1:]
            var kt ast.Type
            bs, kt, err = .Decode(bs)
            if err != null {
                return bs, null, err
            }
            var vt ast.Type
            bs, vt, err = .Decode(bs)
            if err != null {
                return bs, null, err
            }
            m := new ast.Type()
            m.Type = ast.VariableTypeMap
            m.Map = new ast.Map()
            m.Map.K = kt
            m.Map.V = vt
            return bs, m, null
        }
        if bs[0] == 'E' {
            bs = bs[1:]
            a := new ast.Type()
            a.Type = ast.VariableTypeEnum
            index := bytes.index(bs, []byte{';'})
            a.Enum = newast.Enum ()
            a.Enum.name = string(bs[:index])
            bs = bs[index+1:]
            return bs, a, null
        }
        if bs[0] == '(' {
            a := new ast.Type()
            a.Type = ast.VariableTypeFunction
            a.FunctionType = new ast.FunctionType()
            bs, err = LucyMethodSignatureParser.Decode(a.FunctionType, bs)
            if err != null {
                return bs, null, err
            }
            return bs, a, null
        }
        if bs[0] == ']' {
            bs = bs[1:]
            a := new ast.Type()
            a.Type = ast.VariableTypeArray
            bs, a.array, err = .Decode(bs)
            return bs, a, err
        }
        return Descriptor.ParseType(bs)
    }


}

