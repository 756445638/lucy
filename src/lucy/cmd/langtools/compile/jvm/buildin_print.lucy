import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg" 

class BuildinFunctionPrint {

    
    eb BuildExpression
    
    fn BuildinFunctionPrint(eb BuildExpression){
        this.super()
        this.eb = eb
    }

    /*
        function print
    */
    fn mkBuildInPrint(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        call := e.Data.(ast.ExpressionFunctionCall)
        // get stream from stdout
        code.Codes[code.CodeLength] = cg.OP_getstatic
        c.InsertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(
             "java/lang/System",
             "out",
             "Ljava/io/PrintStream;"
        ), code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
        maxStack = 1
        if len(call.Args) == 0 {
            code.Codes[code.CodeLength] = cg.OP_invokevirtual
            c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                "java/io/PrintStream",
                "println",
                "()V"
            ), code.Codes[code.CodeLength+1:code.CodeLength+3])
            code.CodeLength += 3
            return
        }
        length := len(state.Stacks)
        defer   {
            // print have no return value,stack is empty
            state.popStack(len(state.Stacks) - length)
        } 
        state.pushStack(c, state.newObjectVariableType(javaPrintStreamClass))
        if len(call.Args) == 1 {
            stack := this.build(c, code, call.Args[0], context, state)
            if t := 1 + stack; t > maxStack {
                maxStack = t
            }

            switch call.Args[0].Value.Type {
            case ast.VariableTypeBool:
                code.Codes[code.CodeLength] = cg.OP_invokevirtual
                c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                    "java/io/PrintStream",
                    "println",
                    "(Z)V"
                ), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            case ast.VariableTypeChar:
                code.Codes[code.CodeLength] = cg.OP_invokevirtual
                c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                    "java/io/PrintStream",
                    "println",
                    "(C)V"
                ), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            case ast.VariableTypeByte:
                fallthrough
            case ast.VariableTypeShort:
                fallthrough
            case ast.VariableTypeEnum:
                fallthrough
            case ast.VariableTypeInt:
                code.Codes[code.CodeLength] = cg.OP_invokevirtual
                c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                     "java/io/PrintStream",
                     "println",
                     "(I)V"
                ), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            case ast.VariableTypeLong:
                code.Codes[code.CodeLength] = cg.OP_invokevirtual
                c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                     "java/io/PrintStream",
                     "println",
                     "(J)V"
                ), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            case ast.VariableTypeFloat:
                code.Codes[code.CodeLength] = cg.OP_invokevirtual
                c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                     "java/io/PrintStream",
                     "println",
                     "(F)V"
                ), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            case ast.VariableTypeDouble:
                code.Codes[code.CodeLength] = cg.OP_invokevirtual
                c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                     "java/io/PrintStream",
                     "println",
                     "(D)V"
                ), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            case ast.VariableTypeString:
                code.Codes[code.CodeLength] = cg.OP_invokevirtual
                c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                     "java/io/PrintStream",
                     "println",
                     "(Ljava/lang/String;)V"
                ), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            default:
                code.Codes[code.CodeLength] = cg.OP_invokevirtual
                c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                     "java/io/PrintStream",
                     "println",
                     "(Ljava/lang/Object;)V"
                ), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            }

            return
        }
        code.Codes[code.CodeLength] = cg.OP_ldc_w
        ast.TypeInsertStringConst("", code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
        state.pushStack(c, state.newObjectVariableType(javaStringClass))
        defer state.popStack(1)
        for k, v := range call.Args {
            variableType := v.Value
            stack := this.build(c, code, v, context, state)
            if t := 2 + stack; t > maxStack {
                maxStack = t
            }
            if t := 2 + this.stackTop2String(c, code, variableType, context, state); t > maxStack {
                maxStack = t
            }
            code.Codes[code.CodeLength] = cg.OP_invokevirtual
            c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                 javaStringClass,
                 "concat",
                 "(Ljava/lang/String;)Ljava/lang/String;"
            ), code.Codes[code.CodeLength+1:code.CodeLength+3])
            code.CodeLength += 3
            if k != len(call.Args)-1 {
                code.Codes[code.CodeLength] = cg.OP_ldc_w
                ast.TypeInsertStringConst(" ", code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
                if 2 > maxStack {
                    maxStack = 2
                }
                code.Codes[code.CodeLength] = cg.OP_invokevirtual
                c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                     javaStringClass,
                     "concat",
                     "(Ljava/lang/String;)Ljava/lang/String;"
                ), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            }
        }
        // call println
        code.Codes[code.CodeLength] = cg.OP_invokevirtual
        c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
            "java/io/PrintStream",
            "println",
            "(Ljava/lang/String;)V"
        ), code.Codes[code.CodeLength+1:code.CodeLength+3])
        code.CodeLength += 3
        return
    }
}

