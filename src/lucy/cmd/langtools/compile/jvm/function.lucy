
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"

class BuildFunction {

    fn  mkParametersOffset(c cg.ClassHighLevel, code cg.AttributeCode,
        f ast.Function, state StackMapState) {
        for _, v := range f.Type.ParameterList { // insert into locals
            v.LocalValOffset = code.MaxLocals
            code.MaxLocals += jvmSlotSize(v.Type)
            state.appendLocals(c, v.Type)
        }
        if f.Type.VArgs != null {
            f.Type.VArgs.LocalValOffset = code.MaxLocals
            code.MaxLocals++
            state.appendLocals(c, f.Type.VArgs.Type)
        }
    }

    fn  mkCapturedParameters(c cg.ClassHighLevel, code cg.AttributeCode,
        f ast.Function, state StackMapState) -> (maxStack char) {
        for _, v := range f.Type.ParameterList {
            if v.BeenCapturedAsLeftValue == 0 { // not capture
                continue
            }
            stack := closure.createClosureVar(c, code, v.Type)
            if stack > maxStack {
                maxStack = stack
            }
            code.Codes[code.CodeLength] = cg.OP_dup
            code.CodeLength++
            if t := 2 + jvmSlotSize(v.Type); t > maxStack {
                maxStack = t
            }
            copyOPs(code, loadLocalVariableOps(v.Type.Type, v.LocalValOffset)...)
            this.storeLocalVar(c, code, v)
            v.LocalValOffset = code.MaxLocals //rewrite offset
            code.MaxLocals++
            copyOPs(code, storeLocalVariableOps(v.Type.Type, v.LocalValOffset)...)
            state.appendLocals(c, state.newObjectVariableType(closure.getMeta(v.Type.Type).className))
        }
        return
    }

    fn  buildFunctionParameterAndReturnList(c cg.ClassHighLevel, code cg.AttributeCode,
        f ast.Function, context Context, state StackMapState) -> (maxStack char) {
        this.mkParametersOffset(c, code, f, state)
        maxStack = this.mkCapturedParameters(c, code, f, state)
        if f.Type.VoidReturn() == false {
            for _, v := range f.Type.ReturnList {
                currentStack := char(0)
                if v.BeenCapturedAsLeftValue > 0 { //create closure object
                    v.LocalValOffset = code.MaxLocals
                    code.MaxLocals++
                    stack := closure.createClosureVar(c, code, v.Type)
                    if stack > maxStack {
                        maxStack = stack
                    }
                    // then load
                    code.Codes[code.CodeLength] = cg.OP_dup
                    code.CodeLength++
                    if 2 > maxStack {
                        maxStack = 2
                    }
                    copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject, v.LocalValOffset)...)
                    currentStack = 1
                    state.pushStack(c,
                        state.newObjectVariableType(closure.getMeta(v.Type.Type).className))
                } else {
                    v.LocalValOffset = code.MaxLocals
                    code.MaxLocals += jvmSlotSize(v.Type)
                }
                stack := this.BuildExpression.build(c, code, v.DefaultValueExpression, context, state)
                if t := currentStack + stack; t > maxStack {
                    maxStack = t
                }
                this.storeLocalVar(c, code, v)
                if v.BeenCapturedAsLeftValue > 0 {
                    state.popStack(1)
                    state.appendLocals(c, state.newObjectVariableType(closure.getMeta(v.Type.Type).className))
                } else {
                    state.appendLocals(c, v.Type)
                }
            }
        }
        return
    }

    fn  buildFunction(c cg.ClassHighLevel, astClass ast.Class, method cg.MethodHighLevel,
        f ast.Function) {
        context := new Context()
        context.lastStackMapOffset = -1
        context.c = astClass
        context.function = f
        method.Code.Codes = new []byte (65536)
        method.Code.CodeLength = 0
        defer{
            method.Code.Codes = method.Code.Codes[0:method.Code.CodeLength]
        }
        state := new StackMapState()
        if method.AccessFlags&cg.AccMethodStatic == 0 {
            if method.IsConstruction { // construction method
                method.Code.MaxLocals = 1
                t := new cg.StackMapVerificationTypeInfo()
                t.Verify = new cg.StackMapUninitializedThisVariableInfo()
                state.Locals = append(state.Locals, t)
                this.mkParametersOffset(c, method.Code, f, state)
                stack := this.BuildExpression.build(c, method.Code, f.CallFatherConstructionExpression,
                    context, state)
                if stack > method.Code.MaxStack {
                    method.Code.MaxStack = stack
                }
                state.Locals[0] = state.newStackMapVerificationTypeInfo(c, state.newObjectVariableType(ast.TypeName))
                this.mkFieldDefaultValue(c, method.Code, astClass, context, state)
                this.mkCapturedParameters(c, method.Code, f, state)
            } else {
                method.Code.MaxLocals = 1
                state.appendLocals(c, state.newObjectVariableType(ast.TypeName))
            }
        }
        if f.IsGlobalMain() { // main function
            code := method.Code
            code.Codes[code.CodeLength] = cg.OP_new
            meta := ArrayMetas[ast.VariableTypeString]
            c.InsertClassConst(meta.className, code.Codes[code.CodeLength+1:code.CodeLength+3])
            code.Codes[code.CodeLength+3] = cg.OP_dup
            code.CodeLength += 4
            copyOPs(code, loadLocalVariableOps(ast.VariableTypeString, 0)...)
            if 3 > code.MaxStack {
                code.MaxStack = 3
            }
            code.Codes[code.CodeLength] = cg.OP_invokespecial
            c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                meta.className,
                specialMethodInit,
                meta.constructorFuncDescriptor
            ), code.Codes[code.CodeLength+1:code.CodeLength+3])
            code.CodeLength += 3
            copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject, 1)...)
            {
                // String[] java style
                t := new ast.Type()
                t.Type = ast.VariableTypeJavaArray
                t.Array = new ast.Type()
                t.Array.Type = ast.VariableTypeString
                state.appendLocals(c, t)
            }
            method.Code.MaxLocals = 1
        }
        if LucyMethodSignatureParser.Need(f.Type) {
            d := new cg.AttributeLucyMethodDescriptor()
            d.Descriptor = LucyMethodSignature.Encode(f.Type)
            method.AttributeLucyMethodDescriptor = d
        }
        if f.HaveDefaultValue {
            method.AttributeDefaultParameters = DefaultValueParser.Encode(c, f)
        }
        if method.IsConstruction == false {
            if t := this.buildFunctionParameterAndReturnList(c, method.Code, f, context, state); t > method.Code.MaxStack {
                method.Code.MaxStack = t
            }
        }
        {
            method.AttributeMethodParameters = new cg.AttributeMethodParameters()
            for _, v := range f.Type.ParameterList {
                p := new cg.MethodParameter()
                p.Name = v.Name
                p.AccessFlags = cg.MethodParameterTypeAccMandated
                method.AttributeMethodParameters.Parameters = append(method.AttributeMethodParameters.Parameters, p)
            }
        }
        if f.Type.VoidReturn() == false {
            method.AttributeLucyReturnListNames = new cg.AttributeMethodParameters()
            for _, v := range f.Type.ReturnList {
                p := new cg.MethodParameter()
                p.Name = v.Name
                p.AccessFlags = cg.MethodParameterTypeAccMandated
                method.AttributeLucyReturnListNames.Parameters =
                    append(method.AttributeLucyReturnListNames.Parameters, p)
            }
        }
        if len(f.Type.ReturnList) > 1 {
            if t := this.buildFunctionMultiReturnOffset(c, method.Code,
                f, context, state); t > method.Code.MaxStack {
                method.Code.MaxStack = t
            }
        }
        if f.HasDefer {
            context.exceptionVarOffset = method.Code.MaxLocals
            method.Code.MaxLocals++
            method.Code.Codes[method.Code.CodeLength] = cg.OP_aconst_null
            method.Code.CodeLength++
            copyOPs(method.Code, storeLocalVariableOps(ast.VariableTypeObject, context.exceptionVarOffset)...)
            state.appendLocals(c, state.newObjectVariableType(ast.JavaThrowableClass))
        }
        this.buildBlock(c, method.Code, f.Block, context, state)
        return
    }
    fn  buildFunctionMultiReturnOffset(c cg.ClassHighLevel, code cg.AttributeCode,
        f ast.Function, context Context, state StackMapState) -> (maxStack char) {
        code.Codes[code.CodeLength] = cg.OP_aconst_null
        code.CodeLength++
        context.multiValueVarOffset = code.MaxLocals
        code.MaxLocals++
        copyOPs(code, storeLocalVariableOps(ast.VariableTypeObject,
            context.multiValueVarOffset)...)
        state.appendLocals(c, state.newObjectVariableType(javaRootObjectArray))
        maxStack = 1
        return
    }

    fn  mkFieldDefaultValue(c cg.ClassHighLevel, code cg.AttributeCode,
        astClass ast.Class, context Context, state StackMapState) {
        for _, v := range astClass.Fields {
            if v.IsStatic() || v.DefaultValueExpression == null {
                continue
            }
            code.Codes[code.CodeLength] = cg.OP_aload_0
            code.CodeLength++
            state.pushStack(c, state.newObjectVariableType(ast.TypeName))
            stack := this.BuildExpression.build(c, code, v.DefaultValueExpression, context, state)
            if t := 1 + stack; t > code.MaxStack {
                code.MaxStack = t
            }
            state.popStack(1)
            code.Codes[code.CodeLength] = cg.OP_putfield
            c.InsertFieldRefConst(new cg.ConstantInfoFieldrefHighLevel(
                ast.TypeName,
                v.Name,
                Descriptor.typeDescriptor(v.Type)
            ), code.Codes[code.CodeLength+1:code.CodeLength+3])
            code.CodeLength += 3
        }
    }


    fn loadLocalVar(c cg.ClassHighLevel,
        code cg.AttributeCode, v ast.Variable) -> (maxStack char) {
        if v.BeenCapturedAsLeftValue > 0 {
            return closure.loadLocalClosureVar(c, code, v)
        }
        maxStack = jvmSlotSize(v.Type)
        copyOPs(code, loadLocalVariableOps(v.Type.Type, v.LocalValOffset)...)
        return
    }

    fn storeLocalVar(c cg.ClassHighLevel,
        code cg.AttributeCode, v ast.Variable) -> (maxStack char) {
        if v.BeenCapturedAsLeftValue > 0 {
            closure.storeLocalClosureVar(c, code, v)
            return
        }
        maxStack = jvmSlotSize(v.Type)
        copyOPs(code, storeLocalVariableOps(v.Type.Type, v.LocalValOffset)...)
        return
    }


}


