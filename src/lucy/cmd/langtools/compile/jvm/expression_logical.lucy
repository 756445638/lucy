// all rights reserved , check the LICENSE file


import "lucy/cmd/langtools/compile/ast"
import "lucy/jvm/cg"

class BuildExpressionLogical {
    
    buildExpression BuildExpression
    
    fn BuildExpressionLogical(eb BuildExpression){
        this.super()
        this.buildExpression = eb
    }
    
    fn buildLogical(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        bin := e.data.(ast.ExpressionBinary)
        maxStack = this.buildExpression.build(c, code, bin.left, context, state)
        code.codes[code.codeLength] = cg.OP_dup
        code.codeLength++
        if 2 > maxStack { // dup increment stack
            maxStack = 2
        }
        var exit cg.Exit
        if e.Type == ast.ExpressionTypeLogicalOr {
            exit = new cg.Exit(cg.OP_ifne, code)
        } else {
            exit = new cg.Exit(cg.OP_ifeq, code)
        }
        code.codes[code.codeLength] = cg.OP_pop
        code.codeLength++
        stack := this.buildExpression.build(c, code, bin.right, context, state)
        if stack > maxStack {
            maxStack = stack
        }
        state.pushStack(c, e.value)
        writeExits([]cg.Exit{exit}, code.codeLength)
        context.makeStackMapForCode(code, state, code.codeLength)
        state.popStack(1)
        return
    }


}

