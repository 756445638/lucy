
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"

class BuildExpressionLogical {
    
    eb BuildExpression
    
    fn BuildExpressionLogical(eb BuildExpression){
        this.super()
        this.eb = eb
    }
    

    fn buildLogical(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        e ast.Expression,
        context Context,
        state StackMapState) -> (maxStack char) {
        bin := e.Data.(ast.ExpressionBinary)
        maxStack = this.build(c, code, bin.Left, context, state)
        code.Codes[code.CodeLength] = cg.OP_dup
        code.CodeLength++
        if 2 > maxStack { // dup increment stack
            maxStack = 2
        }
        var exit cg.Exit
        if e.Type == ast.ExpressionTypeLogicalOr {
            exit = new cg.Exit(cg.OP_ifne, code)
        } else {
            exit = new cg.Exit(cg.OP_ifeq, code)
        }
        code.Codes[code.CodeLength] = cg.OP_pop
        code.CodeLength++
        stack := this.build(c, code, bin.Right, context, state)
        if stack > maxStack {
            maxStack = stack
        }
        state.pushStack(c, e.Value)
        writeExits([]cg.Exit{exit}, code.CodeLength)
        context.MakeStackMap(code, state, code.CodeLength)
        state.popStack(1)
        return
    }


}

