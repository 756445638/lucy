
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"

class BuildSwitch {

    fn buildSwitchStatement(
        c cg.ClassHighLevel,
        code cg.AttributeCode,
        s ast.StatementSwitch,
        context Context,
        state StackMapState) -> (maxStack char) {
        // if equal,leave 0 on stack
        compare := fn(t ast.Type) {
            switch t.Type {
            case ast.VariableTypeByte:
                fallthrough
            case ast.VariableTypeShort:
                fallthrough
            case ast.VariableTypeEnum:
                fallthrough
            case ast.VariableTypeChar:
                fallthrough
            case ast.VariableTypeInt:
                code.Codes[code.CodeLength] = cg.OP_isub
                code.CodeLength++
            case ast.VariableTypeLong:
                code.Codes[code.CodeLength] = cg.OP_lcmp
                code.CodeLength++
            case ast.VariableTypeFloat:
                code.Codes[code.CodeLength] = cg.OP_fcmpg
                code.CodeLength++
            case ast.VariableTypeDouble:
                code.Codes[code.CodeLength] = cg.OP_dcmpg
                code.CodeLength++
            case ast.VariableTypeString:
                code.Codes[code.CodeLength] = cg.OP_invokevirtual
                c.InsertMethodRefConst(new cg.ConstantInfoMethodrefHighLevel(
                    javaStringClass,
                   "compareTo",
                    "(Ljava/lang/String;)I"
                ), code.Codes[code.CodeLength+1:code.CodeLength+3])
                code.CodeLength += 3
            default:
                context.MakeStackMap(code, state, code.CodeLength+7)
                state.pushStack(c, typeBool)
                context.MakeStackMap(code, state, code.CodeLength+8)
                state.popStack(1)
                code.Codes[code.CodeLength] = cg.OP_if_acmpeq
                binary.BigEndian.PutUint16(code.Codes[code.CodeLength+1:code.CodeLength+3], 7)
                code.Codes[code.CodeLength+3] = cg.OP_iconst_1
                code.Codes[code.CodeLength+4] = cg.OP_goto
                binary.BigEndian.PutUint16(code.Codes[code.CodeLength+5:code.CodeLength+7], 4)
                code.Codes[code.CodeLength+7] = cg.OP_iconst_0
                code.CodeLength += 8
            }
        }
        for _, v := range s.PrefixExpressions {
            stack := this.BuildExpression.build(c, code, v, context, state)
            if stack > maxStack {
                maxStack = stack
            }
        }
        stack := this.BuildExpression.build(c, code, s.Condition, context, state)
        if stack > maxStack {
            maxStack = stack
        }
        //value is on stack
        var notMatch ast.Statement
        size := jvmSlotSize(s.Condition.Value)
        currentStack := size
        state.pushStack(c, s.Condition.Value)
        for _, c := range s.StatementSwitchCases {
            if notMatch != null {
                writeExits([]cg.Exit{notMatch}, code.CodeLength)
                context.MakeStackMap(code, state, code.CodeLength)
            }
            matches := []cg.Exit{}
            for _, ee := range c.Matches {
                if ee.Value.Type == ast.VariableTypeBool {
                    currentStack = size
                    stack := this.BuildExpression.build(c, code, ee, context, state)
                    if t := currentStack + stack; t > maxStack {
                        maxStack = t
                    }
                    matches = append(matches, new cg.Exit(cg.OP_ifne, code)) // comsume result on stack
                } else {
                    currentStack = size
                    // mk stack ready
                    if size == 1 {
                        code.Codes[code.CodeLength] = cg.OP_dup
                    } else {
                        code.Codes[code.CodeLength] = cg.OP_dup2
                    }
                    code.CodeLength++
                    currentStack += size
                    state.pushStack(c, s.Condition.Value)
                    stack := this.BuildExpression.build(c, code, ee, context, state)
                    if t := currentStack + stack; t > maxStack {
                        maxStack = t
                    }
                    state.popStack(1)
                    compare(s.Condition.Value)
                    matches = append(matches, new cg.Exit(cg.OP_ifeq, code)) // comsume result on stack
                }
            }
            // should be goto next,here is no match
            notMatch = new cg.Exit(cg.OP_goto, code)
            // if match goto here
            writeExits(matches, code.CodeLength)
            //before block,pop off stack
            context.MakeStackMap(code, state, code.CodeLength)
            if size == 1 {
                code.Codes[code.CodeLength] = cg.OP_pop
            } else {
                code.Codes[code.CodeLength] = cg.OP_pop2
            }
            code.CodeLength++
            //block is here
            if c.Block != null {
                ss := new StackMapState(state)
                this.buildBlock(c, code, c.Block, context, ss)
                state.addTop(ss)
            }
            if c.Block == null || c.Block.NotExecuteToLastStatement == false {
                s.Exits = append(s.Exits,
                    new cg.Exit(cg.OP_goto, code)) // matched,goto switch outside
            }
        }
        writeExits([]cg.Exit{notMatch}, code.CodeLength)
        context.MakeStackMap(code, state, code.CodeLength)
        if size == 1 {
            code.Codes[code.CodeLength] = cg.OP_pop
        } else {
            code.Codes[code.CodeLength] = cg.OP_pop2
        }
        code.CodeLength++
        state.popStack(1)
        if s.Default != null {
            ss := new StackMapState(state)
            this.buildBlock(c, code, s.Default, context, ss)
            state.addTop(ss)
        }
        return
    }


}


