
import "lucy/cmd/langtools/compile/ast"
import "lucy/cmd/langtools/compile/jvm/cg"


class BuildExpressionIncrement {
	

	eb BuildExpression
    
    fn BuildExpressionIncrement(eb BuildExpression){
        this.super()
        this.eb = eb
    }

	fn  buildSelfIncrement(c cg.ClassHighLevel, code cg.AttributeCode,
		e ast.Expression, context Context, state StackMapState) -> (maxStack char) {
		increment := e.data.(ast.Expression)
		// identifier  and not captured and type`s int
		if identifier, ok := increment.data.(ast.ExpressionIdentifier); ok &&
			increment.Type == ast.ExpressionTypeIdentifier &&
			identifier.Variable.beenCapturedAsLeftValue == 0 &&
			identifier.Variable.Type.Type == ast.VariableTypeInt &&
			identifier.Variable.isGlobal == false {
			if identifier.Variable.localValOffset > 255 { // early check
				panic("over 255")
			}
			if e.isStatementExpression == false { //  need it`s value
				if e.Type == ast.ExpressionTypeIncrement || e.Type == ast.ExpressionTypeDecrement {
					copyOPs(code, loadLocalVariableOps(ast.VariableTypeInt, identifier.Variable.localValOffset)) // load to stack top
					maxStack = 1
				}
			}
			code.Codes[code.CodeLength] = cg.OP_iinc
			code.Codes[code.CodeLength+1] = byte(identifier.Variable.localValOffset)
			if e.IsIncrement() {
				code.Codes[code.CodeLength+2] = 1
			} else { // --
				code.Codes[code.CodeLength+2] = 255 // -1
				code.CodeLength += 3
			}
			code.CodeLength += 3
			if e.isStatementExpression == false { // I still need it`s value
				if e.Type == ast.ExpressionTypePrefixIncrement || e.Type == ast.ExpressionTypePrefixDecrement { // decrement
					copyOPs(code, loadLocalVariableOps(ast.VariableTypeInt, identifier.Variable.localValOffset)) // load to stack top
					maxStack = 1
				}
			}
			return
		}
		stackLength := len(state.Stacks)
		defer  {
			state.popStack(len(state.Stacks) - stackLength)
		}
		maxStack, remainStack, op, leftValueKind :=
			this.getLeftValue(c, code, increment, context, state)
		/*
			left value must can be used as right value
		*/
		stack := this.eb.build(c, code, increment, context, state) // load it`s value
		if t := stack + remainStack; t > maxStack {
			maxStack = t
		}
		currentStack := jvmSlotSize(e.value) + remainStack
		if e.isStatementExpression == false {
			if e.Type == ast.ExpressionTypeIncrement || e.Type == ast.ExpressionTypeDecrement {
				currentStack += this.dupStackLeaveValueBelow(code, leftValueKind, e.value)
				if currentStack > maxStack {
					maxStack = currentStack
				}
			}
		}
		if t := currentStack + jvmSlotSize(e.value); t > maxStack {
			//
			maxStack = t
		}
		switch e.value.Type {
		case ast.VariableTypeByte:
			if e.IsIncrement() {
				code.Codes[code.CodeLength] = cg.OP_iconst_1
			} else {
				code.Codes[code.CodeLength] = cg.OP_iconst_m1
			}
			code.Codes[code.CodeLength+1] = cg.OP_iadd
			code.Codes[code.CodeLength+2] = cg.OP_i2b
			code.CodeLength += 3
		case ast.VariableTypeShort:
			if e.IsIncrement() {
				code.Codes[code.CodeLength] = cg.OP_iconst_1
			} else {
				code.Codes[code.CodeLength] = cg.OP_iconst_m1
			}
			code.Codes[code.CodeLength+1] = cg.OP_iadd
			code.Codes[code.CodeLength+2] = cg.OP_i2s
			code.CodeLength += 3
		case ast.VariableTypeChar:
			if e.IsIncrement() {
				code.Codes[code.CodeLength] = cg.OP_iconst_1
			} else {
				code.Codes[code.CodeLength] = cg.OP_iconst_m1
			}
			code.Codes[code.CodeLength+1] = cg.OP_iadd
			code.Codes[code.CodeLength+2] = cg.OP_i2c
			code.CodeLength += 3
		case ast.VariableTypeInt:
			if e.IsIncrement() {
				code.Codes[code.CodeLength] = cg.OP_iconst_1
			} else {
				code.Codes[code.CodeLength] = cg.OP_iconst_m1
			}
			code.Codes[code.CodeLength+1] = cg.OP_iadd
			code.CodeLength += 2
		case ast.VariableTypeLong:
			if e.IsIncrement() {
				code.Codes[code.CodeLength] = cg.OP_lconst_1
				code.CodeLength++
			} else {
				code.Codes[code.CodeLength] = cg.OP_ldc2_w
				c.InsertLongConst(-1, code.Codes[code.CodeLength+1:code.CodeLength+3])
				code.CodeLength += 3
			}
			code.Codes[code.CodeLength] = cg.OP_ladd
			code.CodeLength++
		case ast.VariableTypeFloat:
			if e.IsIncrement() {
				code.Codes[code.CodeLength] = cg.OP_fconst_1
				code.CodeLength++
			} else {
				code.Codes[code.CodeLength] = cg.OP_ldc_w
				c.InsertFloatConst(-1, code.Codes[code.CodeLength+1:code.CodeLength+3])
				code.CodeLength += 3
			}
			code.Codes[code.CodeLength] = cg.OP_fadd
			code.CodeLength++
		case ast.VariableTypeDouble:
			if e.IsIncrement() {
				code.Codes[code.CodeLength] = cg.OP_dconst_1
				code.CodeLength++
			} else {
				code.Codes[code.CodeLength] = cg.OP_ldc2_w
				c.InsertDoubleConst(-1, code.Codes[code.CodeLength+1:code.CodeLength+3])
				code.CodeLength += 3
			}
			code.Codes[code.CodeLength] = cg.OP_dadd
			code.CodeLength++
		}
		if e.isStatementExpression == false {
			if e.Type == ast.ExpressionTypePrefixIncrement ||
				e.Type == ast.ExpressionTypePrefixDecrement {
				currentStack += this.dupStackLeaveValueBelow(code, leftValueKind, e.value)
				if currentStack > maxStack {
					maxStack = currentStack
				}
			}
		}
		//copy op
		copyOPs(code, op...)
		return
	}

}

