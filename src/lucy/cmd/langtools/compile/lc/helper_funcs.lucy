
import "lucy/cmd/langtools/compile/jvm/cg"
import "lucy/cmd/langtools/compile/ast"


fn parseMethodParameter(c cg.Class, bs []byte, f ast.Function) {
	a := new cg.AttributeMethodParameters()
	a.fromBs(c, bs)
	for k, v := range a.parameters {
		f.Type.parameterList[k].name = v.name
	}
}
fn parseReturnListNames(c cg.Class, bs []byte, f ast.Function) {
	a := new cg.AttributeMethodParameters()
	a.fromBs(c, bs)
	for k, v := range a.parameters {
		f.Type.returnList[k].name = v.name
	}
}

fn loadEnumForFunction(f ast.Function) {
	for _, v := range f.Type.parameterList {
		if v.Type.Type == ast.VariableTypeEnum {
			loadEnumForVariableType(v.Type)
		}
	}
	for _, v := range f.Type.returnList {
		if v.Type.Type == ast.VariableTypeEnum {
			loadEnumForVariableType(v.Type)
		}
	}
}

fn loadEnumForVariableType(v ast.Type)  {
	t, err := loader.LoadImport(v.Enum.name)
	if err != null {
		panic(err)
	}
	if tt, ok := t.(ast.Enum); ok && tt != null {
		v.Enum = tt
	} else {
		panic(sprintf("'%s' is not a enum", v.Enum.name))
	}
}
