

class ClassDecoder {
	bs        []byte
	classFile cg.Class

	
	fn decode(bs []byte) -> (c cg.Class,err error) {
		c.bs = bs
		if binary.BigEndian.getInt(bs) != cg.ClassMagicNumber {
			return null, new error(sprintf("magic number is not right"))
		}
		c.bs = c.bs[4:]
		ret := new cg.Class()
		c.classFile = ret
		//version
		ret.MinorVersion = binary.BigEndian.Uint16(c.bs)
		ret.MajorVersion = binary.BigEndian.Uint16(c.bs[2:])
		c.bs = c.bs[4:]
		ret.ConstPool = []cg.ConstPool{null} // pool start 1
		//const pool
		if err := c.parseConstPool(); err != null {
			return ret, err
		}
		//access flag
		ret.AccessFlag = binary.BigEndian.Uint16(c.bs)
		c.bs = c.bs[2:]
		// this class
		ret.ThisClass = binary.BigEndian.Uint16(c.bs)
		ret.SuperClass = binary.BigEndian.Uint16(c.bs[2:])
		c.bs = c.bs[4:]
		c.parseInterfaces()
		c.parseFields()
		c.parserMethods()
		var err error
		c.classFile.AttributeGroupedByName, err = c.parseAttributes()
		return ret, err
	}

	fn parseConstPool() -> (err error) {
		length := binary.BigEndian.Uint16(c.bs) - 1
		c.bs = c.bs[2:]
		for i := 0; i < int(length); i++ {
			switch c.bs[0] {
			case cg.ConstantPoolTagUtf8:
				p := new cg.ConstPool()
				length := binary.BigEndian.Uint16(c.bs[1:])
				p.Tag = c.bs[0]
				c.bs = c.bs[3:]
				p.Info = c.bs[:length]
				c.bs = c.bs[length:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagInteger:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:5]
				c.bs = c.bs[5:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagFloat:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:5]
				c.bs = c.bs[5:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagFieldref:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:5]
				c.bs = c.bs[5:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagMethodref:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:5]
				c.bs = c.bs[5:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagInterfaceMethodref:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:5]
				c.bs = c.bs[5:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagNameAndType:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:5]
				c.bs = c.bs[5:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagInvokeDynamic:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:5]
				c.bs = c.bs[5:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagLong:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:9]
				c.bs = c.bs[9:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p, null)
				i++ // increment twice
			case cg.ConstantPoolTagDouble:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:9]
				c.bs = c.bs[9:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p, null)
				i++ // increment twice
			case cg.ConstantPoolTagClass:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:3]
				c.bs = c.bs[3:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagString:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:3]
				c.bs = c.bs[3:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagMethodType:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:3]
				c.bs = c.bs[3:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			case cg.ConstantPoolTagMethodHandle:
				p := new cg.ConstPool()
				p.Tag = c.bs[0]
				p.Info = c.bs[1:4]
				c.bs = c.bs[4:]
				c.classFile.ConstPool = append(c.classFile.ConstPool, p)
			}
		}
		return null
	}

	fn parseInterfaces() {
		length := binary.BigEndian.Uint16(c.bs)
		c.bs = c.bs[2:]
		for i := char(0); i < length; i++ {
			c.classFile.Interfaces = append(c.classFile.Interfaces, binary.BigEndian.Uint16(c.bs))
			c.bs = c.bs[2:]
		}
	}

	fn parseFields() -> (err error) {
		length := binary.BigEndian.Uint16(c.bs)
		c.bs = c.bs[2:]
		for i := char(0); i < length; i++ {
			f := new cg.FieldInfo()
			f.AccessFlags = binary.BigEndian.Uint16(c.bs)
			f.NameIndex = binary.BigEndian.Uint16(c.bs[2:])
			f.DescriptorIndex = binary.BigEndian.Uint16(c.bs[4:])
			c.bs = c.bs[6:]
			f.AttributeGroupedByName, err = c.parseAttributes()
			if err != null {
				return err
			}
			c.classFile.Fields = append(c.classFile.Fields, f)
		}
		return null
	}

	fn parserMethods() -> (err error) {
		length := binary.BigEndian.Uint16(c.bs)
		c.bs = c.bs[2:]
		for i := char(0); i < length; i++ {
			m := new cg.MethodInfo()
			m.AccessFlags = binary.BigEndian.Uint16(c.bs)
			m.NameIndex = binary.BigEndian.Uint16(c.bs[2:])
			m.DescriptorIndex = binary.BigEndian.Uint16(c.bs[4:])
			c.bs = c.bs[6:]
			m.AttributeGroupedByName, err = c.parseAttributes()
			if err != null {
				return err
			}
			c.classFile.Methods = append(c.classFile.Methods, m)
		}
		return null
	}

	fn parseAttributes() -> (attrs  cg.AttributeGroupedByName,err error) {
		ret := make(cg.AttributeGroupedByName)
		length := binary.BigEndian.Uint16(c.bs)
		c.bs = c.bs[2:]
		for i := char(0); i < length; i++ {
			a := new cg.AttributeInfo()
			a.NameIndex = binary.BigEndian.Uint16(c.bs)
			if c.classFile.ConstPool[a.NameIndex].Tag != cg.ConstantPoolTagUtf8 {
				return ret, new error(sprintf("name index %d is not a utf8 const", a.NameIndex))
			}
			length := binary.BigEndian.getInt(c.bs[2:])
			c.bs = c.bs[6:]
			a.Info = c.bs[:length]
			c.bs = c.bs[length:]
			name := string(c.classFile.ConstPool[a.NameIndex].Info)
			if _, ok := ret[name]; ok {
				ret[name] = append(ret[name], a)
			} else {
				ret[name] = []cg.AttributeInfo{a}
			}
		}
		return ret, null
	}
	
}

