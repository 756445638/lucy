// all rights reserved , check the LICENSE file

import "lucy/jvm/cg"

public class Constant implements TopNodeInterface {
    public isGlobal               bool      
    public isBuildIn              bool      
    public used                   int      
    public pos                    Pos       
    public Type                   Type      
    public name                   string    
    public shortName              string    
    public defaultValueExpression Expression
    public accessFlags            char      
    public comment                string    
    public stringValue            string    
    public longValue              long      
    public doubleValue            double    
    public boolValue              bool      
    public findUsage              bool      
    public locateDefinition       bool      
           findUsageInstances     []Usage       
    public getHover               bool      

    /*
		a // this is a inline comment
	*/
    public inlineComment string //   in

    public containsLf bool // constains "\n"
    
    public fn isPublic() -> (is bool) {
        return this.accessFlags & cg.AccFieldPublic != 0
    }

    fn mkDefaultValue() {
        switch this.Type.Type {
            case VariableTypeBool:
                this.boolValue = false
            case this.Type.isInteger():
                this.longValue = 0L
            case VariableTypeFloat:
                this.doubleValue = 0d
            case VariableTypeDouble:
                this.doubleValue = 0d
            case VariableTypeString:
                this.stringValue = ""
        }

    }

    fn reduceFindUsageInstances(block Block) {
        this.used--
        if this.findUsage == false {
            return
        }
        this.findUsageInstances = this.findUsageInstances[:len(this.findUsageInstances) - 1]
        block.inheritedAttribute.p.findUsage = this.findUsageInstances
    }

    public fn mkDescription() -> (s string = "") {
        if this.comment != null {
            s += this.comment
        }
        if this.Type != null {
            s += sprintf("const %s %s" , this.name , this.Type.typeString())
        } else {
            s += sprintf("const %s" , this.name)
        }

        if this.defaultValueExpression != null {
            if this.defaultValueExpression.literalRaw != null {
                s += " = " + this.defaultValueExpression.literalRaw
            } else {
                s += " = " + this.defaultValueExpression.op
            }

        }
    }
}

