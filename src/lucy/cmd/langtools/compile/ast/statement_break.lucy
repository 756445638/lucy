

public class StatementBreak {
	public defers              []StatementDefer
	public statementFor        StatementFor
	public statementSwitch     StatementSwitch
	public switchTemplateBlock Block
	public pos                 Pos
	public inlineComment string 

	fn check(block Block) ->(errs []error)  {
		if block.inheritedAttribute.forBreak == null {
			return []error{new error(sprintf("%s 'break' cannot in this scope", this.pos.errMsgPrefix()))}
		}
		if block.inheritedAttribute.Defer != null {
			return []error{new error(sprintf("%s cannot has 'break' in 'defer'",
				this.pos.errMsgPrefix()))}
		}
		if t, ok := block.inheritedAttribute.forBreak.(StatementFor); ok {
			this.statementFor = t
		} 
		if t, ok := block.inheritedAttribute.forBreak.(StatementSwitch); ok {
			this.statementSwitch = t
		}
		if t, ok := block.inheritedAttribute.forBreak.(Block); ok{
			this.switchTemplateBlock = t
		}
		if this.statementFor == null &&
			this.statementSwitch == null &&
			this.switchTemplateBlock == null {
			panic("not happening")
		}
		this.defers = []StatementDefer{}
		this.mkDefers(block)
		return null
	}
	
	fn mkDefers(block Block) {
		if this.statementFor != null {
			if block.isForBlock {
				this.defers.appendAll(block.defers)
				return
			}
			this.mkDefers(block.outer)
			return
		} else if this.statementSwitch != null {
			//switch
			if block.isSwitchBlock {
				this.defers.appendAll(block.defers)
				return
			}
			this.mkDefers(block.outer)
		} else { //s.SwitchTemplateBlock != null
			if block.isWhenBlock {
				this.defers.appendAll(block.defers)
				return
			}
			this.mkDefers(block.outer)
		}
	}
}
