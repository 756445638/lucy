class ExpressionCheckUnary {
	

	static fn checkUnaryExpression(e Expression , block Block, errs []error)  ->(valueType Type) {
		ee := e.data.(Expression)
		unary, es := ee.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if unary == null {
			return null
		}
		if err := unary.rightValueValid(); err != null {
			errs.append(err)
			return null
		}
		if e.Type == ExpressionTypeNot {
			if unary.Type != VariableTypeBool {
				errs.append(new error( sprintf("%s not a bool expression , but '%s'",
					unary.pos.ErrMsgPrefix(), unary.typeString())))
			}
		}
		if e.Type == ExpressionTypeNegative {
			if unary.isNumber() == false {
				errs.append(new error( sprintf("%s cannot apply '-' on '%s'",
					unary.pos.ErrMsgPrefix(), unary.typeString())))
			}
		}
		if e.Type == ExpressionTypeBitwiseNot {
			if unary.isInteger() == false {
				errs . append(new error( sprintf("%s cannot apply '~' on '%s'",
					unary.pos.ErrMsgPrefix(), unary.typeString())))
			}
		}
		result := unary.Clone()
		result.pos = e.pos
		return result
	}

	static fn checkIncrementExpression(e Expression  , block Block, errs []error) ->(valueType Type) {
		on := e.data.(Expression)
		increment := on.getLeftValue(block, errs)
		if increment == null {
			return null
		}
		if on.Type == ExpressionTypeIdentifier &&
			e.isStatementExpression == false {
			/*
				special case
				fn1(a++)
			*/
			t := on.data.(ExpressionIdentifier)
			if t.Variable != null {
				t.Variable.used = true
			}
		}
		if false == increment.isNumber() {
			errs . append(new error( sprintf("%s cannot apply '%s' on '%s'",
					on.pos.ErrMsgPrefix(), on.op, increment.typeString())))
		}
		result := increment.Clone()
		result.pos = e.pos
		return result
	}	
} 

