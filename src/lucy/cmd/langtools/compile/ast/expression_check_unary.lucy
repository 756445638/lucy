// all rights reserved , check the LICENSE file

class ExpressionCheckUnary {
    static fn checkUnaryExpression(e Expression , block Block , errs []error) -> (valueType Type) {
        ee := e.data.(Expression)
        unary , es := ee.checkSingleValueContextExpression(block)
        errs.appendAll(es)
        if unary == null {
            return null
        }
        if err := unary.rightValueValid() ; err != null {
            errs.append(err)
            return null
        }
        if e.Type == ExpressionTypeNot {
            if unary.Type != VariableTypeBool {
                errs.append(new error(sprintf("%s not a bool expression , but '%s'",
                    unary.pos.errMsgPrefix() , unary.typeString())))
            }
        }
        if e.Type == ExpressionTypeNegative {
            if unary.isNumber() == false {
                errs.append(new error(sprintf("%s cannot apply '-' on '%s'",
                    unary.pos.errMsgPrefix() , unary.typeString())))
            }
        }
        if e.Type == ExpressionTypeBitwiseNot {
            if unary.isInteger() == false {
                errs.append(new error(sprintf("%s cannot apply '~' on '%s'",
                    unary.pos.errMsgPrefix() , unary.typeString())))
            }
        }
        result := unary.cloneType()
        result.pos = e.pos
        return result
    }

    static fn checkIncrementExpression(e Expression , block Block , errs []error) -> (valueType Type) {
        on := e.data.(Expression)
        increment := on.getLeftValue(block , errs)
        if increment == null {
            if on.Type == ExpressionTypeIdentifier {
                identifier := on.data.(ExpressionIdentifier)
                vd := new Variable()
                vd.name = identifier.name
                vd.pos = on.pos
                vd.Type = new Type()
                vd.Type.pos = on.pos
                vd.Type.Type = VariableTypeInt
                // create the var
                block.insert(identifier.name , on.pos , vd)
            }
            return null
        }
        if on.Type == ExpressionTypeIdentifier &&
            e.isStatementExpression == false {
            /*
				special case
				fn1(a++)
			*/
            if t := on.data.(ExpressionIdentifier) ; t.variable != null {
                t.variable.used = true
            }
        }
        if false == increment.isNumber() {
            errs.append(new error(sprintf("%s cannot apply '%s' on '%s'",
                on.pos.errMsgPrefix() , on.op , increment.typeString())))
        }
        result := increment.cloneType()
        result.pos = e.pos
        return result
    }
}


