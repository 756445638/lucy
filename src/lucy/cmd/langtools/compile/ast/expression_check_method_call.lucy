
import "lucy/cmd/langtools/compile/common"

class ExpressionCheckMethodCall {
	
	
	static fn check(e Expression , block Block, errs []error) -> (valueTypes []Type) {
		call := e.Data.(ExpressionMethodCall)
		object, es := call.Expression.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if object == null {
			return null
		}
		// call father`s construction method
		if call.Name == SUPER && object.Type == VariableTypeObject {
			.checkMethodCallExpressionOnSuper(e , block, errs, object)
			return []Type{mkVoidType(e.Pos)}
		}
		switch object.Type {
		case VariableTypePackage:
			return .checkMethodCallExpressionOnPackage(e , block, errs, object.Package)
		case VariableTypeMap:
			return .checkMethodCallExpressionOnMap(e , block, errs, object.Map)
		case VariableTypeArray:
			return .checkMethodCallExpressionOnArray(e , block, errs, object)
		case VariableTypeJavaArray:
			return .checkMethodCallExpressionOnJavaArray(e , block, errs, object)
		case VariableTypeDynamicSelector:
			if call.Name == "finalize" {
				errs.append(new error(sprintf("%s cannot call '%s'", e.Pos.ErrMsgPrefix(), call.Name)))
				return null
			}
			return .checkMethodCallExpressionOnDynamicSelector(e , block, errs, object)
		case VariableTypeString:
			if call.Name == "finalize" {
				errs.append(new error(sprintf("%s cannot call '%s'", e.Pos.ErrMsgPrefix(), call.Name)))
				return null
			}
			if err := loadJavaStringClass(e.Pos); err != null {
				errs.append(err)
				return null
			}
			errsLength := len(errs)
			args := checkExpressions(block, call.Args, errs, true)
			if len(errs) > errsLength {
				return null
			}
			ms, matched, err := javaStringClass.accessMethod(e.Pos, errs, call, args,
				false, null)
			if err != null {
				errs.append(err)
				return null
			}
			if matched {
				call.Class = javaStringClass
				if false == call.Expression.IsIdentifier(ThisPointerName) &&
					ms[0].IsPublic() == false {
					errs.append(new error(sprintf("%s method '%s' is not public", e.Pos.ErrMsgPrefix(), call.Name)))
				}
				call.Method = ms[0]
				return ms[0].Function.Type.mkCallReturnTypes(e.Pos)
			} else {
				errs.append(methodsNotMatchError(e.Pos, call.Name, ms, args))
				return null
			}

		case VariableTypeObject, VariableTypeClass:
			if call.Name == "finalize" {
				errs.append(new error(sprintf("%s cannot call '%s'", e.Pos.ErrMsgPrefix(), call.Name)))
				return null
			}
			call.Class = object.Class
			errsLength := len(errs)
			callArgTypes := checkExpressions(block, call.Args, errs, true)
			if len(errs) > errsLength {
				return null
			}
			if object.Class.IsInterface() {
				if object.Type == VariableTypeClass {
					errs.append(new error(sprintf("%s cannot make_node_objects call on interface '%s'",
						e.Pos.ErrMsgPrefix(), object.Class.Name)))
					return null
				}
				ms, matched, err :=
					object.Class.accessInterfaceObjectMethod(e.Pos, errs, call.Name, call, callArgTypes, false)
				if err != null {
					errs.append(err)
					return null
				}
				if matched {
					if ms[0].IsStatic() {
						errs.append(new error(sprintf("%s method '%s' is static",
							e.Pos.ErrMsgPrefix(), call.Name)))
					}
					call.Method = ms[0]
					return ms[0].Function.Type.mkCallReturnTypes(e.Pos)
				}
				errs.append(methodsNotMatchError(e.Pos, call.Name, ms, callArgTypes))
				return null
			}
			if len(call.ParameterTypes) > 0 {
				errs.append(new error(sprintf("%s method call expect no parameter types",
					errMsgPrefix(e.Pos))))
			}
			fieldMethodHandler := []ClassField{null}
			ms, matched, err := object.Class.accessMethod(e.Pos, errs, call, callArgTypes,
				false, fieldMethodHandler)
			if err != null {
				errs.append(err)
				if len(ms) > 0 {
					return ms[0].Function.Type.mkCallReturnTypes(e.Pos)
				}
				return null
			}
			if fieldMethodHandler[0] != null {
				err := call.Expression.fieldAccessAble(block, fieldMethodHandler[0])
				if err != null {
					errs.append(err)
				}
				call.FieldMethodHandler = fieldMethodHandler[0]
				return fieldMethodHandler[0].Type.FunctionType.mkCallReturnTypes(e.Pos)
			}
			if matched {
				m := ms[0]
				err := call.Expression.methodAccessAble(block, m)
				if err != null {
					errs.append(err)
				}
				call.Method = m
				return m.Function.Type.mkCallReturnTypes(e.Pos)
			}
			errs.append(methodsNotMatchError(e.Pos, call.Name, ms, callArgTypes))
			return null
		default:
			errs.append(new error(sprintf("%s cannot make_node_objects method call '%s' on '%s'",
				e.Pos.ErrMsgPrefix(), call.Name, object.TypeString())))
			return null
		}
	}

	/*
		this.super()
	*/
	static fn checkMethodCallExpressionOnSuper(
	    e Expression,
		block Block,
		errs []error,
		object Type) {
		call := e.Data.(ExpressionMethodCall)
		if call.Expression.IsIdentifier(ThisPointerName) == false {
			errs.append(new error(sprintf("%s call father`s constuction must use 'thi.super()'",
				e.Pos.ErrMsgPrefix())))
			return
		}
		if block.InheritedAttribute.IsConstructionMethod == false ||
			block.IsFunctionBlock == false ||
			block.InheritedAttribute.StatementOffset != 0 {
			errs.append(new error(sprintf("%s call father`s constuction on must first statement of a constructon method",
					e.Pos.ErrMsgPrefix())))
			return
		}
		if object.Class.LoadFromOutSide {
			err := object.Class.loadSuperClass(e.Pos)
			if err != null {
				errs.append(err)
				return
			}
			if object.Class.SuperClass == null {
				return
			}
		} else {
			if object.Class.SuperClass == null {
				return
			}
		}
		errsLength := len(errs)
		callArgsTypes := checkExpressions(block, call.Args, errs, true)
		if len(errs) > errsLength {
			return
		}
		ms, matched, err := object.Class.SuperClass.accessConstructionMethod(e.Pos, errs,
			null, call, callArgsTypes)
		if err != null {
			errs.append(new error(sprintf("%s %s", e.Pos.ErrMsgPrefix(), err.getMessage())))
			return
		}
		if matched {
			m := ms[0]
			if err := object.Class.SuperClass.constructionMethodAccessAble(e.Pos, m); err != null {
				errs.append(err)
			}
			call.Name = "<init>"
			call.Method = m
			call.Class = object.Class.SuperClass
			block.Statements[0].IsCallFatherConstructionStatement = true
			block.InheritedAttribute.Function.CallFatherConstructionExpression = e
			return
		}
		errs.append(methodsNotMatchError(e.Pos, object.TypeString(), ms, callArgsTypes))
	}

	static fn checkMethodCallExpressionOnDynamicSelector(e Expression , block Block, errs []error, object Type) -> (valueTypes []Type) {
		call := e.Data.(ExpressionMethodCall)
		if call.Name == SUPER {
			errs.append(new error(sprintf("%s access '%s' at '%s' not allow",
				e.Pos.ErrMsgPrefix(), SUPER, object.TypeString())))
			return null
		}
		fieldMethodHandler :=[]ClassField{null}
		errsLength := len(errs)
		callArgTypes := checkExpressions(block, call.Args, errs, true)
		if len(errs) > errsLength {
			return null
		}
		ms, matched, err := object.Class.accessMethod(e.Pos, errs, call, callArgTypes, false, fieldMethodHandler)
		if err != null {
			errs.append(err)
			return null
		}
		if matched {
			if fieldMethodHandler[0] != null {
				call.FieldMethodHandler = fieldMethodHandler[0]
				return fieldMethodHandler[0].Type.FunctionType.mkCallReturnTypes(e.Pos)
			} else {
				method := ms[0]
				call.Method = method
				return method.Function.Type.mkCallReturnTypes(e.Pos)
			}
		} else {
			errs.append(methodsNotMatchError(e.Pos, call.Name, ms, callArgTypes))
		}
		return null
	}
	static fn checkMethodCallExpressionOnJavaArray(e Expression , block Block, errs []error, array Type) -> (valueTypes []Type) {
		call := e.Data.(ExpressionMethodCall)
		switch call.Name {
		case common.ArrayMethodSize:
			result := new Type()
			result.Type = VariableTypeInt
			result.Pos = e.Pos
			if len(call.Args) > 0 {
				errs.append(new error(sprintf("%s method '%s' expect no arguments",
					call.Args[0].Pos.ErrMsgPrefix(), call.Name)))
			}
			return []Type{result}
		default:
			errs.append(new error(sprintf("%s unkown call '%s' on '%s'",
				e.Pos.ErrMsgPrefix(), call.Name, array.TypeString())))
		}
		return null
	}

	static fn checkMethodCallExpressionOnPackage(
	    e Expression ,
		block Block,
		errs []error,
		p Package) -> (valueTypes []Type) {
		call := e.Data.(ExpressionMethodCall)
		d, exists := p.Block.NameExists(call.Name)
		if exists == false {
			errs.append(new error(sprintf("%s function '%s' not found", e.Pos.ErrMsgPrefix(), call.Name)))
			return null
		}
		if f := d.(Function) ;f != null {
			if f.IsPublic() == false &&
				p.isSame(PackageBeenCompile) == false {
				errs.append(new error(sprintf("%s function '%s' is not public",
					e.Pos.ErrMsgPrefix(), call.Name)))
			}
			if f.TemplateFunction != null {
				// better convert to function call
				methodCall := e.Data.(ExpressionMethodCall)
				functionCall := new ExpressionFunctionCall()
				functionCall.Args = methodCall.Args
				functionCall.Function = f
				functionCall.ParameterTypes = methodCall.ParameterTypes
				e.Type = ExpressionTypeFunctionCall
				e.Data = functionCall
				return ExpressionCheckFunctionCall.checkFunctionCall(e , block, errs, f, functionCall)
			} else {
				methodCall := e.Data.(ExpressionMethodCall)
				methodCall.PackageFunction = f
				ret := f.Type.mkCallReturnTypes(e.Pos)
				errsLength := len(errs)
				callArgsTypes := checkExpressions(block, methodCall.Args, errs, true)
				if len(errs) > errsLength {
					return ret
				}
				var err error
				methodCall.VArgs, err = f.Type.fitArgs(e.Pos, call.Args, callArgsTypes, f)
				if err != null {
					errs.append(err)
				}
				return ret
			}
		}
		if v := d.(Variable) ; v != null {
			if v.isPublic() == false && p.isSame(PackageBeenCompile) == false {
				errs . append(new error( sprintf("%s variable '%s' is not public",
					e.Pos.ErrMsgPrefix(), call.Name)))
			}
			if v.Type.Type != VariableTypeFunction {
				errs.append(new error(sprintf("%s variable '%s' is not a function",
					e.Pos.ErrMsgPrefix(), call.Name)))
				return null
			}
			call := e.Data.(ExpressionMethodCall)
			if len(call.ParameterTypes) > 0 {
				errs.append(new error(sprintf("%s variable '%s' cannot be a template fucntion",
					errMsgPrefix(call.ParameterTypes[0].Pos), call.Name)))
			}
			ret := v.Type.FunctionType.mkCallReturnTypes(e.Pos)
			errsLength := len(errs)
			callArgsTypes := checkExpressions(block, call.Args, errs, true)
			if len(errs) > errsLength {
				return ret
			}
			vArgs, err := v.Type.FunctionType.fitArgs(e.Pos, call.Args, callArgsTypes, null)
			if err != null {
				errs.append(err)
			}
			call.PackageGlobalVariableFunction = v
			call.VArgs = vArgs
			return ret
		}
		if c := d.(Class) ; c != null {
			if c.IsPublic() == false && p.isSame(PackageBeenCompile) == false {
				errs.append(new error(sprintf("%s class '%s' is not public",
					e.Pos.ErrMsgPrefix(), call.Name)))
			}
			conversion := new ExpressionTypeConversion()
			conversion.Type = new Type()
			conversion.Type.Type = VariableTypeObject
			conversion.Type.Pos = e.Pos
			conversion.Type.Class = c
			e.Type = ExpressionTypeCheckCast
			if len(call.Args) >= 1 {
				conversion.Expression = call.Args[0]
			}
			e.Data = conversion
			if len(call.Args) != 1 {
				errs.append(new error(sprintf("%s cast type expect 1 argument", e.Pos.ErrMsgPrefix())))
				return []Type{conversion.Type.Clone()}
			}
			return []Type{ExpressionCheckTypeConversion.check(e , block, errs)}
		}
		if t := d.(Type) ; t != null {
			if len(call.Args) != 1 {
				errs.append(new error(sprintf("%s cast type expect 1 argument",
					e.Pos.ErrMsgPrefix())))
				result := p.Block.TypeAliases[call.Name].Clone()
				result.Pos = e.Pos
				return []Type{result}
			}
			conversion := new ExpressionTypeConversion()
			conversion.Type = p.Block.TypeAliases[call.Name]
			e.Type = ExpressionTypeCheckCast
			if len(call.Args) >= 1 {
				conversion.Expression = call.Args[0]
			}
			e.Data = conversion
			return []Type{ExpressionCheckTypeConversion.check(e , block, errs)}
		}
		errs.append(new error(sprintf("%s '%s' is not a function",
			e.Pos.ErrMsgPrefix(), call.Name)))
		return null
		 
	}
	static fn checkMethodCallExpressionOnArray(
	    e Expression,
		block Block,
		errs []error,
		array Type) -> (valueTypes []Type)  {
		call := e.Data.(ExpressionMethodCall)
		switch call.Name {
		case common.ArrayMethodSize,
			common.ArrayMethodCap,
			common.ArrayMethodStart,
			common.ArrayMethodEnd:
			result := new Type()
			result.Type = VariableTypeInt
			result.Pos = e.Pos
			if len(call.Args) > 0 {
				errs.append(new error(sprintf("%s too mamy argument to call,method '%s' expect no arguments",
						call.Args[0].Pos.ErrMsgPrefix(), call.Name)))
			}
			return []Type{result}
		case common.ArrayMethodAppend,
			common.ArrayMethodAppendAll:
			if len(call.Args) == 0 {
				errs.append(new error(sprintf("%s too few arguments to call %s,expect at least one argument",
						e.Pos.ErrMsgPrefix(), call.Name)))
			}
			ts := checkExpressions(block, call.Args, errs, true)
			for _, t := range ts {
				if t == null {
					continue
				}
				if call.Name == common.ArrayMethodAppend {
					if array.Array.assignAble(errs, t) == false {
						errs.append(new error(sprintf("%s cannot use '%s' as '%s' to call method '%s'",
							t.Pos.ErrMsgPrefix(), t.TypeString(), array.Array.TypeString(), call.Name)))
					}
				} else {
					if array.assignAble(errs, t) == false {
						errs.append(new error(sprintf("%s cannot use '%s' as '%s' to call method '%s'",
							t.Pos.ErrMsgPrefix(), t.TypeString(), array.TypeString(), call.Name)))
					}
				}
			}
			result := new Type()
			result.Type = VariableTypeVoid
			result.Pos = e.Pos
			return []Type{result}
		case common.ArrayMethodGetUnderlyingArray:
			result := new Type()
			result.Type = VariableTypeJavaArray
			result.Pos = e.Pos
			result.Array = array.Array.Clone()
			result.Array.Pos = e.Pos
			if len(call.Args) > 0 {
				errs.append(new error(sprintf("%s too mamy argument to call,method '%s' expect no arguments",
					call.Args[0].Pos.ErrMsgPrefix(), call.Name)))
			}
			return []Type{result}
		default:
			errs.append(new error(sprintf("%s unkown call '%s' on array", e.Pos.ErrMsgPrefix(), call.Name)))
		}
		return null
	}
	static fn checkMethodCallExpressionOnMap(
	    e Expression ,
		block Block,
		errs []error,
		m Map)->(valueTypes []Type)  {
		call := e.Data.(ExpressionMethodCall)
		switch call.Name {
		case common.MapMethodKeyExist:
			ret := new Type()
			ret.Pos = e.Pos
			ret.Type = VariableTypeBool
			if len(call.Args) != 1 {
				pos := e.Pos
				if len(call.Args) != 0 {
					pos = call.Args[1].Pos
				}
				errs.append(new error(sprintf("%s call '%s' expect one argument",
					pos.ErrMsgPrefix(), call.Name)))
				return []Type{ret}
			}
			t, es := call.Args[0].checkSingleValueContextExpression(block)
			errs.appendAll(es)
			if t == null {
				return []Type{ret}
			}
			if false == m.K.assignAble(errs, t) {
				errs.append(new error(sprintf("%s cannot use '%s' as '%s'",
					t.Pos.ErrMsgPrefix(), t.TypeString(), m.K.TypeString())))
			}
			return []Type{ret}
		case common.MapMethodRemove:
			ret := new Type()
			ret.Pos = e.Pos
			ret.Type = VariableTypeVoid
			if len(call.Args) == 0 {
				errs.append(new error(sprintf("%s remove expect at last 1 argement",
					e.Pos.ErrMsgPrefix())))
				return []Type{ret}
			}
			ts := checkExpressions(block, call.Args, errs, true)
			for _, t := range ts {
				if t == null {
					continue
				}
				if m.K.assignAble(errs, t) == false {
					errs.append(new error(sprintf("%s cannot use '%s' as '%s' for map-key",
						t.Pos.ErrMsgPrefix(), t.TypeString(), m.K.TypeString())))
				}
			}
			return []Type{ret}
		case common.MapMethodRemoveAll:
			ret := new Type()
			ret.Pos = e.Pos
			ret.Type = VariableTypeVoid
			if len(call.Args) > 0 {
				errs.append(new error(sprintf("%s '%s' expect no arguments",
					e.Pos.ErrMsgPrefix(), common.MapMethodRemoveAll)))
			}
			return []Type{ret}
		case common.MapMethodSize:
			ret := new Type()
			ret.Pos = e.Pos
			ret.Type = VariableTypeInt
			if len(call.Args) > 0 {
				errs.append(new error(sprintf("%s too many argument to call '%s''",
					call.Args[0].Pos.ErrMsgPrefix(), call.Name)))
			}
			return []Type{ret}
		default:
			errs.append(new error(sprintf("%s unkown call '%s' on map",
				e.Pos.ErrMsgPrefix(), call.Name)))
			return null
		}
		return null
	}

}

 
