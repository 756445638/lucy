// all rights reserved , check the LICENSE file

class ExpressionCheckTypeConversion {
    static fn check(e Expression , block Block , errs []error) -> (valueType Type) {
        conversion := e.data.(ExpressionTypeConversion)
        on , es := conversion.value.checkSingleValueContextExpression(block)
        errs.appendAll(es)
        valueType = conversion.to.cloneType()
        valueType.pos = e.pos
        if on == null {
            return
        }
        if err := on.rightValueValid() ; err != null {
            errs.append(err)
            return
        }
        err := conversion.to.resolve(block)
        if err != null {
            errs.append(err)
            return
        }
        if on.isNumber() && conversion.to.isNumber() {
            if conversion.value.isLiteral() {
                conversion.value.convertToNumberType(conversion.to.Type)
                e.Type = conversion.value.Type
                e.longValue = conversion.value.longValue
                e.doubleValue = conversion.value.doubleValue
                e.value = conversion.value.value
            }
            return
        }
        // string([]byte)
        if conversion.to.Type == VariableTypeString &&
            on.equal(LucyBytesType) {
            return
        }
        // string(byte[])
        if conversion.to.Type == VariableTypeString &&
            on.equal(JavaBytesType) {
            return
        }
        // int(enum)
        if conversion.to.Type == VariableTypeInt &&
            on.Type == VariableTypeEnum {
            return
        }
        // enum(int)
        if conversion.to.Type == VariableTypeEnum &&
            on.Type == VariableTypeInt {
            return
        }
        // []byte("hello world")
        if conversion.to.equal(LucyBytesType) &&
            on.Type == VariableTypeString {
            return
        }
        // byte[]("hello world")
        if conversion.to.equal(JavaBytesType) &&
            on.Type == VariableTypeString {
            return
        }
        if conversion.to.validForTypeAssertOrConversion() && on.isPointer() {
            return
        }
        errs.append(new error(sprintf("%s cannot convert '%s' to '%s'",
                    on.pos.errMsgPrefix() , on.typeString() , conversion.to.typeString())))
        return
    }
}


