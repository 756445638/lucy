
class ExpressionCheckTypeConversion {
	static fn check(e Expression , block Block , errs []error)  ->(valueType Type){
		conversion := e.data.(ExpressionTypeConversion)
		on, es := conversion.Expression.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		valueType = conversion.Type.cloneType()
		valueType.pos = e.pos
		if on == null {
			return 
		}
		if err := on.rightValueValid(); err != null {
			errs.append(err)
			return 
		}
		err := conversion.Type.resolve(block)
		if err != null {
			errs.append(err)
			return 
		}
		if on.isNumber() && conversion.Type.isNumber() {
			if conversion.Expression.isLiteral()  {
				conversion.Expression.convertToNumberType(conversion.Type.Type)
				e.Type = conversion.Expression.Type
				e.longValue = conversion.Expression.longValue
				e.doubleValue = conversion.Expression.doubleValue
				e.value = conversion.Expression.value
			}
			return 
		}
		// string([]byte)
		if conversion.Type.Type == VariableTypeString &&
			on.equal(LucyBytesType) {
			return 
		}
		// string(byte[])
		if conversion.Type.Type == VariableTypeString &&
			on.equal(JavaBytesType) {
			return 
		}
		// int(enum)
		if conversion.Type.Type == VariableTypeInt &&
			on.Type == VariableTypeEnum {
			return 
		}
		// enum(int)
		if conversion.Type.Type == VariableTypeEnum &&
			on.Type == VariableTypeInt {
			return 
		}
		// []byte("hello world")
		if conversion.Type.equal(LucyBytesType) &&
			on.Type == VariableTypeString {
			return 
		}
		// byte[]("hello world")
		if conversion.Type.equal(JavaBytesType) &&
			on.Type == VariableTypeString {
			return 
		}
		if conversion.Type.validForTypeAssertOrConversion() && on.isPointer() {
			return 
		}
		errs.append(new error( sprintf("%s cannot convert '%s' to '%s'",
			on.pos.errMsgPrefix(), on.typeString(), conversion.Type.typeString())))
		return 
	}
}

