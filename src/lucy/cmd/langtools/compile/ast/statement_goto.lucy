 


public class StatementGoTo {
	public defers         []StatementDefer
	public labelName      string
	public statementLabel StatementLabel
	public pos            Pos
	public locateDefinition bool 
	fn checkStatementGoTo(b Block) -> (err error) {
		label := b.searchLabel(this.labelName)
		if label == null {
			return new error(sprintf("%s label named '%s' not found",
				this.pos.errMsgPrefix(), this.labelName))
		}
		if this.locateDefinition {
			b.inheritedAttribute.p.locatedIdentifierPos = label.pos
		}
		this.statementLabel = label
		this.defers = []StatementDefer{}
		this.mkDefers(b)
		return this.statementLabel.Ready(this.pos)
	}

	fn mkDefers(currentBlock Block) {
		bs := []Block{}
		for this.statementLabel.block != currentBlock {
			bs.append(currentBlock)
			currentBlock = currentBlock.outer
		}
		for _, b := range bs {
			if b.defers != null {
				this.defers.appendAll(b.defers)
			}
		}
	}	
}


