 

public class StatementGoTo {
	public defers         []StatementDefer
	public LabelName      string
	public StatementLabel StatementLabel
	public pos            Pos
	fn checkStatementGoTo(b Block) -> (err error) {
		label := b.searchLabel(this.LabelName)
		if label == null {
			return new error(sprintf("%s label named '%s' not found",
				this.pos.ErrMsgPrefix(), this.LabelName))
		}
		this.StatementLabel = label
		this.defers = []StatementDefer{}
		this.mkDefers(b)
		return this.StatementLabel.Ready(this.pos)
	}

	fn mkDefers(currentBlock Block) {
		bs := []Block{}
		for this.StatementLabel.block != currentBlock {
			bs.append(currentBlock)
			currentBlock = currentBlock.outer
		}
		for _, b := range bs {
			if b.defers != null {
				this.defers.appendAll(b.defers)
			}
		}
	}	
}


