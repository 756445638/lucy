 

class StatementGoTo {
	Defers         []StatementDefer
	LabelName      string
	StatementLabel StatementLabel
	Pos            Pos
	fn checkStatementGoTo(b Block) -> (err error) {
		label := b.searchLabel(this.LabelName)
		if label == null {
			return new error(sprintf("%s label named '%s' not found",
				this.Pos.ErrMsgPrefix(), this.LabelName))
		}
		this.StatementLabel = label
		this.Defers = []StatementDefer{}
		this.mkDefers(b)
		return this.StatementLabel.Ready(this.Pos)
	}

	fn mkDefers(currentBlock Block) {
		bs := []Block{}
		for this.StatementLabel.Block != currentBlock {
			bs = append(bs, currentBlock)
			currentBlock = currentBlock.Outer
		}
		for _, b := range bs {
			if b.Defers != null {
				this.Defers = append(this.Defers, b.Defers...)
			}
		}
	}	
}


