import "java/lang/Object"
import "lucy/cmd/langtools/compile/jvm/cg"
import "lucy/cmd/langtools/compile/common"


public class Block {
	public Exits []cg.Exit // for switch template
	/*
		should analyse at ast stage
	*/
	public NotExecuteToLastStatement bool
	public Defers                    []StatementDefer
	public Fn                        Function
	public IsFunctionBlock           bool // function block
	public IsClassBlock              bool // class block
	public Class                     Class
	public IsForBlock                bool // for top block
	public IsSwitchBlock             bool // switch statement list block
	public IsWhenBlock               bool // template swtich statement list block
	public Pos                       Pos
	public EndPos                    Pos
	public Outer                     Block
	public InheritedAttribute        InheritedAttribute
	public Statements                []Statement
	public Constants                 map{string->Constant}
	public Functions                 map{string->Function}
	public Classes                   map{string->Class}
	public Enums                     map{string->Enum}
	public EnumNames                 map{string->EnumName}
	public Labels                    map{string->StatementLabel}
	public TypeAliases               map{string->Type}
	public Variables                 map{string->Variable}
	checkConstantsCalled      bool

    fn nameExists(name string) -> (x Object,exist bool) {
        if this.Functions != null {
            if t := this.Functions[name]; t != null {
                return t, true
            }
        }
        if this.Variables != null {
            if t := this.Variables[name]; t != null {
                return t, true
            }
        }
        if this.Constants != null {
            if t := this.Constants[name]; t != null {
                return t, true
            }
        }
        if this.EnumNames != null {
            if t := this.EnumNames[name]; t != null {
                return t, true
            }
        }
        if this.Classes != null {
            if t := this.Classes[name]; t != null {
                return t, true
            }
        }
        if this.Enums != null {
            if t := this.Enums[name]; t != null {
                return t, true
            }
        }
        if this.TypeAliases != null {
            if t := this.TypeAliases[name]; t != null {
                return t, true
            }
        }
        if this.Labels != null { // should be useless
            if t := this.Labels[name]; t != null {
                return t, true
            }
        }
        return null, false
    }

    /*
        search label
    */
    fn searchLabel(name string) -> (label StatementLabel) {
        outer := this
        for {
            if outer.Labels != null {
                if l := outer.Labels[name]; l != null {
                    l.Used = true
                    return l
                }
            }
            if outer.IsFunctionBlock {
                return null
            }
            outer = outer.Outer
        }
        return null
    }

    /*
        search type
    */
    fn searchType(name string) -> (x Object)  {
        bb := this
        for bb != null {
            if bb.Classes != null {
                if t := bb.Classes[name]; t != null {
                    t.Used = true
                    return t
                }
            }
            if bb.Enums != null {
                if t := bb.Enums[name]; t != null {
                    t.Used = true
                    return t
                }
            }
            if bb.TypeAliases != null {
                if t := bb.TypeAliases[name]; t != null {
                    return t
                }
            }
            if bb.IsFunctionBlock && bb.Fn != null {
                if bb.Fn.parameterTypes != null {
                    if t := bb.Fn.parameterTypes[name]; t != null {
                        return t
                    }
                }
            }
            bb = bb.Outer
        }
        return null
    }

    fn identifierIsWhat(x Object) -> (w string) {
        return x.getClass().getName()
    }

    /*
        search identifier
    */
    fn searchIdentifier(from Pos, name string, isCaptureVar []bool) -> (x Object,err error) {
        if this.Functions != null {
            if t := this.Functions[name]; t != null {
                t.Used = true
                return t, null
            }
        }
        if this.Variables != null {
            if t := this.Variables[name]; t != null {
                return t, null
            }
        }
        if this.Constants != null {
            if t := this.Constants[name]; t != null {
                t.Used = true
                return t, null
            }
        }
        if this.EnumNames != null {
            if t := this.EnumNames[name]; t != null {
                t.Enum.Used = true
                return t, null
            }
        }
        if this.Enums != null {
            if t := this.Enums[name]; t != null {
                t.Used = true
                return t, null
            }
        }
        if this.Classes != null {
            if t := this.Classes[name]; t != null {
                t.Used = true
                return t, null
            }
        }
        if this.TypeAliases != null {
            if t := this.TypeAliases[name]; t != null {
                return t, null
            }
        }
        if this.IsFunctionBlock && this.Fn != null {
            if this.Fn.parameterTypes != null {
                if t := this.Fn.parameterTypes[name]; t != null {
                    return t, null
                }
            }
        }
        // search closure
        if this.InheritedAttribute.Function != null {
            v := this.InheritedAttribute.Function.Closure.Search(name)
            if v != null {
                return v, null
            }
        }
        if this.IsFunctionBlock &&
            len(this.InheritedAttribute.Function.parameterTypes) > 0 {
            return searchBuildIns(name), null
        }
        if this.IsFunctionBlock &&
            name == ThisPointerName {
            return null, null
        }
        if this.Outer == null {
            return searchBuildIns(name), null
        }
        t, err := this.Outer.searchIdentifier(from, name, isCaptureVar) // search by outer block
        if err != null {
            return t, err
        }
        if t != null { //
            if v,ok := t.(Variable) ; ok {
                if v.IsGlobal == false { // not a global variable
                    if this.IsFunctionBlock &&
                        this.InheritedAttribute.Function.IsGlobal == false {
                        this.InheritedAttribute.Function.Closure.InsertVar(from, v)
                            isCaptureVar[0] = true
                    }
                    //cannot search variable from class body
                    if this.IsClassBlock {
                        return null, new error(sprintf("%s trying to access variable '%s' from class",
                            from.ErrMsgPrefix(), name))
                    }
                }
            } 
            if f,ok :=  t.(Function) ; ok {
                if f.IsGlobal == false {
                    if this.IsClassBlock {
                        this.Class.closure.InsertFunction(from, f)
                    }
                    if this.IsFunctionBlock {
                        this.Fn.Closure.InsertFunction(from, f)
                    }
                }

            } 
               
        }

        return t, null
    }

    fn inherit(father Block) {
        if this.Outer != null {
            return
        }
        if this == father {
            panic("inherit from self")
        }

        this.Outer = father
        this.InheritedAttribute.ForBreak = father.InheritedAttribute.ForBreak
        this.InheritedAttribute.StatementOffset = father.InheritedAttribute.StatementOffset
        this.InheritedAttribute.IsConstructionMethod = father.InheritedAttribute.IsConstructionMethod
        this.InheritedAttribute.ForContinue = father.InheritedAttribute.ForContinue
        this.InheritedAttribute.Function = father.InheritedAttribute.Function
        this.InheritedAttribute.Class = father.InheritedAttribute.Class
        this.InheritedAttribute.Defer = father.InheritedAttribute.Defer
        this.InheritedAttribute.ClassMethod = father.InheritedAttribute.ClassMethod
        this.InheritedAttribute.ClassAndFunctionNames = father.InheritedAttribute.ClassAndFunctionNames


        if this.IsFunctionBlock || this.IsClassBlock {
            this.InheritedAttribute.ForBreak = null
            this.InheritedAttribute.ForContinue = null
            this.InheritedAttribute.StatementOffset = 0
            this.InheritedAttribute.IsConstructionMethod = false
            this.InheritedAttribute.ClassMethod = null
            this.InheritedAttribute.Defer = null
        }
    }

    fn checkUnUsed() -> (es []error) {
        if common.CompileFlags.DisableCheckUnUse.getValue() {
            return null
        }
        es = []error{}
        for _, v := range this.Constants {
            if v.Used ||
                v.IsGlobal {
                continue
            }
            es.append(new error(sprintf("%s const '%s' has declared,but not used",
                v.Pos.ErrMsgPrefix(), v.Name)))
        }
        for _, v := range this.Enums {
            if v.Used ||
                v.IsGlobal {
                continue
            }
            es.append( new error(sprintf("%s enum '%s' has declared,but not used",
                v.Pos.ErrMsgPrefix(), v.Name)))
        }
        for _, v := range this.Classes {
            if v.Used ||
                v.IsGlobal {
                continue
            }
            es.append(new error(sprintf("%s class '%s' has declared,but not used",
                v.Pos.ErrMsgPrefix(), v.Name)))
        }
        for _, v := range this.Functions {
            if v.Used ||
                v.IsGlobal {
                continue
            }
            es.append(new error(sprintf("%s function '%s' has declared,but not used",
                v.Pos.ErrMsgPrefix(), v.Name)))
        }
        for _, v := range this.Labels {
            if v.Used {
                continue
            }
            es.append(new error(sprintf("%s enum '%s' has declared,but not used",
                v.Pos.ErrMsgPrefix(), v.Name)))
        }
        for _, v := range this.Variables {
            if v.Used ||
                v.IsGlobal ||
                v.IsFunctionParameter ||
                v.Name == ThisPointerName ||
                v.IsReturn {
                continue
            }
            es.append(new error(sprintf("%s variable '%s' has declared,but not used",
                v.Pos.ErrMsgPrefix(), v.Name)))
        }
        return es
    }

    fn check()  -> (errs []error = []error{}) {
        for k, s := range this.Statements {
            if s.isStaticFieldDefaultValue {
                // no need to check
                // compile auto statement , checked before
                continue
            }
            this.InheritedAttribute.StatementOffset = k
            errs.appendAll(s.check(this))
            if PackageBeenCompile.shouldStop(errs) {
                return errs
            }
        }
        errs.appendAll( this.checkUnUsed())
        return errs
    }

    fn checkConstants() -> (errs []error= new []error(0)) {
        if this.checkConstantsCalled {
            return null
        }
        this.checkConstantsCalled = true
        for _, c := range this.Constants {
            if err := this.nameIsValid(c.Name, c.Pos); err != null {
                errs.append(err)
                this.Constants.remove(c.Name)
                continue
            }
            err := checkConst(this, c)
            if err != null {
                errs.append(err)
            }
            if err != null && c.Type == null {
                this.Constants.remove(c.Name)
            }
        }
        return errs
    }

    fn checkNameExist(name string, pos Pos) -> (err error) {
        if this.Variables == null {
            this.Variables = new map {string -> Variable } ()
        }
        if v := this.Variables[name]; v != null {
            errMsg := sprintf("%s name '%s' already declared as variable,first declared at:\n",
                pos.ErrMsgPrefix(), name)
            errMsg += sprintf("\t%s", v.Pos.ErrMsgPrefix())
            return new error(errMsg)
        }
        if this.Classes == null {
            this.Classes = new map {string-> Class} ()
        }
        if c := this.Classes[name]; c != null {
            errMsg := sprintf("%s name '%s' already declared as class,first declared at:\n",
                pos.ErrMsgPrefix(), name)
            errMsg += sprintf("\t%s", c.Pos.ErrMsgPrefix())
            return new error(errMsg)
        }
        if this.Functions == null {
            this.Functions = new map  { string -> Function } ()
        }
        if f := this.Functions[name]; f != null {
            errMsg := sprintf("%s name '%s' already declared as function,first declared at:\n",
                pos.ErrMsgPrefix(), name)
            errMsg += sprintf("\t%s", f.Pos.ErrMsgPrefix())
            return new error(errMsg)
        }
        if this.Constants == null {
            this.Constants = new map { string -> Constant } ()
        }
        if c := this.Constants[name]; c != null {
            errMsg := sprintf("%s name '%s' already declared as const,first declared at:\n",
                pos.ErrMsgPrefix(), name)
            errMsg += sprintf("\t%s", c.Pos.ErrMsgPrefix())
            return new error(errMsg)
        }
        if this.EnumNames == null {
            this.EnumNames = new map { string->EnumName}()
        }
        if en := this.EnumNames[name]; en != null {
            errMsg := sprintf("%s name '%s' already declared as enumName,first declared at:\n",
                pos.ErrMsgPrefix(), name)
            errMsg += sprintf("\t%s", en.Pos.ErrMsgPrefix())
            return new error(errMsg)
        }
        if this.TypeAliases == null {
            this.TypeAliases = new map { string -> Type } ()
        }
        if t := this.TypeAliases[name]; t != null {
            errMsg := sprintf("%s name '%s' already declared as enumName,first declared at:\n",
                pos.ErrMsgPrefix(), name)
            errMsg += sprintf("\t%s", t.Pos.ErrMsgPrefix())
            return new error(errMsg)
        }
        if this.Enums == null {
            this.Enums = new map { string -> Enum } ()
        }
        if e := this.Enums[name]; e != null {
            errMsg := sprintf("%s name %s already declared as enum,first declared at:\n",
                pos.ErrMsgPrefix(), name)
            errMsg += sprintf("\t%s", e.Pos.ErrMsgPrefix())
            return new error(errMsg)
        }
        return null
    }

    fn nameIsValid(name string, pos Pos) -> (err error) {
        if name == "" {
            return new error(sprintf(`%s "" is not a valid name`, pos.ErrMsgPrefix()))
        }
        if name == ThisPointerName {
            return new error(sprintf("%s '%s' already been taken", pos.ErrMsgPrefix(), ThisPointerName))
        }
        if name == "_" {
            return new error(sprintf("%s '%s' is not a valid name", pos.ErrMsgPrefix(), name))
        }
        if isMagicIdentifier(name) {
            return new error(sprintf("%s '%s' is not a magic identifier", pos.ErrMsgPrefix(), name))
        }
        if searchBuildIns(name) != null {
            return new error(sprintf("%s '%s' is buildin", pos.ErrMsgPrefix(), name))
        }
        return null
    }

    public fn Insert(name string, pos Pos, d Object) -> (err error) {
        if err := this.nameIsValid(name, pos); err != null {
            return err
        }
        // handle label
        if label := d.(StatementLabel); label != null {
            if this.Labels == null {
                this.Labels = new map { string -> StatementLabel } ()
            }
            if l := this.Labels[name]; l != null {
                errMsg := sprintf("%s name '%s' already declared as enumName,first declared at:",
                    pos.ErrMsgPrefix(), name)
                errMsg += sprintf("\t%s", l.Statement.Pos.ErrMsgPrefix())
                return new error(errMsg)
            }
            this.Labels[name] = label
            return null
        }
        err = this.checkNameExist(name, pos)
        if err != null {
            return err
        }
        if buildInFunctionsMap[name] != null {
            return new error(sprintf("%s function named '%s' is buildin",
                pos.ErrMsgPrefix(), name))
        }
        if c := d.(Class) ; d != null {
            this.Classes[name] = c
            return null
        }
        if f := d.(Function) ; f != null {
            this.Functions[name] = f
            return null
        }
        if c := d.(Constant) ; c != null {
             this.Constants[name] = c
             return null
        }
        if v := d.(Variable) ; v != null {
            v.LocalValOffset = 65535 // overflow
            this.Variables[name] = v
            return null
        }
        if e := d.(Enum) ; e != null {
            this.Enums[name] = e
            for _, v := range e.Enums {
                err := this.Insert(v.Name, v.Pos, v)
                if err != null {
                    return err
                }
            }
            return null
        }
        if en := d.(EnumName) ; en != null {
            this.EnumNames[name] = en
            return null
        }
        if t := d.(Type) ; d != null {
             this.TypeAliases[name] = t
             return null
        }
        return null
    }
}

