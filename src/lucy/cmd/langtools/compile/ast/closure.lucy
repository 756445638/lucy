import "java/lang/Object"

class ClosureMeta {
	pos Pos
}



public class Closure {
	public Variables map{ Variable -> ClosureMeta }
	public Functions map{ Function -> ClosureMeta }	
	
	public fn closureVariableExist(v Variable) ->(exists bool) {
		if this.Variables == null {
			return false
		}
		return this.Variables.keyExist(v)
	}

	public fn closureFunctionExist(v Function)  ->(exists bool)  {
		if this.Functions == null {
			return false
		}
		return this.Functions.keyExist(v)
	}

	fn captureCount(f Function) ->(sum int = len(this.Variables)) {
		for v, _ := range this.Functions {
			if f == v {
				continue
			}
			if v.IsClosureFunction {
				sum++
			}
		}
		return sum
	}

	fn insertVar(pos Pos, v Variable) {
		if this.Variables == null {
			this.Variables = new map{Variable->ClosureMeta}()
		}
		this.Variables[v] = new ClosureMeta()
		this.Variables[v].pos = pos
	}

	fn insertFunction(pos Pos, f Function) {
		if this.Functions == null {
			this.Functions = new map { Function -> ClosureMeta }()
		}
		this.Functions[f] = new ClosureMeta()
		this.Functions[f].pos = pos 
	}
	
	fn search(name string) -> ( x Object) {
		for f, _ := range this.Functions {
			if f.name == name {
				return f
			}
		}
		return null
	}
}



