
public class AutoCompletionItem {
    public Type string 
    public name string 
    public functionDefinition string  // used by function
    public suggest string   // used by function
    public variableType string 
    public description string 
    private static arrayDefaultAutoCompletionItem []AutoCompletionItem
    private static javaArrayDefaultAutoCompletionItem  []AutoCompletionItem
    private static typeDefaultAutoCompletionItem []AutoCompletionItem

    
    static fn getTypeAutoCompletionItem() -> (items []AutoCompletionItem) {
        if len(AutoCompletionItem.typeDefaultAutoCompletionItem) > 0  {
            return AutoCompletionItem.typeDefaultAutoCompletionItem
        }
        AutoCompletionItem.typeDefaultAutoCompletionItem = []AutoCompletionItem{}
        items = AutoCompletionItem.typeDefaultAutoCompletionItem
        
        item := new AutoCompletionItem()
        item.Type = "keyword"
        item.name = "bool"
        items.append(item)

        item = new AutoCompletionItem()
        item.Type = "keyword"
        item.name = "byte"
        items.append(item)

        item = new AutoCompletionItem()
        item.Type = "keyword"
        item.name = "short"
        items.append(item)
        
        item = new AutoCompletionItem()
        item.Type = "keyword"
        item.name = "char"
        items.append(item)

        item = new AutoCompletionItem()
        item.Type = "keyword"
        item.name = "int"
        items.append(item)

        item = new AutoCompletionItem()
        item.Type = "keyword"
        item.name = "long"
        items.append(item)

        item = new AutoCompletionItem()
        item.Type = "keyword"
        item.name = "float"
        items.append(item)

        item = new AutoCompletionItem()
        item.Type = "keyword"
        item.name = "double"
        items.append(item)
    }
    
    
    static fn getJavaArrayBasicAutoCompletionItem() -> (items []AutoCompletionItem) {
        if len(AutoCompletionItem.javaArrayDefaultAutoCompletionItem) > 0  {
            return AutoCompletionItem.javaArrayDefaultAutoCompletionItem
        }
        AutoCompletionItem.javaArrayDefaultAutoCompletionItem = []AutoCompletionItem{}
        items = AutoCompletionItem.javaArrayDefaultAutoCompletionItem
        //size
        item := new AutoCompletionItem()
        item.Type = "method"
        item.name = "size"
        item.suggest = "size()"
        items.append(item)
    }
    
    static fn getArrayBasicAutoCompletionItem() -> (items []AutoCompletionItem) {
        if len(AutoCompletionItem.arrayDefaultAutoCompletionItem) > 0  {
            return AutoCompletionItem.arrayDefaultAutoCompletionItem
        }
        AutoCompletionItem.arrayDefaultAutoCompletionItem = []AutoCompletionItem{}
        items = AutoCompletionItem.arrayDefaultAutoCompletionItem
        //size
        item := new AutoCompletionItem()
        item.Type = "method"
        item.name = "size"
        item.suggest = "size()"
        items.append(item)

        //start
        item = new AutoCompletionItem()
        item.Type = "method"
        item.name = "start"
        item.suggest = "start()"
        items.append(item)
        // end
        item = new AutoCompletionItem()
        item.Type = "method"
        item.name = "end"
        item.suggest = "end()"
        items.append(item)
        // cap 
        item = new AutoCompletionItem()
        item.Type = "method"
        item.name = "cap"
        item.suggest = "cap()"
        items.append(item)
        // 
        return items 
    }
    
    static fn getMapAutoCompletionItem(m Type) ->(items []AutoCompletionItem = []AutoCompletionItem{}) {
        //size
        item := new AutoCompletionItem()
        item.Type = "method"
        item.name = "size"
        item.suggest = "size()"
        items.append(item)

        //remove    
        item = new AutoCompletionItem()
        item.Type = "method"
        item.name = "remove"
        item.suggest = sprintf("remove( key, ...)")
        items.append(item)

        //removeAll
        item = new AutoCompletionItem()
        item.Type = "method"
        item.name = "removeAll"
        item.suggest = "removeAll()"
        items.append(item)
        
        //keyExist
        item = new AutoCompletionItem()
        item.Type = "method"
        item.name = "keyExist"
        item.suggest = sprintf("keyExist(key)")
        items.append(item)
    }

    static fn getArrayAutoCompletionItem(t Type) -> (items []AutoCompletionItem){
        items = AutoCompletionItem.getArrayBasicAutoCompletionItem()
        items = copy(new []AutoCompletionItem(len(items)) , items)
        if t.Type != VariableTypeArray {
            panic("not a array at all")
        }
        item := new AutoCompletionItem()
        item.Type = "method"
        item.name = "append"
        item.suggest = sprintf("append(element , ...)")
        items.append(item)
        
        item = new AutoCompletionItem()
        item.Type = "method"
        item.name = "appendAll"
        item.suggest = sprintf("appendAll(elements , ...)")
        items.append(item)

        item = new AutoCompletionItem()
        item.Type = "method"
        item.name = "getUnderlyingArray"
        item.suggest = sprintf("getUnderlyingArray()")
        items.append(item) 
    }
}

