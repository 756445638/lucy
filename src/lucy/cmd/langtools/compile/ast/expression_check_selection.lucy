




class ExpressionCheckSelection {

    static fn check(e Expression , block Block, errs []error) -> (valueType Type) {
        selection := e.Data.(ExpressionSelection)
        object, es := selection.Expression.checkSingleValueContextExpression(block)
        errs.appendAll(es)
        if object == null {
            return null
        }
        switch object.Type {
        case VariableTypeMagicFunction:
            v := object.Function.Type.searchName(selection.Name)
            if v == null {
                err := new error(sprintf("%s '%s' not found",
                    e.Pos.ErrMsgPrefix(), selection.Name))
                errs.append(err)
                return null
            }
            e.Value = v.Type.Clone()
            e.Value.Pos = e.Pos
            e.Type = ExpressionTypeIdentifier
            identifier := new ExpressionIdentifier()
            identifier.Name = selection.Name
            identifier.Variable = v
            e.Data = identifier
            return e.Value
        case VariableTypeDynamicSelector:
            if selection.Name == SUPER {
                errs . append(new error( sprintf("%s access '%s' at '%s' not allow",
                    e.Pos.ErrMsgPrefix(), SUPER, object.TypeString())))
                return null
            }
            access, err := object.Class.getFieldOrMethod(e.Pos, selection.Name, false)
            if err != null {
                errs.append(err)
                return null
            }
            if field, ok := access.(ClassField); ok {
                selection.Field = field
                result := field.Type.Clone()
                result.Pos = e.Pos
                return result
            } else {
                method := access.(ClassMethod)
                selection.Method = method
                result := new Type()
                result.Type = VariableTypeFunction
                result.FunctionType = method.Function.Type
                result.Pos = e.Pos
                return result
            }
        case VariableTypePackage:
            d, ok := object.Package.Block.NameExists(selection.Name)
            if ok == false {
                err := new error(sprintf("%s '%s' not found",
                    e.Pos.ErrMsgPrefix(), selection.Name))
                errs.append(err)
                return null
            }
            if v := d.(Variable) ;v != null {
            	result := v.Type.Clone()
                result.Pos = e.Pos
                if v.isPublic() == false && object.Package.isSame(PackageBeenCompile) == false {
                    err := new error(sprintf("%s variable '%s' is not public",
                        e.Pos.ErrMsgPrefix(), selection.Name))
                    errs.append(err)
                }
                selection.PackageVariable = v
                return result
            }
            if  c := d.(Constant) ; c != null {
				e.fromConst(c) //
                result := c.Type.Clone()
                result.Pos = e.Pos
                if c.isPublic() == false && object.Package.isSame(PackageBeenCompile) == false {
                    err := new error(sprintf("%s const '%s' is not public",
                        e.Pos.ErrMsgPrefix(), selection.Name))
                    errs.append(err)
                }
                return result
            }
            if c := d.(Class) ; c != null {
				result := new Type()
                result.Pos = e.Pos
                result.Type = VariableTypeClass
                result.Class = c
                if c.IsPublic() == false && object.Package.isSame(PackageBeenCompile) == false {
                    err := new error(sprintf("%s class '%s' is not public",
                        e.Pos.ErrMsgPrefix(), selection.Name))
                    errs.append(err)
                }
                return result
            }
            if n := d.(EnumName) ; n != null {
            	if n.Enum.isPublic() == false && object.Package.isSame(PackageBeenCompile) == false {
                    err := new error(sprintf("%s enum '%s' is not public",
                        e.Pos.ErrMsgPrefix(), selection.Name))
                    errs.append(err)
                }
                result := new Type()
                result.Pos = e.Pos
                result.Enum = n.Enum
                result.EnumName = n
                result.Type = VariableTypeEnum
                selection.PackageEnumName = n
                return result
            }
            if f := d.(Function) ; f != null {
				if f.IsPublic() == false && object.Package.isSame(PackageBeenCompile) == false {
                    err := new error(sprintf("%s function '%s' is not public",
                        e.Pos.ErrMsgPrefix(), selection.Name))
                    errs.append(err)
                }
                if f.TemplateFunction != null {
                    err := new error(sprintf("%s function '%s' is a template function",
                        e.Pos.ErrMsgPrefix(), selection.Name))
                    errs.append(err)
                    return null
                }
                result := new Type()
                result.Pos = e.Pos
                result.Type = VariableTypeFunction
                result.FunctionType = f.Type
                selection.PackageFunction = f
                return result
            }
            err := new error(sprintf("%s name '%s' cannot be used as right value",
                    e.Pos.ErrMsgPrefix(), selection.Name))
            errs.append(err)
            return null
        case VariableTypeObject, VariableTypeClass:
            if selection.Name == SUPER {
                if object.Type == VariableTypeClass {
                    errs . append(new error( sprintf("%s cannot access class`s super",
                        object.Pos.ErrMsgPrefix())))
                    return object
                }
                if object.Class.Name == JavaRootClass {
                    errs . append(new error( sprintf("%s '%s' is root class",
                        object.Pos.ErrMsgPrefix(), JavaRootClass)))
                    return object
                }
                err := object.Class.loadSuperClass(e.Pos)
                if err != null {
                    errs.append(err)
                    return object
                }
                if object.Class.SuperClass == null {
                    return object
                }
                result := object.Clone()
                result.Pos = e.Pos
                result.Class = result.Class.SuperClass
                return result
            }
            fieldOrMethod, err := object.Class.getFieldOrMethod(e.Pos, selection.Name, false)
            if err != null {
                errs.append(err)
                return null
            }
            if field, ok := fieldOrMethod.(ClassField); ok {
                err := selection.Expression.fieldAccessAble(block, field)
                if err != null {
                    errs.append(err)
                }
                result := field.Type.Clone()
                result.Pos = e.Pos
                selection.Field = field
                return result
            } else {
                method := fieldOrMethod.(ClassMethod)
                err := selection.Expression.methodAccessAble(block, method)
                if err != null {
                    errs.append(err)
                }
                selection.Method = method
                result := new Type()
                result.Type = VariableTypeFunction
                result.FunctionType = method.Function.Type
                result.Pos = e.Pos
                return result
            }

        default:
            errs . append(new error( sprintf("%s cannot access '%s' on '%s'",
                e.Pos.ErrMsgPrefix(), selection.Name, object.TypeString())))
            return null
        }
        return null
    }

}

