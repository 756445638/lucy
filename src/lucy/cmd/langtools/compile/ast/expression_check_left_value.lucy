class ExpressionCheckLeftValue {
	

	static fn getLeftValue(e Expression, block Block, errs []error) (result Type) {
		switch e.Type {
		case ExpressionTypeIdentifier:
			identifier := e.Data.(ExpressionIdentifier)
			if identifier.Name == UnderScore {
				errs.append(new error(sprintf("%s cannot use '%s' as left value",
					e.Pos.ErrMsgPrefix(), identifier.Name)))
				return null
			}
			if identifier.Name == ThisPointerName {
				errs.append(new error(sprintf("%s '%s' cannot be used as left value",
					e.Pos.ErrMsgPrefix(), ThisPointerName)))
			}
			isCaptureVar := false
			d, err := block.searchIdentifier(e.Pos, identifier.Name, &isCaptureVar)
			if err != null {
				errs.append(err)
				return null
			}
			if d == null {
				errs.append(new error(sprintf("%s '%s' not found",
					e.Pos.ErrMsgPrefix(), identifier.Name)))
				return null
			}
			switch d.(type) {
			case *Variable:
				v := d.(*Variable)
				if isCaptureVar {

					v.BeenCapturedAsLeftValue++
				}
				// variable is modifying , capture right value should not be ok
				// if no variable not change,after been captured, right value should ok too
				v.BeenCapturedAsLeftValue += v.BeenCapturedAsRightValue
				v.BeenCapturedAsRightValue = 0
				identifier.Variable = v
				result = identifier.Variable.Type.Clone()
				result.Pos = e.Pos
				e.Value = result
				return result
			default:
				errs.append(new error(sprintf("%s identifier '%s' is '%s' , cannot be used as left value",
					e.Pos.ErrMsgPrefix(), identifier.Name, block.identifierIsWhat(d))))
				return null
			}
		case ExpressionTypeIndex:
			result = e.checkIndexExpression(block, errs)
			e.Value = result
			return result
		case ExpressionTypeSelection:
			selection := e.Data.(ExpressionSelection)
			object, es := selection.Expression.checkSingleValueContextExpression(block)
			errs.appendAll(es)
			if object == null {
				return null
			}
			switch object.Type {
			case VariableTypeDynamicSelector:
				if selection.Name == SUPER {
					errs.append(new error(sprintf fmt.Errorf("%s access '%s' at '%s' not allow",
						e.Pos.ErrMsgPrefix(), SUPER, object.TypeString())))
					return null
				}
				field, err := object.Class.getField(e.Pos, selection.Name, false)
				if err != null {
					errs.append(err)
				}
				if field == null {
					return null
				}
				selection.Field = field
				result = field.Type.Clone()
				result.Pos = e.Pos
				e.Value = result
				return result
			case VariableTypeObject, VariableTypeClass:
				field, err := object.Class.getField(e.Pos, selection.Name, false)
				if err != null {
					errs.append(err)
				}
				selection.Field = field
				if field != null {
					err := selection.Expression.fieldAccessAble(block, field)
					if err != null {
						errs.append(err)
					}
					result = field.Type.Clone()
					result.Pos = e.Pos
					e.Value = result
					return result
				}
				return null
			case VariableTypePackage:
				variable, exists := object.Package.Block.NameExists(selection.Name)
				if exists == false {
					errs.append(new error(sprintf("%s '%s.%s' not found",
						e.Pos.ErrMsgPrefix(), object.Package.Name, selection.Name)))
					return null
				}
				switch variable.(type) {
				case *Variable:
					v := variable.(*Variable)
					if v.AccessFlags&cg.AccFieldPublic == 0 &&
						object.Package.isSame(&PackageBeenCompile) == false {
						errs.append(new error(sprintf("%s '%s.%s' is private",
							e.Pos.ErrMsgPrefix(), object.Package.Name, selection.Name)))
					}
					selection.PackageVariable = v
					result = v.Type.Clone()
					result.Pos = e.Pos
					e.Value = result
					return result
				default:
					errs.append(new error(sprintf("%s '%s' is not variable",
						e.Pos.ErrMsgPrefix(), selection.Name)))
					return null
				}
			case VariableTypeMagicFunction:
				v := object.Function.Type.searchName(selection.Name)
				if v == null {
					err := new error(sprintf("%s '%s' not found", e.Pos.ErrMsgPrefix(), selection.Name))
					errs.append(err)
					return null
				}
				e.Value = v.Type.Clone()
				e.Value.Pos = e.Pos
				e.Type = ExpressionTypeIdentifier
				identifier := &ExpressionIdentifier{}
				identifier.Name = selection.Name
				identifier.Variable = v
				e.Data = identifier
				result := v.Type.Clone()
				result.Pos = e.Pos
				return result
			default:
				errs.append(new error(sprintf("%s cannot access '%s' on '%s'",
					e.Pos.ErrMsgPrefix(), selection.Name, object.TypeString())))
				return null
			}
		default:
			errs.append(new error(sprintf("%s '%s' cannot be used as left value",
				e.Pos.ErrMsgPrefix(),
				e.Op)))
			return null
		}
		return null
	}

} 
