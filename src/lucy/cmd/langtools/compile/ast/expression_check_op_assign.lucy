class ExpressionCheckOpAssign {
	

	static fn check(e Expression , block Block, errs []error) -> (valueType Type) {
		bin := e.Data.(ExpressionBinary)
		if bin.Left.Type == ExpressionTypeList {
			list := bin.Left.Data.([]Expression)
			if len(list) > 1 {
				errs.append(new error(sprintf("%s expect 1 expression on left",
						errMsgPrefix(e.Pos))))
			}
			bin.Left = list[0]
		}
		left := bin.Left.getLeftValue(block, errs)
		right, es := bin.Right.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if left == null || right == null {
			return
		}
		valueType = left.Clone()
		valueType.Pos = e.Pos
		if err := right.rightValueValid(); err != null {
			errs.append(err)
			return valueType
		}
		if bin.Left.Type == ExpressionTypeIdentifier &&
			e.IsStatementExpression == false {
			/*
				var a = 1
				print(a += 1)
			*/
			t := bin.Left.Data.(ExpressionIdentifier)
			if t.Variable != null {
				t.Variable.Used = true
			}
		}
		convertExpressionToNeed(bin.Right, left, right)
		/*
			var  s string
			s += "11111111"
		*/
		if left.Type == VariableTypeString {
			if right.Type == VariableTypeString &&
				(e.Type == ExpressionTypePlusAssign) {
				return valueType
			}
		}
		//number
		if e.Type == ExpressionTypePlusAssign ||
			e.Type == ExpressionTypeMinusAssign ||
			e.Type == ExpressionTypeMulAssign ||
			e.Type == ExpressionTypeDivAssign ||
			e.Type == ExpressionTypeModAssign {
			if left.assignAble(errs, right) {
				return
			}
			if left.isInteger() && right.isInteger() && bin.Right.isLiteral() {
				bin.Right.convertToNumberType(left.Type)
				return
			}
			if left.isFloat() && right.isFloat() && bin.Right.isLiteral() {
				bin.Right.convertToNumberType(left.Type)
				return
			}
		}
		if e.Type == ExpressionTypeAndAssign ||
			e.Type == ExpressionTypeOrAssign ||
			e.Type == ExpressionTypeXorAssign {
			if left.isInteger() && left.assignAble(errs, right) {
				return
			}
		}
		if e.Type == ExpressionTypeLshAssign ||
			e.Type == ExpressionTypeRshAssign {
			if left.isInteger() && right.isInteger() {
				if right.Type == VariableTypeLong {
					bin.Right.convertToNumberType(VariableTypeInt)
				}
				return
			}
		}
		errs.append(new error(sprintf("%s cannot apply algorithm '%s' on '%s' and '%s'",
			e.Pos.ErrMsgPrefix(),
			e.Op,
			left.TypeString(),
			right.TypeString())))
			
	}


} 
