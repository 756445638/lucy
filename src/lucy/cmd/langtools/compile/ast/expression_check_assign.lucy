// all rights reserved , check the LICENSE file

class ExpressionCheckAssign {
    static fn check(e Expression , block Block , errs []error) -> (valueType Type) {
        bin := e.data.(ExpressionBinary)
        lefts := new []Expression(1)
        if bin.left.Type == ExpressionTypeList {
            lefts = bin.left.data.([]Expression)
        } else {
            lefts[0] = bin.left
        }
        if bin.right.data == null {
            return
        }
        values := bin.right.data.([]Expression)
        for _ , v := range values {
            v.lefts = lefts
        }
        valueTypes := checkExpressions(block , values , errs , false)
        leftTypes := []Type{}
        for _ , v := range lefts {
            if v.isIdentifier(UnderScore) {
                leftTypes.append(null) // this is no assign situation
            } else {
                t := v.getLeftValue(block , errs)
                leftTypes.append(t) // append even if it`s null
            }
        }
        // if block.inheritedAttribute.isCompileTask{
        convertExpressionsToNeeds(block , values , leftTypes , valueTypes)
        // }
        bin.left.multiValues = leftTypes
        if len(lefts) > len(valueTypes) {
            pos := values[len(values) - 1].pos
            errs.append(new error(sprintf("%s cannot assign %d value to %d detinations",
                        pos.errMsgPrefix(),
                        len(valueTypes),
                        len(lefts))))
        } else if len(lefts) < len(valueTypes) {
            pos := getExtraExpressionPos(values , len(lefts))
            errs.append(new error(sprintf("%s cannot assign %d value to %d detinations",
                        pos.errMsgPrefix(),
                        len(valueTypes),
                        len(lefts))))
        }
        for k , v := range leftTypes {
            if v == null {
                left := lefts[k]
                if left == null {
                    continue
                }
                if left.Type != ExpressionTypeIdentifier {
                    continue
                }
                identifier := left.data.(ExpressionIdentifier)
                if identifier.name == UnderScore {
                    continue
                }
                if k >= len(valueTypes) {
                    continue
                }
                if valueTypes[k] == null {
                    continue
                }
                vd := new Variable()
                vd.name = identifier.name
                vd.pos = valueTypes[k].pos
                vd.Type = valueTypes[k]
                vd.used = true
                identifier.Variable = vd
                //error should not be handle this time
                block.insert(identifier.name , vd.pos , vd)
                continue
            }
            if k >= len(valueTypes) {
                continue
            }
            if valueTypes[k] == null {
                continue
            }
            if false == leftTypes[k].assignAble(block , errs , valueTypes[k]) {
                errs.append(new error(sprintf("%s cannot assign '%s' to '%s'",
                            errMsgPrefix(valueTypes[k].pos),
                            valueTypes[k].typeString() , leftTypes[k].typeString())))
            }
        }
        voidReturn := mkVoidType(e.pos)
        if len(lefts) > 1 {
            return voidReturn
        }
        if len(lefts) == 0 || leftTypes[0] == null {
            return voidReturn
        }
        if e.isStatementExpression == false {
            left := lefts[0]
            if left.Type == ExpressionTypeIdentifier {
                t := left.data.(ExpressionIdentifier)
                if t.name == UnderScore {
                    return voidReturn
                } else {
                    if null != t.Variable {
                        t.Variable.used = true
                    }
                }
            }
        }
        // here is safe
        valueType = leftTypes[0].cloneType()
        valueType.pos = e.pos
    }
}


