 

public class StatementContinue {
	public StatementFor StatementFor
	public defers       []StatementDefer
	public pos          Pos
	
	fn check(block Block) -> (errs []error) {
		if block.inheritedAttribute.forContinue == null {
			return []error{new error(sprintf("%s 'continue' can`t in this scope",
				this.pos.ErrMsgPrefix())) }
		}
		if block.inheritedAttribute.Defer != null {
			return []error{new error(sprintf("%s cannot has 'continue' in 'defer'",
				this.pos.ErrMsgPrefix()))}
		}
		this.StatementFor = block.inheritedAttribute.forContinue
		this.defers = []StatementDefer{}
		this.mkDefers(block)
		return null
	}

	fn mkDefers(block Block) {
		if block.isForBlock {
			this.defers.appendAll(block.defers)
			return
		}
		this.mkDefers(block.outer)
	}

}

