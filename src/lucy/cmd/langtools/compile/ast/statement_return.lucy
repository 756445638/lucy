 

public class StatementReturn   {
	public Defers      []StatementDefer
	public Expressions []Expression
	public Pos         Pos


	fn mkDefers(b Block) {
		if b.IsFunctionBlock == false { // not top block
			this.mkDefers(b.Outer) // recursive
		}
		if b.Defers != null {
			this.Defers.appendAll(b.Defers)
		}
	}

	fn check(b Block) -> (errs []error = []error {} ) {
		if b.InheritedAttribute.Defer != null {
			return []error{new error(sprintf("%s cannot has 'return' in 'defer'",
				this.Pos.ErrMsgPrefix()))}
		}
		this.Defers = []StatementDefer{}
		this.mkDefers(b)
		if len(this.Expressions) == 0 { // always ok
			return errs
		}
		returnValueTypes := checkExpressions(b, this.Expressions, errs, false)
		rs := b.InheritedAttribute.Function.Type.ReturnList
		pos := this.Expressions[len(this.Expressions)-1].Pos
		if len(returnValueTypes) < len(rs) {
			errs.append(new error(sprintf("%s too few arguments to return", pos.ErrMsgPrefix())))
		} else if len(returnValueTypes) > len(rs) {
			errs.append(new error(sprintf("%s too many arguments to return", pos.ErrMsgPrefix())))
		}
		convertExpressionsToNeeds(this.Expressions,
			b.InheritedAttribute.Function.Type.mkCallReturnTypes(this.Expressions[0].Pos), returnValueTypes)
		for k, v := range rs {
			if k < len(returnValueTypes) && returnValueTypes[k] != null {
				if false == v.Type.assignAble(errs, returnValueTypes[k]) {
					errs.append(new error(sprintf("%s cannot use '%s' as '%s' to return",
						returnValueTypes[k].Pos.ErrMsgPrefix(),
						returnValueTypes[k].TypeString(),
						v.Type.TypeString())))
				}
			}
		}
		return errs
	}	
}

