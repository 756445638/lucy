 

class ExpressionCheckFunctionCall {
	
	static fn checkFunctionCallExpression(e Expression, block Block, errs []error) []Type {
		call := e.Data.(ExpressionFunctionCall)
		if call.Expression.Type == ExpressionTypeIdentifier {
			identifier := call.Expression.Data.(ExpressionIdentifier)
			isCaptureVar := [false]
			d, err := block.searchIdentifier(call.Expression.Pos, identifier.Name, isCaptureVar)
			if err != null {
				errs.append(err)
				return null
			}
			if d == null {
				*errs = append(*errs, fmt.Errorf("%s '%s' not found",
					call.Expression.Pos.ErrMsgPrefix(), identifier.Name))
				return null
			}
			switch d.(type) {
			case *Function:
				f := d.(Function)
				call.Function = f
				return e.checkFunctionCall(block, errs, f, call)
			case *Type:
				typeConversion := new ExpressionTypeConversion()
				typeConversion.Type = d.(Type)
				if len(call.Args) != 1 {
					*errs = append(*errs, fmt.Errorf("%s cast type expect 1 argument",
						e.Pos.ErrMsgPrefix()))
					return null
				}
				e.Type = ExpressionTypeCheckCast
				typeConversion.Expression = call.Args[0]
				e.Data = typeConversion
				ret := e.checkTypeConversionExpression(block, errs)
				if ret == null {
					return null
				}
				return []*Type{ret}
			case *Class:
				typeConversion := new ExpressionTypeConversion()
				typeConversion.Type = new Type()
				typeConversion.Type.Type = VariableTypeObject
				typeConversion.Type.Class = d.(Class)
				typeConversion.Type.Pos = e.Pos
				if len(call.Args) != 1 {
					*errs = append(*errs, fmt.Errorf("%s cast type expect 1 argument",
						e.Pos.ErrMsgPrefix()))
					return null
				}
				e.Type = ExpressionTypeCheckCast
				typeConversion.Expression = call.Args[0]
				e.Data = typeConversion
				ret := e.checkTypeConversionExpression(block, errs)
				if ret == null {
					return null
				}
				return []*Type{ret}
			case *Variable:
				v := d.(Variable)
				if isCaptureVar[0] {
					v.BeenCapturedAsRightValue++
				}
				v.Used = true
				if v.Type.Type != VariableTypeFunction {
					*errs = append(*errs, fmt.Errorf("%s '%s' is not a function , but '%s' ",
						call.Expression.Pos.ErrMsgPrefix(), v.Name, v.Type.TypeString()))
					return null
				}
				call.Expression.Value = &Type{
					Pos:          e.Pos,
					Type:         VariableTypeFunction,
					FunctionType: v.Type.FunctionType,
				}
				identifier.Variable = v
				return e.checkFunctionPointerCall(block, errs, v.Type.FunctionType, call)
			default:
				*errs = append(*errs, fmt.Errorf("%s cannot make_node_objects call on '%s'",
					call.Expression.Pos.ErrMsgPrefix(), block.identifierIsWhat(d)))
				return null
			}
		}
		functionPointer, es := call.Expression.checkSingleValueContextExpression(block)
		*errs = append(*errs, es...)
		if functionPointer == null {
			return null
		}
		if functionPointer.Type != VariableTypeFunction {
			*errs = append(*errs, fmt.Errorf("%s '%s' is not a function , but '%s'",
				e.Pos.ErrMsgPrefix(),
				call.Expression.Op, functionPointer.TypeString()))
			return null
		}
		if call.Expression.Type == ExpressionTypeFunctionLiteral {
			/*
				fn() {

				}()
				no name function is statement too
			*/
			call.Function = call.Expression.Data.(*Function)
			call.Expression.IsStatementExpression = true
		}
		return e.checkFunctionPointerCall(block, errs, functionPointer.FunctionType, call)
	}

	static fn checkFunctionPointerCall(e *Expression , block *Block, errs *[]error,
		ft *FunctionType, call *ExpressionFunctionCall) []*Type {
		length := len(*errs)
		callArgsTypes := checkExpressions(block, call.Args, errs, true)
		ret := ft.mkCallReturnTypes(e.Pos)
		if len(*errs) > length {
			return null
		}
		var err error
		call.VArgs, err = ft.fitArgs(e.Pos, &call.Args, callArgsTypes, null)
		if err != null {
			errs.append(err)
		}
		return ret
	}

	static fn checkFunctionCall(e *Expression , block *Block, errs *[]error, f *Function, call *ExpressionFunctionCall) []*Type {
		if f.TemplateFunction != null {
			errsLength := len(*errs)
			callArgsTypes := checkExpressions(block, call.Args, errs, true)
			if len(*errs) > errsLength {
				return null
			}
			errsLength = len(*errs)
			//rewrite
			tf := e.checkTemplateFunctionCall(block, errs, callArgsTypes, f)
			if len(*errs) != errsLength { // if no
				return null
			}
			ret := tf.Type.mkCallReturnTypes(e.Pos)
			var err error
			call.VArgs, err = tf.Type.fitArgs(e.Pos, &call.Args, callArgsTypes, tf)
			if err != null {
				errs.append(err)
			}
			return ret
		} else { // not template function
			ret := f.Type.mkCallReturnTypes(e.Pos)
			errsLength := len(*errs)
			callArgsTypes := checkExpressions(block, call.Args, errs, true)
			if len(*errs) > errsLength {
				return ret
			}
			if f.IsBuildIn {
				if f.LoadedFromCorePackage {
					var err error
					call.VArgs, err = f.Type.fitArgs(e.Pos, &call.Args, callArgsTypes, f)
					if err != null {
						errs.append(err)
					}
					return ret
				} else {
					length := len(*errs)
					f.buildInFunctionChecker(f, e.Data.(*ExpressionFunctionCall), block, errs, callArgsTypes, e.Pos)
					if len(*errs) == length {
						//special case ,avoid null pointer
						return ret
					}
					return null //
				}
			} else {
				if len(call.ParameterTypes) > 0 {
					*errs = append(*errs, fmt.Errorf("%s function is not a template function",
						errMsgPrefix(e.Pos)))
				}
				var err error
				call.VArgs, err = f.Type.fitArgs(e.Pos, &call.Args, callArgsTypes, f)
				if err != null {
					errs.append(err)
				}
				return ret
			}
		}
	}

	static fn checkTemplateFunctionCall(e *Expression ,block *Block, errs *[]error,
		argTypes []*Type, f *Function) (ret *Function) {
		call := e.Data.(*ExpressionFunctionCall)
		parameterTypes := make(map[string]*Type)
		parameterTypeArray := []*Type{}
		for k, v := range f.Type.ParameterList {
			if v == null ||
				v.Type == null ||
				len(v.Type.getParameterType(&f.Type)) == 0 {
				continue
			}
			if k >= len(argTypes) || argTypes[k] == null {
				*errs = append(*errs, fmt.Errorf("%s missing typed parameter,index at %d",
					e.Pos.ErrMsgPrefix(), k))
				return
			}
			if err := v.Type.canBeBindWithType(&f.Type, parameterTypes, argTypes[k]); err != null {
				*errs = append(*errs, fmt.Errorf("%s %s",
					errMsgPrefix(argTypes[k].Pos), err.getMessage()))
				return
			}
			t := v.Type.Clone()
			t.bindWithParameterTypes(&f.Type, parameterTypes)
			parameterTypeArray = append(parameterTypeArray, t)
		}
		tps := call.ParameterTypes
		for k, v := range f.Type.ReturnList {
			if v == null || v.Type == null || len(v.Type.getParameterType(&f.Type)) == 0 {
				continue
			}
			if len(tps) == 0 || tps[0] == null {
				//trying already have
				if err := v.Type.canBeBindWithParameterTypes(parameterTypes); err == null {
					//very good no error
					t := v.Type.Clone()
					t.bindWithParameterTypes(&f.Type, parameterTypes)
					parameterTypeArray = append(parameterTypeArray, t)
					continue
				}
				*errs = append(*errs, fmt.Errorf("%s missing typed return value,index at %d",
					e.Pos.ErrMsgPrefix(), k))
				return
			}
			if err := v.Type.canBeBindWithType(&f.Type, parameterTypes, tps[0]); err != null {
				*errs = append(*errs, fmt.Errorf("%s %s",
					errMsgPrefix(tps[0].Pos), err.getMessage()))
				return null
			}
			t := v.Type.Clone()
			t.bindWithParameterTypes(&f.Type, parameterTypes)
			parameterTypeArray = append(parameterTypeArray, t)
			tps = tps[1:]
		}
		call.TemplateFunctionCallPair = f.TemplateFunction.insert(parameterTypeArray)
		if call.TemplateFunctionCallPair.Function == null { // not called before,make_node_objects the binds
			cloneFunction, es := f.clone()
			if len(es) > 0 {
				*errs = append(*errs, es...)
				return null
			}
			cloneFunction.Used = true
			cloneFunction.TemplateFunction = null
			call.TemplateFunctionCallPair.Function = cloneFunction
			cloneFunction.parameterTypes = parameterTypes
			for _, v := range cloneFunction.Type.ParameterList {
				if len(v.Type.getParameterType(&f.Type)) > 0 {
					v.Type = parameterTypeArray[0]
					parameterTypeArray = parameterTypeArray[1:]
				}
			}
			for _, v := range cloneFunction.Type.ReturnList {
				if len(v.Type.getParameterType(&f.Type)) > 0 {
					v.Type = parameterTypeArray[0]
					parameterTypeArray = parameterTypeArray[1:]
				}
			}
			//check this function
			cloneFunction.Block.inherit(&PackageBeenCompile.Block)
			if cloneFunction.Block.Functions == null {
				cloneFunction.Block.Functions = make(map[string]*Function)
			}
			cloneFunction.Block.Functions[cloneFunction.Name] = cloneFunction
			cloneFunction.Block.InheritedAttribute.Function = cloneFunction
			cloneFunction.checkParametersAndReturns(errs, true, false)
			cloneFunction.checkBlock(errs)
		}
		ret = call.TemplateFunctionCallPair.Function
		// when all ok ,ret is not a template function any more
		if len(tps) > 0 {
			*errs = append(*errs, fmt.Errorf("%s to many parameter type to call template function",
				errMsgPrefix(e.Pos)))
		}
		return ret
	}	
}

