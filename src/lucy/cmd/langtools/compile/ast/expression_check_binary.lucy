class ExpressionCheckBinary {
	
	static fn check(e Expression , block Block, errs []error) -> (result Type) {
		bin := e.Data.(ExpressionBinary)
		left, es := bin.Left.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		right, es := bin.Right.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if left != null {
			if err := left.rightValueValid(); err != null {
				errs.append(err)
				return null
			}
		}
		if right != null {
			if err := right.rightValueValid(); err != null {
				errs.append(err)
				return null
			}
		}

		// &&  ||
		if e.Type == ExpressionTypeLogicalOr ||
			e.Type == ExpressionTypeLogicalAnd {
			result = new Type()
			result.Type = VariableTypeBool
			result.Pos = e.Pos 
			if left == null || right == null {
				return result
			}
			if left.Type != VariableTypeBool ||
				right.Type != VariableTypeBool {
				errs.append(e.binaryWrongOpErr())
			}
			return result
		}
		// & |
		if e.Type == ExpressionTypeOr ||
			ExpressionTypeAnd == e.Type ||
			ExpressionTypeXor == e.Type {
			if left == null || right == null {
				if left != null && left.IsNumber() {
					result := left.Clone()
					result.Pos = e.Pos
					return result
				}
				if right != null && right.IsNumber() {
					result := right.Clone()
					result.Pos = e.Pos
					return result
				}
				return null
			}
			if left.isInteger() == false || left.assignAble(errs, right) == false {
				errs.append(e.binaryWrongOpErr())
			}
			result = left.Clone()
			result.Pos = e.Pos
			return result
		}
		if e.Type == ExpressionTypeLsh ||
			e.Type == ExpressionTypeRsh {
			if left == null || right == null {
				if left != null && left.IsNumber() {
					result := left.Clone()
					result.Pos = e.Pos
					return result
				}
				return null
			}
			if false == left.isInteger() ||
				right.isInteger() == false {
				errs.append(e.binaryWrongOpErr())
			}
			if right.Type == VariableTypeLong {
				bin.Right.convertToNumberType(VariableTypeInt)
			}
			result = left.Clone()
			result.Pos = e.Pos
			return result
		}
		if e.Type == ExpressionTypeEq ||
			e.Type == ExpressionTypeNe ||
			e.Type == ExpressionTypeGe ||
			e.Type == ExpressionTypeGt ||
			e.Type == ExpressionTypeLe ||
			e.Type == ExpressionTypeLt {
			result = &Type{
				Type: VariableTypeBool,
				Pos:  e.Pos,
			}
			if left == null || right == null {
				return result
			}
			//number
			switch left.Type {
			case VariableTypeBool:
				if right.Type != VariableTypeBool || e.isEqOrNe() == false {
					errs.append(e.binaryWrongOpErr())
				}
			case VariableTypeEnum:
				if left.assignAble(errs, right) == false {
					errs.append(e.binaryWrongOpErr())
				}
			case VariableTypeByte:
				fallthrough
			case VariableTypeShort:
				fallthrough
			case VariableTypeChar:
				fallthrough
			case VariableTypeInt:
				fallthrough
			case VariableTypeFloat:
				fallthrough
			case VariableTypeLong:
				fallthrough
			case VariableTypeDouble:
				if (left.isInteger() && right.isInteger()) ||
					(left.isFloat() && right.isFloat()) {
					if left.assignAble(errs, right) == false {
						if left.Type < right.Type {
							bin.Left.convertToNumberType(right.Type)
						} else {
							bin.Right.convertToNumberType(left.Type)
						}
					}
				} else {
					errs.append(e.binaryWrongOpErr())
				}
			case VariableTypeString:
				if right.Type == VariableTypeNull {
					if e.Type != ExpressionTypeEq && ExpressionTypeNe != e.Type {
						errs.append(e.binaryWrongOpErr())

					}
				} else {
					if right.Type != VariableTypeString {
						errs.append(e.binaryWrongOpErr())
					}
				}
			case VariableTypeNull:
				if right.IsPointer() == false || e.isEqOrNe() == false {
					errs.append(e.binaryWrongOpErr())
				}
			case VariableTypeMap:
				fallthrough
			case VariableTypeJavaArray:
				fallthrough
			case VariableTypeArray:
				fallthrough
			case VariableTypeObject:
				fallthrough
			case VariableTypeFunction:
				if left.assignAble(errs, right) == false || e.isEqOrNe() == false {
					errs.append(e.binaryWrongOpErr())
				}
			default:
				errs.append(e.binaryWrongOpErr())
			}
			return result
		}
		// + - * / %
		if e.Type == ExpressionTypeAdd ||
			e.Type == ExpressionTypeSub ||
			e.Type == ExpressionTypeMul ||
			e.Type == ExpressionTypeDiv ||
			e.Type == ExpressionTypeMod {
			if left == null || right == null {
				if left != null {
					result := left.Clone()
					result.Pos = e.Pos
					return result
				}
				if right != null {
					result := right.Clone()
					result.Pos = e.Pos
					return result
				}
				return null
			}
			//check string first
			if left.Type == VariableTypeString ||
				right.Type == VariableTypeString { // string is always ok
				if e.Type != ExpressionTypeAdd {
					errs.append(e.binaryWrongOpErr())
				}
				result = &Type{}
				result.Type = VariableTypeString
				result.Pos = e.Pos
				return result
			}
			if (left.isInteger() && right.isInteger()) ||
				(left.isFloat() && right.isFloat()) {
				if left.assignAble(errs, right) == false {
					if left.Type < right.Type {
						bin.Left.convertToNumberType(right.Type)
					} else {
						bin.Right.convertToNumberType(left.Type)
					}
				}
			} else {
				errs.append(e.binaryWrongOpErr())
			}
			result = left.Clone()
			result.Pos = e.Pos
			return result
		}
		return null
	}	
} 

