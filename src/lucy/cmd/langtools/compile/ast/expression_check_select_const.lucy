class ExpressionSelectConst {

	static fn check(e Expression , block Block, errs []error) ->(valueType Type) {
		selection := e.data.(ExpressionSelection)
		object, es := selection.Expression.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if object == null {
			return null
		}
		if object.Type != VariableTypeClass {
			errs.append(new error(sprintf("%s not a class , but '%s'",
				object.pos.ErrMsgPrefix(), object.typeString())))
			return null
		}
		if object.Class.block.constants == null ||
			object.Class.block.constants[selection.name] == null {
			errs.append(new error(sprintf("%s const '%s' not found",
				e.pos.ErrMsgPrefix(), selection.name)))
			return null
		}
		c := object.Class.block.constants[selection.name]
		e.fromConst(c)
		valueType = c.Type.Clone()
		valueType.pos = e.pos
	}
	
} 

