 
public class FunctionType {
	public TemplateNames    []NameWithPos
	public TemplateNamesMap map { string -> Pos }
	public ParameterList    []Variable
	public ReturnList       []Variable
	public VArgs            Variable

	fn reDefineParameterOrReturnVar(reDefine Variable) -> (err error){
		for _,v := range this.ParameterList{
			if v.name == reDefine.name {
				return new error(sprintf("%s reDefine parameter '%s'" , 
					v.pos.errMsgPrefix(), v.name))
			}
		}
		if this.VoidReturn() == false {
			for _,v := range this.ReturnList{
				if v.name == reDefine.name {
					return new error(sprintf("%s reDefine return variable '%s'" , 
						v.pos.errMsgPrefix(), v.name))
				}
			}
		}
	}
	

	public fn CheckTemplateNameDuplication() -> (errs []error) {
		errs = []error{}
		m := new map {string -> Pos}()
		for _, v := range this.TemplateNames {
			if p := m[v.name]; p != null {
				errMsg :=
					sprintf("%s duplicated name '%s' , first declaraed at:\n",
						v.pos.errMsgPrefix(), v.name)
				errMsg += sprintf("\t%s\n", p.errMsgPrefix())
				errs.append( new error(errMsg))
				continue
			}
			m[v.name] = v.pos
		}
		this.TemplateNamesMap = m
		return errs
	}

	fn haveTemplateName(name string) -> (have bool = this.TemplateNamesMap.keyExist(name)) {}


	fn Clone() -> (ret FunctionType) {
		ret = new FunctionType()
		ret.ParameterList = new []Variable(len(this.ParameterList))
		for k, _ := range ret.ParameterList {
			p := new Variable()
			//TODO :: clone
			p.Type = this.ParameterList[k].Type.Clone()
			ret.ParameterList[k] = p
		}
		ret.ReturnList = new []Variable(len(this.ReturnList))
		for k, _ := range ret.ReturnList {
			p := new Variable()
			//TODO :: clone
			p.Type = this.ReturnList[k].Type.Clone()
			ret.ReturnList[k] = p
		}
		return
	}
	fn typeString() -> (s string) {
		s = "("
		for k, v := range this.ParameterList {
			if v.name != "" {
				s += v.name + " "
			}
			s += v.Type.typeString()
			if v.defaultValueExpression != null {
				s += " = " + v.defaultValueExpression.op
			}
			if k != len(this.ParameterList)-1 {
				s += ","
			}
		}
		if this.VArgs != null {
			if len(this.ParameterList) > 0 {
				s += ","
			}
			if this.VArgs.name != "" {
				s += this.VArgs.name + " "
			}
			s += this.VArgs.Type.typeString()
		}
		s += ")"
		if this.VoidReturn() == false {
			s += "->( "
			for k, v := range this.ReturnList {
				if v.name != "" {
					s += v.name + " "
				}
				s += v.Type.typeString()
				if k != len(this.ReturnList)-1 {
					s += ","
				}
			}
			s += ")"
		}
		return s
	}

	fn searchName(name string) -> (v Variable) {
		if name == "" {
			return null
		}
		for _, v := range this.ParameterList {
			if name == v.name {
				return v
			}
		}
		if this.VoidReturn() == false {
			for _, v := range this.ReturnList {
				if name == v.name {
					return v
				}
			}
		}
		return null
	}

	fn equal(compare FunctionType) -> (equal bool) {
		if len(this.ParameterList) != len(compare.ParameterList) {
			return false
		}
		for k, v := range this.ParameterList {
			if false == v.Type.equal(compare.ParameterList[k].Type) {
				return false
			}
		}
		if (this.VArgs == null) != (compare.VArgs == null) {
			return false
		}

		if this.VArgs != null {
			if this.VArgs.Type.equal(compare.VArgs.Type) == false {
				return false
			}
		}
		if this.VoidReturn() != compare.VoidReturn() {
			return false
		}

		if this.VoidReturn() == false {
			for k, v := range this.ReturnList {
				if false == v.Type.equal(compare.ReturnList[k].Type) {
					return false
				}
			}
		}
		return true
	}

	fn callHave(ts []Type) -> (have string = "(") {
		for k, v := range ts {
			if v == null {
				continue
			}
			if v.name != "" {
				have += v.name + " "
			}
			have += v.typeString()
			if k != len(ts)-1 {
				have += ","
			}
		}
		have += ")"
	}

	public fn VoidReturn() ->(is bool) {
		return len(this.ReturnList) == 0 ||
			this.ReturnList[0].Type.Type == VariableTypeVoid
	}

	fn mkCallReturnTypes(pos Pos) ->(valueTypes []Type) {
		if this.ReturnList == null || len(this.ReturnList) == 0 {
			t := new Type()
			t.Type = VariableTypeVoid // means no return ;
			t.pos = pos
			return []Type{t}
		}
		ret := new []Type(len(this.ReturnList))
		for k, v := range this.ReturnList {
			ret[k] = v.Type.Clone()
			ret[k].pos = pos
		}
		return ret
	}

	fn getParameterTypes() ->(patameterTypes []Type) {
		ret := new []Type(len(this.ParameterList))
		for k, v := range this.ParameterList {
			ret[k] = v.Type
		}
		return ret
	}

	fn callArgsHasNoNil(ts []Type) ->(is bool)  {
		for _, t := range ts {
			if t == null {
				return false
			}
		}
		return true
	}

	fn fitArgs(
		from Pos,
		args []Expression,
		callArgsTypes []Type,
		f Function) -> (vArgs CallVariableArgs, err error) {
		if this.VArgs != null {
			vArgs = new CallVariableArgs()
			vArgs.NoArgs = true
			vArgs.Type = this.VArgs.Type
		}
		var haveAndWant string
		if this.callArgsHasNoNil(callArgsTypes) {
			haveAndWant = sprintf("\thave %s\n", this.callHave(callArgsTypes))
			haveAndWant += sprintf("\twant %s\n", this.wantArgs())
		}
		errs := []error{}
		if len(callArgsTypes) > len(this.ParameterList) {
			if this.VArgs == null {
				errMsg := sprintf("%s too many paramaters to call\n", errMsgPrefix(from))
				errMsg += haveAndWant
				err = new error(sprintf(errMsg))
				return
			}
			v := this.VArgs
			for _, t := range callArgsTypes[len(this.ParameterList):] {
				if t == null { // some error before
					return
				}
				if t.isVariableArgs {
					if len(callArgsTypes[len(this.ParameterList):]) > 1 {
						errMsg := sprintf("%s too many argument to call\n",
							errMsgPrefix(t.pos))
						errMsg += haveAndWant
						err = new error(sprintf(errMsg))
						return
					}
					if false == v.Type.assignAble(errs, t) {
						err = new error(sprintf("%s cannot use '%s' as '%s'",
							errMsgPrefix(t.pos),
							t.typeString(), v.Type.typeString()))
						return
					}
					vArgs.PackArray2VArgs = true
					continue
				}
				if false == v.Type.array.assignAble(errs, t) {
					err = new error(sprintf("%s cannot use '%s' as '%s'",
						errMsgPrefix(t.pos),
						t.typeString(), v.Type.typeString()))
					return
				}
			}
			vArgs.NoArgs = false
			k := len(this.ParameterList)
			vArgs.Length = len(callArgsTypes) - k
			vArgs.expressions = args[k:]
			vArgs.Length = len(callArgsTypes) - k
		}
		if len(callArgsTypes) < len(this.ParameterList) {
			if f != null && f.HaveDefaultValue && len(callArgsTypes) >= f.DefaultValueStartAt {
				for i := len(callArgsTypes); i < len(f.Type.ParameterList); i++ {
					args.append(f.Type.ParameterList[i].defaultValueExpression)
				}
			} else { // no default value
				errMsg := sprintf("%s too few paramaters to call\n", errMsgPrefix(from))
				errMsg += haveAndWant
				err = new error(sprintf(errMsg))
				return
			}
		}

		for k, v := range this.ParameterList {
			if k < len(callArgsTypes) && callArgsTypes[k] != null {
				if v.Type.assignAble(errs, callArgsTypes[k]) {
					continue
				}
				//TODO :: convert or not ???
				errMsg := sprintf("%s cannot use '%s' as '%s'",
					errMsgPrefix(callArgsTypes[k].pos),
					callArgsTypes[k].typeString(), v.Type.typeString())
				err = new error(sprintf(errMsg))
				return
			}
		}

		return
	}

	
	fn wantArgs() -> (want string = "(") {
		for k, v := range this.ParameterList {
			want += v.name + " "
			want += v.Type.typeString()
			if k != len(this.ParameterList)-1 {
				want += ","
			}
		}
		if this.VArgs != null {
			if len(this.ParameterList) > 0 {
				want += ","
			}
			want += this.VArgs.name + " "
			want += this.VArgs.Type.typeString()
		}
		want += ")"
		return want
	}

}


public class CallVariableArgs {
	public expressions []Expression
	public Length      int
	/*
		a := new int[](10)
		print(a...)
	*/
	public PackArray2VArgs bool
	public NoArgs          bool
	public Type            Type
}