import "lucy/cmd/langtools/compile/jvm/cg"


public class StatementLabel {
	public used                bool
	public CodeOffsetGenerated bool
	public CodeOffset          int
	public block               Block
	public name                string
	public Exits               []cg.Exit
	public Statement           Statement
	public pos                 Pos

	/*
	defer {
		xxx:
	}
	defer block could be compile multi times,
	should reset the label
	*/

	
	fn Reset() {
		this.CodeOffsetGenerated = false
		this.CodeOffset = -1
		this.Exits = []cg.Exit{}
	}
	
	// check this label is read to goto
	fn Ready(from Pos) ->(err error) {
		ss := []Statement{}
		for _, v := range this.block.statements {
			if v.StatementLabel == this { // this is me
				break
			}
			if v.isVariableDefinition() && v.Checked == false {
				ss.append(v)
			}
		}
		if len(ss) == 0 {
			return null
		}
		/*
			if false {
				if true {
					// jump over variable definition not allow
					goto some ;
				}
			}
			a := false ;
			some:
		*/
		errMsg := sprintf("%s cannot jump over variable definition:\n", from.ErrMsgPrefix())
		for _, v := range ss {
			errMsg += sprintf("\t%s constains variable definition\n", v.pos.ErrMsgPrefix())
		}
		return new error(errMsg)
	}
}


