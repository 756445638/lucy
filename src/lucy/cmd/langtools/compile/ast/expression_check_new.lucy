class ExpressionCheckNew {
	

	static  fn check(e Expression , block Block, errs []error) ->(valueType Type)  {
		no := e.Data.(ExpressionNew)
		err := no.Type.resolve(block)
		if err != null {
			errs.append(err)
			return null
		}
		if no.Type.Type == VariableTypeMap {
			return .checkNewMapExpression(e ,block, no, errs)
		}
		if no.Type.Type == VariableTypeArray {
			return .checkNewArrayExpression(e ,block, no, errs)
		}
		if no.Type.Type == VariableTypeJavaArray {
			return .checkNewJavaArrayExpression(e , block, no, errs)
		}
		// new object
		if no.Type.Type != VariableTypeObject {
			errs . append(new error( sprintf("%s cannot have new on type '%s'",
					no.Type.Pos.ErrMsgPrefix(), no.Type.TypeString())))
			return null
		}
		err = no.Type.Class.loadSelf(e.Pos)
		if err != null {
			errs . append(new error( sprintf("%s %s",
				no.Type.Pos.ErrMsgPrefix(), err.getMessage())))
			return null
		}
		if no.Type.Class.IsInterface() {
			errs . append(new error( sprintf("%s '%s' is interface",
				errMsgPrefix(no.Type.Pos), no.Type.Class.Name)))
			return null
		}
		if no.Type.Class.IsAbstract() {
			errs . append(new error( sprintf("%s '%s' is abstract",
				errMsgPrefix(no.Type.Pos), no.Type.Class.Name)))
			return null
		}
		ret := no.Type.Clone()
		ret.Type = VariableTypeObject
		ret.Pos = e.Pos
		errsLength := len(errs)
		callArgTypes := checkExpressions(block, no.Args, errs, true)
		if len(errs) > errsLength {
			return ret
		}
		ms, matched, err := no.Type.Class.accessConstructionMethod(e.Pos, errs, no, null, callArgTypes)
		if err != null {
			errs . append(new error( sprintf("%s %s", e.Pos.ErrMsgPrefix(), err.getMessage())))
			return ret
		}
		if matched {
			m := ms[0]
			if err := no.Type.Class.constructionMethodAccessAble(e.Pos, m); err != null {
				errs.append(err)
			}
			no.Construction = m
			return ret
		}
		errs.append(methodsNotMatchError(no.Type.Pos, no.Type.TypeString(), ms, callArgTypes))
		return ret
	}

	static fn checkNewMapExpression(e Expression , block Block, newMap ExpressionNew,
		errs []error) ->(valueType Type)  {
		if len(newMap.Args) > 0 {
			errs . append(new error( sprintf("%s new 'map' expect no arguments",
					errMsgPrefix(newMap.Args[0].Pos))))
		}
		ret := newMap.Type.Clone()
		ret.Pos = e.Pos
		return ret
	}

	static fn checkNewJavaArrayExpression(e Expression , block Block, newArray ExpressionNew,
		errs []error) ->(valueType Type) {
		return .checkNewArrayExpression(e , block, newArray, errs)
	}

	static fn checkNewArrayExpression(e Expression , block Block, newArray ExpressionNew,
		errs []error) ->(valueType Type) {
		ret := newArray.Type.Clone() // clone the type
		ret.Pos = e.Pos
		if len(newArray.Args) != 1 { //
			errs . append(new error( sprintf("%s new array expect at least 1 argument",
					errMsgPrefix(e.Pos))))
			return ret
		}
		amount, es := newArray.Args[0].checkSingleValueContextExpression(block)
		if es != null {
			errs.appendAll(es)
		}
		if amount == null {
			return ret
		}
		if amount.isInteger() == false {
			errs . append(new error( sprintf("%s argument must be 'int',but '%s'",
					errMsgPrefix(amount.Pos), amount.TypeString())))
		} else {
			if amount.Type == VariableTypeLong {
				newArray.Args[0].convertToNumberType(VariableTypeLong)
			}
			if newArray.Args[0].isLiteral() {
				if a := newArray.Args[0].getLongValue(); a < 0 {
					errs . append(new error( sprintf("%s '%d' is negative ",
							errMsgPrefix(amount.Pos), a)))
				}
			}
		}

		//no further checks
		return ret
	}
	
} 
