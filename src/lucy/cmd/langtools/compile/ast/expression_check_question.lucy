class ExpressionCheckQuestion {
	
	static fn check(e Expression , block Block, errs []error) ->(valueType Type) {
		question := e.data.(ExpressionQuestion)
		condition, es := question.Selection.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if condition != null {
			if condition.Type != VariableTypeBool {
				errs.append(new error(sprintf("%s not a bool expression",
						condition.pos.ErrMsgPrefix())))
			}
			if err := question.Selection.canBeUsedAsCondition(); err != null {
				errs.append(err)
			}
		}
		tType, es := question.True.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if tType == null {
			return null
		}
		if err := tType.rightValueValid(); err != null {
			errs.append(err)
			return null
		}
		if err := tType.isTyped(); err != null {
			errs.append(err)
			return null
		}
		valueType = tType.Clone()
		valueType.pos = e.pos
		fType, es := question.False.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if fType != null &&
			tType.assignAble(errs, fType) == false {
			errs.append(new error(sprintf("%s cannot use '%s' as '%s'",
				fType.pos.ErrMsgPrefix(), fType.typeString(), tType.typeString())))
		}
	}
} 


