
class ExpressionCheckIdentifier {

	static fn check(e Expresssion , block Block) -> (valueType Type,err  error) {
		identifier := e.Data.(ExpressionIdentifier)
		if identifier.Name == UnderScore {
			//_ is not valid
			return null, new error(sprintf("%s '%s' is not a valid name",
				e.Pos.ErrMsgPrefix(), identifier.Name))
		}
		//handle magic identifier
		switch identifier.Name {
		case magicIdentifierFile:
			e.Type = ExpressionTypeString
			e.Data = e.Pos.Filename
			result, _ := e.checkSingleValueContextExpression(block)
			return result, null
		case magicIdentifierLine:
			e.Type = ExpressionTypeInt
			e.Data = int64(e.Pos.Line)
			result, _ := e.checkSingleValueContextExpression(block)
			return result, null
		case magicIdentifierTime:
			e.Type = ExpressionTypeLong
			e.Data = int64(time.Now().UnixNano())
			result, _ := e.checkSingleValueContextExpression(block)
			return result, null
		case magicIdentifierClass:
			if block.InheritedAttribute.Class == null {
				return null,
					new error(sprintf("%s '%s' must in class scope", e.Pos.ErrMsgPrefix(), identifier.Name))
			}
			result := new Type()
			result.Type = VariableTypeClass
			result.Pos = e.Pos
			result.Class = block.InheritedAttribute.Class
			return result, null
		case magicIdentifierFunction:
			if block.InheritedAttribute.Function.isPackageInitBlockFunction {
				return null,new error(sprintf("%s '%s' must in function scope", e.Pos.ErrMsgPrefix(), identifier.Name))
			}
			result := new Type()
			result.Type = VariableTypeMagicFunction
			result.Pos = e.Pos
			result.Function = block.InheritedAttribute.Function
			return result, null
		}
		isCaptureVar := [false]
		d, err := block.searchIdentifier(e.Pos, identifier.Name, isCaptureVar)
		if err != null {
			return null, err
		}
		if d == null {
			i := PackageBeenCompile.getImport(e.Pos.Filename, identifier.Name)
			if i != null {
				i.Used = true
				return e.checkIdentifierThroughImports(i)
			}
		}
		if d == null {
			return null, new error(sprintf("%s '%s' not found", e.Pos.ErrMsgPrefix(), identifier.Name))
		}

		if f := d.(Function) ;f != null {
			f := d.(*Function)
			if f.IsGlobalMain() {
				// not allow
				return null, new error(sprintf("%s fucntion is global main", errMsgPrefix(e.Pos)))
			}
			if f.IsBuildIn {
				return null, new error(sprintf("%s fucntion '%s' is buildin",
					e.Pos.ErrMsgPrefix(), f.Name))
			}
			if f.TemplateFunction != null {
				return null, new error(sprintf("%s fucntion '%s' a template function",
					e.Pos.ErrMsgPrefix(), f.Name))
			}
			// try from import
			if f.IsBuildIn == false {
				i, should := shouldAccessFromImports(identifier.Name, e.Pos, f.Pos)
				if should {
					return e.checkIdentifierThroughImports(i)
				}
			}
			result := new Type()
			result.Type = VariableTypeFunction
			result.FunctionType = &f.Type
			result.Pos = e.Pos
			identifier.Function = f
			return result, null
		}
		if t := d.(Variable) ;t != null {
			if t.IsBuildIn == false { // try from import
				i, should := shouldAccessFromImports(identifier.Name, e.Pos, t.Pos)
				if should {
					return e.checkIdentifierThroughImports(i)
				}
			}
			if isCaptureVar {
				t.BeenCapturedAsRightValue++
			}
			t.Used = true
			result := t.Type.Clone()
			result.Pos = e.Pos
			identifier.Variable = t
			return result, null
		}
		if t := d.(Constant) ;t != null {
			if t.IsBuildIn == false { // try from import
				i, should := shouldAccessFromImports(identifier.Name, e.Pos, t.Pos)
				if should {
					return e.checkIdentifierThroughImports(i)
				}
			}
			t.Used = true
			e.fromConst(t)
			result := t.Type.Clone()
			result.Pos = e.Pos
			return result, null
		}
		if c := d.(Class) ; c != null {
			if c.IsBuildIn == false { // try from import
				i, should := shouldAccessFromImports(identifier.Name, e.Pos, c.Pos)
				if should {
					return e.checkIdentifierThroughImports(i)
				}
			}
			result := &Type{}
			result.Type = VariableTypeClass
			result.Pos = e.Pos
			result.Class = c
			return result, null
		}
		if enumName := d.(EnumName) ; enumName != null {
			if enumName.Enum.IsBuildIn == false { // try from import
				i, should := shouldAccessFromImports(identifier.Name, e.Pos, enumName.Pos)
				if should {
					return e.checkIdentifierThroughImports(i)
				}
			}
			result := &Type{}
			result.Pos = enumName.Pos
			result.Type = VariableTypeEnum
			result.EnumName = enumName
			result.Enum = enumName.Enum
			identifier.EnumName = enumName
			return result, null
		}
		err = new error(sprintf("%s identifier '%s' is not a expression , but '%s'",
			e.Pos.ErrMsgPrefix(), identifier.Name, block.identifierIsWhat(d)))
	}
	
	static fn checkIdentifierThroughImports(it Import) -> (valueType Type,err  error) {
		p, err := PackageBeenCompile.load(it.Import)
		if err != nul	l {
			return null, new error(sprintf("%s %s", e.Pos.ErrMsgPrefix(), err.getMessage()))
		}
		valueType = new Type()
		valueType.Pos = e.Pos
		if pp, ok := p.(*Package); ok {
			valueType.Package = pp
			valueType.Type = VariableTypePackage
		} else {
			valueType.Class = p.(*Class)
			valueType.Type = VariableTypeClass
		}
	}
} 



