
import "lucy/os"
import "lucy/cmd/langtools/compile/common"
import "java/lang/Object"
import "lucy/cmd/langtools/common" as langtoolsCommon

public class Package {
	public name                         string
	public block                        Block = new Block() // package always have a default block
	files                               map {string -> SourceFile}
	public initFunctions                []Function
	public nErrors2Stop                 int // number of errors should stop compile
	errors                       []error
	statementLevelFunctions      []Function
	statementLevelClass          []Class
	disableCheckUnuse  			 bool 

	public javaPackage    JavaPackage   
	public matchFile string 
	public matchLine int 
	public printFileMatchInfo bool 
	public loader loadImport
	
	/*
		for lucy tool goto definition
	*/
	private locateDefinition Pos
	public locateDefinitionBaseOn Object
	public loadLucyPackageName []string 
	
	/*
		for usage 
	*/
	public findUsage []Usage 
	public findUsageIsGlobal bool 
	
	public onlyAnalyzeGlobals bool 

	public renameIsGlobal bool 
	
	public autoCompletionItems []AutoCompletionItem
	
	public lucyBuildInPackage Package 
	

	public fn Package(name string , disableCheckUnuse bool , loader loadImport){
		this.super()
		this.disableCheckUnuse = disableCheckUnuse
		this.name = name
		this.matchLine = -1
		this.loader = loader
	}
	

	public fn setLocationDefinition(x Object) {
		this.locateDefinition = getPos(x)
		if this.locateDefinition == null {
			printf("cannot get pos from '%s'\n" , x.toString())
		}
		this.locateDefinitionBaseOn = x
	}
	
	public fn getLocationDefinition() -> (ret Pos = this.locateDefinition){}
	
	
	public fn matchFileAndLine(file string , name string ,  startLine int , endLine int ) ->(need bool){
		if this.matchFile == null || this.matchFile == "" {  // no match at all 
			if this.printFileMatchInfo {
				print(file , name , "need analyze because no match file")
			}
			return true 
		}
		need =  langtoolsCommon.twoPathEqual(this.matchFile , file) 
		if need == false {  // file not match
			if this.printFileMatchInfo {
				printf("file '%s' '%s' not match\n" , this.matchFile , file )
			}
			return false  
		}
		if this.matchLine == -1 {
			print(file , name , "need analyze")
			return  true // no match line 
		}
		// t
		if false == (startLine <= this.matchLine && this.matchLine <= endLine) {
			if this.printFileMatchInfo {
				printf("'%s' not match\n" , name)
				print(this.matchLine , startLine , endLine)
			}
			return false 
		}
		if this.printFileMatchInfo {
			print(file , name , "need analyze")
		}
		return true 
	}
	
	
	
	public fn locateDefinitionOrAutoCompletionFetched() ->(fetched bool) {
		fetched = this.locateDefinition != null || 
			len(this.autoCompletionItems) > 0 
	}

	public fn hasMain() -> (has bool)   {
		return this.block.functions != null && 
			this.block.functions.keyExist(MainFunctionName)
	}
	
	fn isSame(compare Package) -> (is bool) {
		return this.name == compare.name
	}

	fn markBuildIn() {
		for _, v := range this.block.variables {
			v.isBuildIn = true
		}
		for _, v := range this.block.constants {
			v.isBuildIn = true
		}
		for _, v := range this.block.enums {
			v.isBuildIn = true
		}
		for _, v := range this.block.classes {
			v.isBuildIn = true
		}
		for _, v := range this.block.functions {
			v.isBuildIn = true
			v.loadedFromCorePackage = true
		}
		for _, v := range this.block.typeAliases {
			v.isBuildIn = true
		}
	}

	fn loadCorePackage() -> (err error) {
		if this.name == common.CorePackage {
			return null
		}
		var pp Object
		pp, err = this.load(common.CorePackage)
		if err != null {
			return err
		}
		lucyBuildInPackage := pp.(Package)
		lucyBuildInPackage.markBuildIn()
		this.block.outer = lucyBuildInPackage.block
		lucyBuildInPackage.block.inheritedAttribute = new InheritedAttribute()
		this.lucyBuildInPackage = lucyBuildInPackage
		return null
	}
	
	fn getImport(file string, accessName string) -> (i Import) {
		if this.files == null {
			return null
		}
		if t := this.files[file]; t != null && t.imports != null {
			return t.imports[accessName]
		} 
		return null
	}

	fn getSourceFile(fileName string) -> (file SourceFile) {
		if this.files == null {
			return null
		}
		return this.files[fileName]
	}
	
	fn mkInitFunctions(bs []Block) {
		this.initFunctions = new []Function(len(bs))
		for k, b := range bs {
			b.isFunctionBlock = true
			f := new Function()
			b.Fn = f
			f.pos = b.pos
			f.block = b
			this.initFunctions[k] = f
			f.used = true
		}
	}
	
	fn shouldStop(errs []error) -> (should bool) {
		return len(this.errors)+len(errs) >= 
			this.nErrors2Stop
	}
	
	fn insert(nodes []TopNode) -> (errs []error = []error{}){
		if len(nodes) == 0 {
			errs = []error{new error("nothing to compile")}
			return
		}
		if this.block == null {
			this.block = new Block()
		}
		if this.block.inheritedAttribute == null {
			this.block.inheritedAttribute = new InheritedAttribute()
		}
		if err := this.loadCorePackage(); err != null {
			// fetal error 
			printf("load lucy buildin package failed,err:%s\n", err.getMessage())
			os.exit(1)
		}
		bs := []Block{}
		expressions := []Expression{}
		for _, v := range nodes {
			if _,ok := v.node.(Comment) ; ok {
				// no handle
				continue
			}
			if _,ok := v.node.(Line) ; ok {
				// no handle
				continue
			}
			if t,ok := v.node.(Block) ; ok {
				bs.append(t)
				continue
			}
			if t,ok := v.node.(Function) ; ok {
				t.isGlobal = true
				err := this.block.insert(t.name, t.pos, t)
				if err != null {
					errs.append(err)
				}
				continue
			}
			if t ,ok := v.node.(Enum) ; ok {
				t.isGlobal = true
				err := this.block.insert(t.name, t.pos,t)
				if err != null {
					errs.append(err)
				}
				continue
			}
			if t,ok := v.node.(Class) ; ok {
				t.isGlobal = true
				err := this.block.insert(t.name, t.pos, t)
				if err != null {
					errs.append(err)
				}
				continue
			}
			if t,ok := v.node.(TypeAlias) ; ok {
				err := this.block.insert(t.name, t.pos, t.Type)
				t.Type.alias = t
				if err != null {
					errs.append(err)
				}
				continue
			}
			if t,ok := v.node.(Constant) ; ok{
				t.isGlobal = true
				err := this.block.insert(t.name, t.pos, t)
				if err != null {
					errs.append(err)
				}
				continue
			}
			if t ,ok:= v.node.(Import) ; ok {
				if t.accessName != null && t.accessName == UnderScore {
					errs.append(new error(sprintf("%s '%s' is not a valid name" , t.pos.errMsgPrefix()  , UnderScore)))
				}else {
					err := this.insertImport(t)
					if err != null {
						errs.append(err)
					}
				}
			}
			if t ,ok:= v.node.(Expression) ; ok {
				if t.Type == ExpressionTypeVar || 
					t.Type == ExpressionTypeVarAssign {
					expressions.append(t)
					continue
				} 
				if t.isAutoCompletionIdenfier() {
					this.autoCompletionItems = AutoCompletionItem.getTopDefaultAutoCompletionItem()
					continue
				}
				errs.append(new error(sprintf("%s cannot have expression '%s' in top",
					t.pos.errMsgPrefix(), t.op)))
			}
		}
		
		if len(expressions) > 0 {
			s := new []Statement(len(expressions))
			for k, v := range expressions {
			    s[k] = new Statement()
				s[k].Type = StatementTypeExpression
				s[k].Expression = v
				s[k].pos = v.pos
			}
			b := new Block()
			b.pos = expressions[0].pos
			b.statements = s
			t := []Block{b}
			t.appendAll(bs)
			bs = t
		}
		this.mkInitFunctions(bs)
		return
	}

	public fn typeCheck(nodes []TopNode) -> (es []error = []error{}) {
		this.block.inheritedAttribute.p = this
		this.block.isPackageBlock = true 
		this.block.Package = this 
		this.errors = []error{}
		if this.nErrors2Stop <= 5 {
			this.nErrors2Stop = 10
		}
		es = this.errors
		if t := this.insert(nodes) ; len(t) > 0 {
			this.errors.appendAll(t)
		}
		this.errors.appendAll(this.block.checkConstants())
		if this.locateDefinitionOrAutoCompletionFetched() {
			return this.errors 
		}
		for _, v := range this.block.enums {
			v.name = this.name + "/" + v.name
			this.errors.appendAll(v.check(this.block))
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
		}
		if this.locateDefinitionOrAutoCompletionFetched() {
			return this.errors 
		}
		
		for _, v := range this.block.typeAliases {
			if v.alias.locateDefinition {
				this.setLocationDefinition(v.alias)
				return this.errors 
			}
			if v.alias.findUsage {
				u := new Usage()
                u.Type = "declaration"
                u.pos = v.pos 
				v.alias.findUsageInstances = [u]
				this.findUsageIsGlobal = true 
				this.findUsage = v.alias.findUsageInstances
			}
		}

		for _, v := range this.block.functions {
			if v.locateDefinition {
				this.setLocationDefinition(v)
				return this.errors 
			}
			if v.findUsage {
				u := new Usage()
                u.Type = "declaration"
                u.pos = v.pos 
				v.findUsageInstances = [u]
				this.findUsageIsGlobal = true 
				this.findUsage = v.findUsageInstances
			}
		}

		for _, v := range this.block.classes {
			if v.suggestExtendsOrImplements {
				items := new []AutoCompletionItem(2)
				items[0] = new AutoCompletionItem()
				items[0].Type = "keyword"
				items[0].name = "extends"
				items[1] = new AutoCompletionItem()
				items[1].Type = "keyword"
				items[1].name = "implements"
				this.autoCompletionItems = items
				return 
			}
			if v.locateDefinition {
				this.setLocationDefinition(v)
				return this.errors
			}
			v.name = this.name + "/" + v.name
			if v.findUsage {
				u := new Usage()
                u.Type = "declaration"
                u.pos = v.pos 
				v.findUsageInstances = [u]
				this.findUsageIsGlobal = true 
				this.findUsage = v.findUsageInstances
			}
		}
		
		for _, v := range this.block.typeAliases {
			err := v.resolve(this.block)
			if err != null {
				this.errors.append(err)
			}
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
		}

		for _, v := range this.block.functions {
			if v.isBuildIn {
				continue
			}
			v.block.inherit(this.block)
			v.block.inheritedAttribute.Function = v
			v.checkParametersAndReturns(this.errors, false, false)
			if v.isGlobalMain() {
				defineMainOK := false
				if len(v.Type.parameterList) == 1 {
					defineMainOK = v.Type.parameterList[0].Type.Type == VariableTypeArray &&
						v.Type.parameterList[0].Type.array.Type == VariableTypeString
				}
				if defineMainOK == false {
					this.errors.append(new error(sprintf("%s function '%s' expect declared as 'main(args []string)'",
						errMsgPrefix(v.pos), MainFunctionName)))
				}
			}
			if this.shouldStop(null) {
				return this.errors
			}
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
		}

		for _, v := range this.block.classes { 
			v.mkDefaultConstruction()
		}

		for _, v := range this.block.classes {
			v.block.inherit(this.block)
			assert(v.block.inheritedAttribute.p != null)
			this.errors.appendAll(v.block.checkConstants())
			v.block.inheritedAttribute.Class = v
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
		}
		
		for _, v := range this.block.classes {
			err := v.resolveFather()
			if err != null {
				this.errors.append(err)
			}
			this.errors.appendAll(v.resolveInterfaces())
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
			this.errors.appendAll(v.resolveFieldsAndMethodsType())
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
		}
		for _, v := range this.block.classes {
			assert(v.block.inheritedAttribute.p != null)
			es = v.checkPhase1()
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
			this.errors.appendAll(es)
			if this.shouldStop(null) {
				return this.errors
			}
		}
		for _, v := range this.initFunctions {
			this.errors.appendAll(v.check(this.block))
			if this.shouldStop(null) {
				return this.errors
			}
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
		}
		if this.onlyAnalyzeGlobals {
			return this.errors
		}
		for _, v := range this.block.functions {
			if v.templateFunction != null {
				// analyze at call 
				continue
			}
			if this.matchFileAndLine(v.pos.filename , v.name,   v.startLine , v.endLine ) == false {
				continue
			}
			this.errors.appendAll(v.checkReturnVarExpression())
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
		}
		for _, v := range this.block.classes {
			if this.matchFileAndLine(v.pos.filename ,v.name, v.startLine , v.endLine) == false {
				continue
			}
			this.errors.appendAll(v.checkPhase2())
			if this.shouldStop(null) {
				return this.errors
			}
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
		}
		for _, v := range this.block.functions {
			if v.isBuildIn {
				continue
			}
			if this.matchFileAndLine(v.pos.filename ,v.name,v.startLine , v.endLine) == false {
				continue
			}
			if v.templateFunction != null {
				continue
			}
			v.checkBlock(this.errors)
			if this.shouldStop(null) {
				return this.errors
			}
			if this.locateDefinitionOrAutoCompletionFetched() {
				return this.errors 
			}
		}
		for _, v := range this.statementLevelFunctions {
			v.isClosureFunction = v.closure.captureCount(v) > 0
		}
		for _, v := range this.statementLevelClass {
			for f, meta := range v.closure.functions {
				if f.isClosureFunction == false {
					continue
				}
				this.errors.append( new error(sprintf("%s trying to access capture function '%s' from outside",
					meta.pos.errMsgPrefix(), f.name)))
			}
		}
		this.errors.appendAll(this.checkUnUsedPackage())
		return this.errors
	}
	
	fn checkUnUsedPackage() -> (errs []error=[]error{}  ) {
		if this.disableCheckUnuse {
			return null
		}
		for _, v := range this.files {
			for _, i := range v.imports {
				if i.used == false {
					errMsg := sprintf("%s' imported not used" , i.Import)
					t := new CompileError(sprintf("%s %s" ,errMsgPrefix(i.pos) , errMsg)) 
					t.startPos = i.pos
					t.endPos = i.pos 
					t.err = errMsg
					errs.append(t)
				}
			}
		}
		return errs
	}
	
	fn insertSouceFiles(filenames []string) {
		if this.files == null {
			this.files = new map {string->SourceFile} ()
		}
		for v := range filenames {
			x := this.files[v]
			if x == null {
				x = new SourceFile(v)
				this.files[v] = x
			}
		}
	}

	public fn insertImport(i Import) -> (err error) {
		if i.findUsage {
			u := new Usage()
			u.Type = "import"
			u.pos = i.pos
			i.findUsageInstances = [u]
			this.findUsage = i.findUsageInstances
			this.findUsageIsGlobal = false  // false is also default
		}
		if this.files == null {
			this.files = new map {string->SourceFile} ()
		}
		x := this.files[i.pos.filename]
		if x == null {
			x = new SourceFile(i.pos.filename)
			this.files[i.pos.filename] = x
		}
		return x.insertImport(this.block , i)
	}

	public fn setFileDirty(filename string ) {
		//set modified file is "isDirty"
		//rename will use this 
		//
		this.files[filename].isDirty = true
	}
	
	public fn getDirtyFiles() ->(files map{string->bool}) {
		files = new map{string->bool}()
		for f := range this.files {
			if f.isDirty {
				files[f.filename] = true 
			}
		}
	}
	
	fn load(resource string) -> (x Object, err error) {
		if resource == null || resource == "" {
			return null , new error("null import name")
		}
		t, err := this.loader.loadImport(resource)
		if pp, ok := t.(Package); ok {
			if pp.javaPackage == null {
				if this.loadLucyPackageName == null {
					this.loadLucyPackageName = [resource]
				}else {
					this.loadLucyPackageName.append(resource)
				}
			}
		}
		if c, ok := t.(Class); ok && c != null {
			if c.isJava == false {
				return null, new error(sprintf("load lucy class not allow"))
			}
		}
		return t, err
	}
	
	fn loadClass(className string) -> (c Class,err error) {
		x, err := this.loader.loadImport(className)
		if err != null {
			return null, err
		}
		if t, ok := x.(Class); ok == false || t == null {
			return null, new error(sprintf("'%s' is not class", className))
		}
		cc := x.(Class)
		return cc, null
	}
}