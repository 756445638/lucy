
import "lucy/os"
import "lucy/cmd/langtools/compile/common"

public class Package {
	public name                         string
	public block                        Block = new Block() // package always have a default block
	files                        map { string -> SourceFile}
	public initFunctions                []Function
	public nErrors2Stop                 int // number of errors should stop compile
	errors                       []error
	public triggerPackageInitMethodName string //
	unUsedPackage                map{string ->  Import }
	statementLevelFunctions      []Function
	statementLevelClass          []Class
	disableCheckUnuse  						bool 
	
	/*
		for lucy tool goto definition
	*/
	public locateDefinition Pos  
	/*
		for lucy tool hover
	*/
	hover Hover
	javaPackage JavaPackage
	
	public fn Package(name string,disableCheckUnuse bool){
		this.super()
		assert(name != null )
		this.disableCheckUnuse = disableCheckUnuse
		this.name =  name
	}

	fn isSame(compare Package) -> (is bool) {
		return this.name == compare.name
	}

	fn markBuildIn() {
		for _, v := range this.block.variables {
			v.isBuildIn = true
		}
		for _, v := range this.block.constants {
			v.isBuildIn = true
		}
		for _, v := range this.block.enums {
			v.isBuildIn = true
		}
		for _, v := range this.block.Classes {
			v.isBuildIn = true
		}
		for _, v := range this.block.functions {
			v.isBuildIn = true
			v.loadedFromCorePackage = true
		}
		for _, v := range this.block.typeAliases {
			v.isBuildIn = true
		}
	}

	fn loadCorePackage() -> (err error) {
		if this.name == common.CorePackage {
			return null
		}
		pp, err := loaded.load(common.CorePackage)
		if err != null {
			return err
		}
		lucyBuildInPackage = pp.(Package)
		lucyBuildInPackage.markBuildIn()
		this.block.outer = lucyBuildInPackage.block
		lucyBuildInPackage.block.inheritedAttribute = new InheritedAttribute()
		return null
	}

	fn getImport(file string, accessName string) -> (i Import) {
		if this.files == null {
			return null
		}
		if t := this.files[file]; t != null && t.imports != null {
			return t.imports[accessName]
		} else {
			return null
		}
	}

	fn mkInitFunctions(bs []Block) {
		this.initFunctions = new []Function(len(bs))
		for k, b := range bs {
			b.isFunctionBlock = true
			f := new Function()
			b.Fn = f
			f.pos = b.pos
			f.block = b
			this.initFunctions[k] = f
			f.isPackageInitBlockFunction = true
			f.used = true
		}
	}

	fn shouldStop(errs []error) -> (should bool) {
		return len(this.errors)+len(errs) >= this.nErrors2Stop
	}

	fn insert(nodes []TopNode) -> ( errs []error = []error{}){
		if len(nodes) == 0 {
			errs = []error{new error("nothing to compile")}
			return
		}
		if this.block == null {
			this.block = new Block()
		}
		if this.block.inheritedAttribute == null {
			this.block.inheritedAttribute = new InheritedAttribute()
		}
		if err := this.loadCorePackage(); err != null {
			printf("load lucy buildin package failed,err:%s\n", err.getMessage())
			os.exit(1)
		}
		bs := []Block{}
		expressions := []Expression{}
		for _, v := range nodes {
			if t,ok := v.node.(Block) ; ok {
				bs.append(t)
				continue
			}
			if t,ok := v.node.(Function) ; ok {
				t.isGlobal = true
				err := this.block.insert(t.name, t.pos, t)
				if err != null {
					errs.append(err)
				}
				continue
			}
			if t ,ok := v.node.(Enum) ; ok {
				t.isGlobal = true
				err := this.block.insert(t.name, t.pos,t)
				if err != null {
					errs.append(err)
				}
				continue
			}
			if t,ok := v.node.(Class) ; ok {
				t.isGlobal = true
				err := this.block.insert(t.name, t.pos, t)
				if err != null {
					errs.append(err)
				}
				continue
			}

			if t,ok := v.node.(TypeAlias) ; ok {
				err := this.block.insert(t.name, t.pos, t.Type)
				t.Type.alias = t
				if err != null {
					errs.append(err)
				}
				continue
			}
			if t,ok := v.node.(Constant) ; ok{
				t.isGlobal = true
				err := this.block.insert(t.name, t.pos, t)
				if err != null {
					errs.append(err)
				}
				continue
			}
			if t ,ok:= v.node.(Import) ; ok {
				if t.accessName != null && t.accessName == UnderScore{
					if this.unUsedPackage == null {
						this.unUsedPackage = new map { string -> Import}()
					}
					this.unUsedPackage[t.Import] = t
				}else {
					err := this.insertImport(t)
					if err != null {
						errs.append(err)
					}
				}
			}
			if t ,ok:= v.node.(Expression) ; ok {
				if t.Type == ExpressionTypeVar || t.Type == ExpressionTypeVarAssign {
					expressions.append(t)
				} else {
					errs.append(new error(sprintf("%s cannot have '%s' in top",
						t.pos.errMsgPrefix(), t.op)))
				}	
			}
		}
		
		if len(expressions) > 0 {
			s := new []Statement(len(expressions))
			for k, v := range expressions {
			    s[k] = new  Statement()
				s[k].Type = StatementTypeExpression
				s[k].Expression = v
				s[k].pos = v.pos
			}
			b := new Block()
			b.pos = expressions[0].pos
			b.statements = s
			t := []Block{b}
			t.appendAll(bs)
			bs = t
		}
		this.mkInitFunctions(bs)
		return

	}

	public fn typeCheck(nodes []TopNode) -> (es []error) {
		this.block.inheritedAttribute.p = this
		if t := this.insert(nodes) ; len(t) > 0 {
			return t
		}
		if this.nErrors2Stop <= 2 {
			this.nErrors2Stop = 10
		}
		this.errors = []error{}
		if this.block == null {
		    panic("block is null")
		}
		this.errors.appendAll(this.block.checkConstants())
		for _, v := range this.block.enums {
			v.name = this.name + "/" + v.name
			this.errors.appendAll(v.check())
		}
		for _, v := range this.block.typeAliases {
			if v.locateDefinition {
				this.locateDefinition = v.pos 
			}
			err := v.resolve(this.block)
			if err != null {
				this.errors.append(err)
			}
		}
		for _, v := range this.block.functions {
			if v.isBuildIn {
				continue
			}
			v.block.inherit(this.block)
			v.block.inheritedAttribute.Function = v
			v.checkParametersAndReturns(this.errors, false, false)
			if v.isGlobalMain() {
				defineMainOK := false
				if len(v.Type.parameterList) == 1 {
					defineMainOK = v.Type.parameterList[0].Type.Type == VariableTypeArray &&
						v.Type.parameterList[0].Type.array.Type == VariableTypeString
				}
				if defineMainOK == false {
					this.errors.append(new error(sprintf("%s function '%s' expect declared as 'main(args []string)'",
							errMsgPrefix(v.pos), MainFunctionName)))
				}
			}
			if this.shouldStop(null) {
				return this.errors
			}
		}
		for _, v := range this.block.Classes {
			v.name = this.name + "/" + v.name
			this.errors.appendAll(v.block.checkConstants())
			v.mkDefaultConstruction()
			v.block.inherit(this.block)
			v.block.inheritedAttribute.Class = v
		}

		for _, v := range this.block.Classes {
			err := v.resolveFather()
			if err != null {
				this.errors.append(err)
			}
			this.errors.appendAll(v.resolveInterfaces())
			this.errors.appendAll (v.resolveFieldsAndMethodsType())
		}

		for _, v := range this.block.Classes {
			es = v.checkPhase1()
			this.errors.appendAll(es)
			if this.shouldStop(null) {
				return this.errors
			}
		}
		for _, v := range this.block.functions {
			if v.TemplateFunction != null {
				continue
			}
			this.errors.appendAll( v.checkReturnVarExpression())
		}
		for _, v := range this.initFunctions {
			this.errors.appendAll( v.check(this.block))
			if this.shouldStop(null) {
				return this.errors
			}
		}
		for _, v := range this.block.Classes {
			this.errors.appendAll( v.checkPhase2())
			if this.shouldStop(null) {
				return this.errors
			}
		}
		for _, v := range this.block.functions {
			if v.isBuildIn {
				continue
			}
			if v.TemplateFunction != null {
				continue
			}
			v.checkBlock(this.errors)
			if this.shouldStop(null) {
				return this.errors
			}
		}
		for _, v := range this.statementLevelFunctions {
			v.isClosureFunction = v.Closure.captureCount(v) > 0
		}
		for _, v := range this.statementLevelClass {
			for f, meta := range v.closure.functions {
				if f.isClosureFunction == false {
					continue
				}
				this.errors.append( new error(sprintf("%s trying to access capture function '%s' from outside",
						meta.pos.errMsgPrefix(), f.name)))
			}
		}
		if this.shouldStop(null) {
			return this.errors
		}
		//this.errors.appendAll(this.checkUnUsedPackage()...)
		return this.errors
	}

	


    /*
    //TODO::
	fn checkUnUsedPackage() -> (errs []error=[]error{}  ) {
		if common.compileFlags.disableCheckUnUse.getValue() {
			return null
		}
		for _, v := range this.files {
			for _, i := range v.imports {
				if i.used == false {
					errs = append(errs, new error(sprintf("%s '%s' imported not used",
						errMsgPrefix(i.pos), i.Import)))
				}
			}
		}
		for _, i := range this.unUsedPackage {
			pp, err := this.load(i.Import)
			if err != null {
				errs = append(errs, new error(sprintf("%s %s",
					errMsgPrefix(i.pos), err.getMessage())))
				continue
			}
			if ppp, ok := pp.(Package); ok == false {
				errs = append(errs, new error(sprintf("%s '%s' not a package",
					errMsgPrefix(i.pos), i.Import)))
			} else {
				if ppp.triggerPackageInitMethodName == "" {
					errs.append(new error(sprintf("%s  package named '%s' have no global vars and package "+
							        "init blocks, no need to trigger package init method",
							        errMsgPrefix(i.pos), i.Import)))
				}
			}
		}
		return errs
	}
    */




	fn insertImport(i Import) -> (err error) {
		if this.files == null {
			this.files = new map { string -> SourceFile } ()
		}
		x := this.files[i.pos.filename]
		if x == null {
			x = new SourceFile()
			this.files[i.pos.filename] = x
		}
		return x.insertImport(i)
	}	
}









