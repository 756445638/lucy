// all rights reserved , check the LICENSE file

import "java/lang/Object"

public class Type {
	public Type                    VariableTypeKind
	public isBuildIn               bool             // build in type alias
	public isVariableArgs          bool             // int ...
	public resolved                bool
	public pos                     Pos
	public name                    string
	public theArray                Type
	public theClass                Class
	public theEnum                 Enum
	public theEnumName             EnumName         // indicate a const
	public theFunction             Function
	public theFunctionType         FunctionType
	public theMap                  Map
	public thePackage              Package
	public theAlias                TypeAlias
	public locateDefinition        bool
	public locatePackageDefinition bool
	public packagePos              Pos
	public findUsage               bool
	public getHover                bool
	public autoCompletion          bool
	/*
		a // this is a inline comment
	*/
	public inlineComment string //   in

	public containsLf bool // contains "\n"

	public fn containsLfOrInlineComment() -> (contains bool) {
		return this.containsLf || this.inlineComment != null
	}
	// copy to t 
	fn copyThis2Another(another Type) {
		another.Type = this.Type
		another.isBuildIn = this.isBuildIn
		another.isVariableArgs = this.isVariableArgs
		another.pos = this.pos
		another.name = this.name
		another.theArray = this.theArray
		another.theClass = this.theClass
		another.theEnum = this.theEnum
		another.theEnumName = this.theEnumName
		another.theFunction = this.theFunction
		another.theFunctionType = this.theFunctionType
		another.theMap = this.theMap
		another.thePackage = this.thePackage
		another.theAlias = this.theAlias
	}

	public fn isIntegerNotTheLong() -> (is bool){
		return this.isInteger() && this.Type != VariableTypeLong 
	}

	fn validForTypeAssertOrConversion() -> (valid bool) {
		if this.isPointer() == false {
			return false
		}
		return true
		// object or string
		if this.Type == VariableTypeObject ||
			this.Type == VariableTypeString {
			return true
		}
		if this.Type == VariableTypeArray &&
			this.theArray.isPrimitive() {
			return true
		}
		if this.Type == VariableTypeJavaArray {
			if this.theArray.isPointer() {
				return this.theArray.validForTypeAssertOrConversion()
			} else {
				return true
			}

		}
		return false
	}

	fn mkDefaultValueExpression() -> (d Expression) {
		e := new Expression()
		e.op = "defaultValueByCompiler"
		e.isCompilerAuto = true
		e.pos = this.pos
		e.value = this.cloneType()
		switch this.Type {
			case VariableTypeBool:
				e.Type = ExpressionTypeBool
				e.boolValue = false
			case VariableTypeByte:
				e.Type = ExpressionTypeByte
				e.longValue = long(0)
			case VariableTypeShort:
				e.Type = ExpressionTypeInt
				e.longValue = long(0)
			case VariableTypeChar:
				e.Type = ExpressionTypeInt
				e.longValue = long(0)
			case VariableTypeInt:
				e.Type = ExpressionTypeInt
				e.longValue = long(0)
			case VariableTypeLong:
				e.Type = ExpressionTypeLong
				e.longValue = long(0)
			case VariableTypeFloat:
				e.Type = ExpressionTypeFloat
				e.doubleValue = double(0)
			case VariableTypeDouble:
				e.Type = ExpressionTypeDouble
				e.doubleValue = double(0)
			case VariableTypeEnum:
				e.Type = ExpressionTypeInt
				e.longValue = long(this.theEnum.defaultValue)
			default:
				e.Type = ExpressionTypeNull
		}

		return e
	}

	fn rightValueValid() -> (err error) {
		if this.Type == VariableTypeBool ||
			this.isNumber() ||
			this.Type == VariableTypeString ||
			this.Type == VariableTypeObject ||
			this.Type == VariableTypeArray ||
			this.Type == VariableTypeMap ||
			this.Type == VariableTypeNull ||
			this.Type == VariableTypeJavaArray ||
			this.Type == VariableTypeEnum ||
			this.Type == VariableTypeFunction {
			return null
		}
		switch this.Type {
			case VariableTypePackage:
				return new error(sprintf("%s use package '%s' without selector",
							this.pos.errMsgPrefix() , this.thePackage.name))
			case VariableTypeClass:
				return new error(sprintf("%s use class '%s' without selector",
							this.pos.errMsgPrefix() , this.theClass.name))
			default:
				return new error(sprintf("%s '%s' is not right value valid",
							this.pos.errMsgPrefix() , this.typeString()))
		}

	}

	/*
		have type or not
	*/
	fn isTyped() -> (err error) {
		if err = this.rightValueValid() ; err != null {
			return err
		}
		/*
			null is only untyped right value
		*/
		if this.Type == VariableTypeNull {
			return new error(sprintf("%s '%s' is not typed",
						this.pos.errMsgPrefix() , this.typeString()))
		}
		return null
	}

	public fn cloneType() -> (cloned Type) {
		cloned = this.clone().(Type)
	}

	public fn clone() -> (x Object) {
		cloned := new Type()
		x = cloned
		cloned.Type = this.Type
		cloned.isBuildIn = this.isBuildIn
		cloned.isVariableArgs = this.isVariableArgs
		cloned.resolved = this.resolved
		cloned.pos = this.pos
		cloned.packagePos = this.packagePos
		cloned.name = this.name
		cloned.theClass = this.theClass
		cloned.theEnum = this.theEnum
		cloned.locateDefinition = this.locateDefinition
		cloned.locatePackageDefinition = this.locatePackageDefinition
		cloned.findUsage = this.findUsage
		cloned.getHover = this.getHover
		cloned.theEnumName = this.theEnumName
		cloned.theFunction = this.theFunction
		cloned.thePackage = this.thePackage
		cloned.theAlias = this.theAlias
		cloned.autoCompletion = this.autoCompletion

		if cloned.Type == VariableTypeArray ||
			cloned.Type == VariableTypeJavaArray {
			cloned.theArray = this.theArray.cloneType()
		}
		if cloned.Type == VariableTypeMap {
			cloned.theMap = new Map()
			cloned.theMap.K = this.theMap.K.cloneType()
			cloned.theMap.V = this.theMap.V.cloneType()
		}
		if this.Type == VariableTypeFunction {
			cloned.theFunctionType = this.theFunctionType.cloneFunctionType()
		}
	}

	fn resolve(block Block) -> (err error) {
		if this.resolved {
			return null
		}
		this.resolved = true // single threading
		switch this.Type {
			case VariableTypeTemplate:
				if block.inheritedAttribute.function.parameterTypes == null {
					return new error(sprintf("%s parameter type '%s' not in a template function",
								errMsgPrefix(this.pos) , this.name))
				}
				if block.inheritedAttribute.function.parameterTypes[this.name] == null {
					return new error(sprintf("%s parameter type '%s' not found",
								errMsgPrefix(this.pos) , this.name))
				}
				pos := this.pos // keep pos
				if this.locateDefinition {
					block.inheritedAttribute.thePackageBeenCompiling.setLocatedDefinitionPos(block.inheritedAttribute.function.parameterTypes[this.name])
				}
				block.inheritedAttribute.function.parameterTypes[this.name].copyThis2Another(this)
				this.pos = pos // keep pos
				return null
			case VariableTypeName:
				return this.resolveName(block)
			case VariableTypeGlobal:
				d , exists := block.inheritedAttribute.thePackageBeenCompiling.block.nameExists(this.name , this.pos)
				if exists == false {
					return new error(sprintf("%s '%s' not found",
								errMsgPrefix(this.pos) , this.name))
				}
				return this.makeTypeFrom(block , d)
			case VariableTypeArray , VariableTypeJavaArray:
				return this.theArray.resolve(block)
			case VariableTypeMap:
				if this.theMap.K != null {
					err = this.theMap.K.resolve(block)
					if err != null {
						return err
					}
				}
				if this.theMap.V != null {
					return this.theMap.V.resolve(block)
				}
			case VariableTypeFunction:
				for _ , v := range this.theFunctionType.parameterList {
					if err = v.Type.resolve(block) ; err != null {
						return err
					}
				}

				for _ , v := range this.theFunctionType.returnList {
					if err = v.Type.resolve(block) ; err != null {
						return err
					}
				}

			case this.isPrimitive():
				if this.locateDefinition {
					block.inheritedAttribute.thePackageBeenCompiling.setLocatedDefinitionPos(this)
				}
		}

		return null
	}

	fn resolveName(block Block) -> (err error) {
		var d Object
		if this.name.indexOf(".") < 0 {
			if this.autoCompletion {
				block.inheritedAttribute.thePackageBeenCompiling.autoCompletionItems = searchTypeForAutoCompletionItems(this.pos , block)
				return null
			}
			var loadFromImport bool
			d = block.searchType(this.name , this.pos)
			if d != null {
				if t , ok := d.(Class) ; ok &&
					t.isBuildIn == false {
					_ , loadFromImport = shouldAccessFromImports(block , this.name , this.pos , t.pos)
					if loadFromImport {
						t.reduceFindUsageInstances(block)
					}
				}
				if t , ok := d.(Type) ; ok &&
					t.isBuildIn == false {
					_ , loadFromImport = shouldAccessFromImports(block , this.name , this.pos , t.pos)
					if loadFromImport && t.theAlias != null {
						t.theAlias.reduceFindUsageInstances(block)
					}
				}
				if t , ok := d.(Enum) ; ok &&
					t.isBuildIn == false {
					_ , loadFromImport = shouldAccessFromImports(block , this.name , this.pos , t.pos)
					if loadFromImport {
						t.reduceFindUsageInstances(block)
					}
				}
			} else {
				loadFromImport = true
			}
			if loadFromImport {
				d , err = this.getNameFromImport(block)
				if err != null {
					return err
				}
			}
		} else {
			d , err = this.getNameFromImport(block)
			if err != null {
				return err
			}
		}
		if d == null {
			return new error(sprintf("%s type named '%s' not found" , errMsgPrefix(this.pos) , this.name))
		}
		err = this.makeTypeFrom(block , d)
		if err != null {
			return err
		}
		return null
	}

	fn getNameFromImport(block Block) -> (d Object , err error) {
		if this.name.indexOf(".") < 0 {
			i := block.inheritedAttribute.thePackageBeenCompiling.getImport(this.pos.filename , this.name)
			if i != null {
				if this.locateDefinition {
					block.inheritedAttribute.thePackageBeenCompiling.setLocatedDefinitionPos(i)
				}
				i.mkUsed(this.pos)
				return block.inheritedAttribute.thePackageBeenCompiling.load(i.Import)
			}
			return null , new error(sprintf("%s type named '%s' not found",
						errMsgPrefix(this.pos) , this.name))
		}
		index := this.name.indexOf(".")
		packageName := this.name[:index]
		className := this.name[index + 1:]
		i := block.inheritedAttribute.thePackageBeenCompiling.getImport(this.pos.filename , packageName)
		if null == i {
			return null , new error(sprintf("%s package '%s' not imported",
						errMsgPrefix(this.pos) , packageName))
		}
		{
			pos := this.pos
			if this.packagePos != null {
				pos = this.packagePos
			}
			i.mkUsed(pos)
		}

		if this.locatePackageDefinition {
			block.inheritedAttribute.thePackageBeenCompiling.setLocatedDefinitionPos(i)
		}
		p , err := block.inheritedAttribute.thePackageBeenCompiling.load(i.Import)
		if err != null {
			return null , new error(sprintf("%s %s",
						errMsgPrefix(this.pos) , err.getMessage()))
		}
		if this.autoCompletion {
			items := []AutoCompletionItem{}
			if pp , ok := p.(Package) ; ok {
				for name , v := range pp.block.classes {
					item := new AutoCompletionItem()
					item.Type = "class"
					item.name = name
					items.append(item)
				}

				for name , v := range pp.block.enums {
					item := new AutoCompletionItem()
					item.Type = "enum"
					item.name = name
					items.append(item)
				}

				for name , v := range pp.block.typeAliases {
					item := new AutoCompletionItem()
					item.Type = "typealias"
					item.name = name
					items.append(item)
				}

				block.inheritedAttribute.thePackageBeenCompiling.autoCompletionItems = items
			} else {
				return null , new error(sprintf("%s '%s' is not a package",
							errMsgPrefix(this.pos) , packageName))
			}
			return null , new error("FALSE ERROR") // it's ok 
		}
		if pp , ok := p.(Package) ; ok {
			var exists bool
			// print(pp.name , pp , pp.name , pp.block.classes)
			d , exists = pp.block.nameExists(className , this.pos)
			if exists == false {
				err = new error(sprintf("%s '%s' not found",
						errMsgPrefix(this.pos) , className))
			}
			return d , err
		} else {
			return null , new error(sprintf("%s '%s' is not a package",
						errMsgPrefix(this.pos) , packageName))
		}
	}

	fn makeTypeFrom(block Block , d Object) -> (err error) {
		if c , ok := d.(Class) ; ok {
			if c.loadFromOutSide && c.isPublic() == false {
				err = new error(sprintf("%s class '%s' is not public",
						errMsgPrefix(this.pos) , c.name))
			}
			if this.locateDefinition && c.pos != null {
				block.inheritedAttribute.thePackageBeenCompiling.setLocatedDefinitionPos(c)
			}
			this.Type = VariableTypeObject
			this.theClass = c
			return err
		}
		if t , ok := d.(Type) ; ok {
			pos := this.pos
			alias := this.theAlias
			resolved := this.resolved
			t.copyThis2Another(this)
			if this.locateDefinition {
				if t.theAlias == null {
					block.inheritedAttribute.thePackageBeenCompiling.setLocatedDefinitionPos(t)
				} else {
					block.inheritedAttribute.thePackageBeenCompiling.setLocatedDefinitionPos(t.theAlias)
				}

			}
			this.pos = pos
			this.theAlias = alias
			this.resolved = resolved
			return null
		}
		if dd , ok := d.(Enum) ; ok {
			if dd.loadFromOutSide && dd.isPublic() == false {
				block.inheritedAttribute.thePackageBeenCompiling.errors.append(new error(sprintf("%s enum '%s' is not public",
							errMsgPrefix(this.pos) , dd.name)))
			}
			if this.locateDefinition {
				block.inheritedAttribute.thePackageBeenCompiling.setLocatedDefinitionPos(dd)
				return
			}
			this.Type = VariableTypeEnum
			this.theEnum = dd
			return null
		}
		return new error(sprintf("%s name '%s' is not a type",
					errMsgPrefix(this.pos) , this.name))
	}

	public fn isNumber() -> (is bool) {
		return this.isInteger() ||
				this.isFloat()
	}

	public fn isPointer() -> (is bool) {
		return this.Type == VariableTypeObject ||
				this.Type == VariableTypeArray ||
				this.Type == VariableTypeJavaArray ||
				this.Type == VariableTypeMap ||
				this.Type == VariableTypeString ||
				this.Type == VariableTypeNull ||
				this.Type == VariableTypeFunction
	}

	public fn isInteger() -> (is bool) {
		return this.Type == VariableTypeByte ||
				this.Type == VariableTypeShort ||
				this.Type == VariableTypeInt ||
				this.Type == VariableTypeLong ||
				this.Type == VariableTypeChar
	}

	/*
		float or double
	*/
	fn isFloat() -> (is bool) {
		return this.Type == VariableTypeFloat ||
				this.Type == VariableTypeDouble
	}

	public fn isPrimitive() -> (is bool) {
		return this.isNumber() ||
				this.Type == VariableTypeString ||
				this.Type == VariableTypeBool
	}

	public fn typeName(prefix string = "") -> (ret string) {
		switch this.Type {
			case VariableTypeBool:
				return prefix + "bool"
			case VariableTypeByte:
				return prefix + "byte"
			case VariableTypeChar:
				return prefix + "char"
			case VariableTypeShort:
				return prefix + "short"
			case VariableTypeInt:
				return prefix + "int"
			case VariableTypeLong:
				return prefix + "long"
			case VariableTypeFloat:
				return prefix + "float"
			case VariableTypeDouble:
				return prefix + "double"
			case VariableTypeString:
				return prefix + "string"
			case VariableTypeObject:
				return prefix + this.name
			case VariableTypeMap:
				ret = prefix + "map{"
				ret += this.theMap.K.typeName()
				ret += " -> "
				ret += this.theMap.V.typeName()
				ret += "}"
				return ret
			case VariableTypeArray:
				return this.theArray.typeName(prefix + "[]")
			case VariableTypeJavaArray:
				if this.isVariableArgs {
					ret = prefix + this.theArray.typeName() + "..."
					return ret
				} else {
					ret = prefix + this.theArray.typeName() + "[]"
					return ret
				}
			case VariableTypeFunction:
				ret = prefix + "fn" + this.theFunctionType.typeName()
				return
			case VariableTypeEnum:
				ret = prefix + this.name
			case VariableTypeClass:
				panic("not happening")
			case VariableTypeName:
				ret = prefix + this.name // resolve wrong, but typeString is ok to return
			case VariableTypeTemplate:
				ret = prefix + this.name
			case VariableTypeDynamicSelector:
				panic("not happening")
			case VariableTypeVoid:
				panic("not happening")
			case VariableTypePackage:
				panic("not happening")
			case VariableTypeNull:
				panic("not happening")
			case VariableTypeGlobal:
				ret = prefix + this.name
		}

	}

	public fn typeString(prefix string = "") -> (ret string) {
		// if this.alias != null {
		switch this.Type {
			case VariableTypeBool:
				return prefix + "bool"
			case VariableTypeByte:
				return prefix + "byte"
			case VariableTypeChar:
				return prefix + "char"
			case VariableTypeShort:
				return prefix + "short"
			case VariableTypeInt:
				return prefix + "int"
			case VariableTypeLong:
				return prefix + "long"
			case VariableTypeFloat:
				return prefix + "float"
			case VariableTypeDouble:
				return prefix + "double"
			case VariableTypeString:
				return prefix + "string"
			case VariableTypeObject:
				return prefix + "object@" + this.theClass.name
			case VariableTypeMap:
				ret = prefix + "map{"
				ret += this.theMap.K.typeString()
				ret += " -> "
				ret += this.theMap.V.typeString()
				ret += "}"
				return ret
			case VariableTypeArray:
				return this.theArray.typeString(prefix + "[]")
			case VariableTypeJavaArray:
				if this.isVariableArgs {
					ret = prefix + this.theArray.typeString() + "..."
					return ret
				} else {
					ret = prefix + this.theArray.typeString() + "[]"
					return ret
				}

			case VariableTypeFunction:
				ret = prefix + "fn " + this.theFunctionType.typeString()
				return
			case VariableTypeEnum:
				ret = prefix + "enum(" + this.theEnum.name + ")"
			case VariableTypeClass:
				ret = prefix + sprintf("class@%s" , this.theClass.name)
			case VariableTypeName:
				ret = prefix + this.name // resolve wrong, but typeString is ok to return
			case VariableTypeTemplate:
				ret = prefix + this.name
			case VariableTypeDynamicSelector:
				ret = prefix + "dynamicSelector@" + this.theClass.name
			case VariableTypeVoid:
				ret = prefix + "void"
			case VariableTypePackage:
				ret = prefix + "package@" + this.thePackage.name
			case VariableTypeNull:
				ret = prefix + "null"
			case VariableTypeGlobal:
				ret = prefix + "global." + this.name
		}

	}

	fn getParameterType(ft FunctionType) -> (pts []string) {
		if this.Type == VariableTypeName &&
			ft.haveTemplateName(this.name) {
			this.Type = VariableTypeTemplate // convert to type
		}
		if this.Type == VariableTypeTemplate {
			return []string{this.name}
		}
		if this.Type == VariableTypeArray ||
			this.Type == VariableTypeJavaArray {
			return this.theArray.getParameterType(ft)
		}
		if this.Type == VariableTypeMap {
			pts = []string{}
			pts.appendAll(this.theMap.K.getParameterType(ft))
			pts.appendAll(this.theMap.V.getParameterType(ft))
			return
		}
		return null
	}

	fn canBeBindWithParameterTypes(parameterTypes map{string -> Type}) -> (err error) {
		if this.Type == VariableTypeTemplate {
			ok := parameterTypes.keyExist(this.name)
			if ok == false {
				return new error(sprintf("typed parameter '%s' not found" , this.name))
			}
			return null
		}
		if this.Type == VariableTypeArray ||
			this.Type == VariableTypeJavaArray {
			return this.theArray.canBeBindWithParameterTypes(parameterTypes)
		}
		if this.Type == VariableTypeMap {
			err = this.theMap.K.canBeBindWithParameterTypes(parameterTypes)
			if err != null {
				return err
			}
			return this.theMap.V.canBeBindWithParameterTypes(parameterTypes)
		}
		return null
	}

	/*
		if there is error,this function will crash
	*/
	fn bindWithParameterTypes(ft FunctionType , parameterTypes map{string -> Type}) {
		if this.Type == VariableTypeTemplate {
			ok := parameterTypes.keyExist(this.name)
			if ok == false {
				panic(sprintf("typed parameter '%s' not found" , this.name))
			}
			//TODO ::
			parameterTypes[this.name].copyThis2Another(this)
			return
		}
		if this.Type == VariableTypeArray || this.Type == VariableTypeJavaArray {
			this.theArray.bindWithParameterTypes(ft , parameterTypes)
			return
		}
		if this.Type == VariableTypeMap {
			if len(this.theMap.K.getParameterType(ft)) > 0 {
				this.theMap.K.bindWithParameterTypes(ft , parameterTypes)
			}
			if len(this.theMap.V.getParameterType(ft)) > 0 {
				this.theMap.V.bindWithParameterTypes(ft , parameterTypes)
				return
			}
		}
		panic("not T")
	}

	/*
		
	 */
	fn canBeBindWithType(ft FunctionType , mkParameterTypes map{string -> Type} , bind Type) -> (err error) {
		if err = bind.rightValueValid() ; err != null {
			return err
		}
		if bind.Type == VariableTypeNull {
			return new error(sprintf("'%s' is un typed" , bind.typeString()))
		}
		if this.Type == VariableTypeTemplate {
			mkParameterTypes[this.name] = bind
			return null
		}
		if this.Type == VariableTypeArray && bind.Type == VariableTypeArray {
			return this.theArray.canBeBindWithType(ft , mkParameterTypes , bind.theArray)
		}
		if this.Type == VariableTypeJavaArray && bind.Type == VariableTypeJavaArray {
			return this.theArray.canBeBindWithType(ft , mkParameterTypes , bind.theArray)
		}
		if this.Type == VariableTypeMap && bind.Type == VariableTypeMap {
			if len(this.theMap.K.getParameterType(ft)) > 0 {
				err = this.theMap.K.canBeBindWithType(ft , mkParameterTypes , bind.theMap.K)
				if err != null {
					return err
				}
			}
			if len(this.theMap.V.getParameterType(ft)) > 0 {
				return this.theMap.V.canBeBindWithType(ft , mkParameterTypes , bind.theMap.V)
			}
		}
		return new error(sprintf("cannot bind '%s' to '%s'" , bind.typeString() , this.typeString()))
	}

	fn notAssignAble(block Block , errs []error , rightValue Type) -> (notAble bool) {
		return !this.assignAble(block , errs , rightValue)
	}

	fn assignAble(block Block , errs []error , rightValue Type) -> (able bool) {
		leftValue := this
		if leftValue == rightValue {
			return true
		}
		{
			// try string first
			if leftValue.isString() && rightValue.isString() {
				return true
			}
		}

		if leftValue.isPrimitive() &&
			rightValue.isPrimitive() {
			return leftValue.Type == rightValue.Type
		}
		if leftValue.isPointer() && rightValue.Type == VariableTypeNull {
			return true
		}
		if leftValue.Type == VariableTypeObject &&
			leftValue.theClass.name == JavaRootClass &&
			rightValue.isPointer() {
			return true
		}
		if leftValue.Type == VariableTypeArray &&
			rightValue.Type == VariableTypeArray {
			return leftValue.theArray.assignAble(block , errs , rightValue.theArray)
		}
		if leftValue.Type == VariableTypeJavaArray &&
			rightValue.Type == VariableTypeJavaArray {
			if leftValue.isVariableArgs != rightValue.isVariableArgs {
				return false
			}
			return leftValue.theArray.assignAble(block , errs , rightValue.theArray)
		}
		if leftValue.Type == VariableTypeEnum && rightValue.Type == VariableTypeEnum {
			return leftValue.theEnum.name == rightValue.theEnum.name // same enum
		}
		if leftValue.Type == VariableTypeMap && rightValue.Type == VariableTypeMap {
			return leftValue.theMap.K.assignAble(block , errs , rightValue.theMap.K) &&
					leftValue.theMap.V.assignAble(block , errs , rightValue.theMap.V)
		}
		if leftValue.Type == VariableTypeFunction &&
			rightValue.Type == VariableTypeFunction {
			return leftValue.theFunctionType.equal(rightValue.theFunctionType)
		}
		if leftValue.Type == VariableTypeString {
			leftValue = new Type()
			leftValue.Type = VariableTypeObject
			leftValue.theClass = new Class()
			leftValue.theClass.name = JavaStringClassName
			leftValue.theClass.notImportedYet = true
		}
		if rightValue.Type == VariableTypeString {
			rightValue = new Type()
			rightValue.Type = VariableTypeObject
			rightValue.theClass = new Class()
			rightValue.theClass.name = JavaStringClassName
			rightValue.theClass.notImportedYet = true
		}
		if leftValue.Type == VariableTypeObject && rightValue.Type == VariableTypeObject {
			if leftValue.theClass.name == rightValue.theClass.name {
				return true
			}
			if err := leftValue.theClass.loadSelf(block , rightValue.pos) ; err != null {
				errs.append(err)
				return false
			}
			if err := rightValue.theClass.loadSelf(block , rightValue.pos) ; err != null {
				errs.append(err)
				return false
			}
			if leftValue.theClass.isInterface() {
				i , err := rightValue.theClass.implementedInterface(block , new map{string -> bool}() , leftValue.pos , leftValue.theClass.name)
				if err != null {
					errs.append(err)
				}
				return i
			} else {
				has , err := rightValue.theClass.haveSuperClass(block , new map{string -> bool}() , rightValue.pos , leftValue.theClass.name)
				if err != null {
					errs.append(err)
				}
				return has == true
			}
		}
		return false
	}

	public fn equal(compareTo Type) -> (is bool) {
		leftValue := this
		if leftValue.Type != compareTo.Type {
			if leftValue.isString() && compareTo.isString() {
				return true
			}
			return false //early check
		}
		if leftValue.isPrimitive() {
			return true //
		}
		if leftValue.Type == VariableTypeVoid {
			return true
		}
		if leftValue.Type == VariableTypeArray ||
			leftValue.Type == VariableTypeJavaArray {
			if leftValue.Type == VariableTypeJavaArray &&
				leftValue.isVariableArgs != compareTo.isVariableArgs {
				return false
			}
			return leftValue.theArray.equal(compareTo.theArray)
		}
		if leftValue.Type == VariableTypeMap {
			return leftValue.theMap.K.equal(compareTo.theMap.K) &&
					leftValue.theMap.V.equal(compareTo.theMap.V)
		}
		if leftValue.Type == VariableTypeEnum {
			return leftValue.theEnum.name == compareTo.theEnum.name
		}
		if leftValue.Type == VariableTypeObject {
			return leftValue.theClass.name == compareTo.theClass.name
		}
		if leftValue.Type == VariableTypeFunction {
			return leftValue.theFunctionType.equal(compareTo.theFunctionType)
		}
		return false
	}
	fn isString() -> (is bool) {
		if this.Type == VariableTypeString {
			return true
		}
		if this.Type != VariableTypeObject {
			return false
		}
		return this.theClass != null && this.theClass.name == JavaStringClassName
	}
}

