import "java/lang/Object"


class Expression {
	//checkRangeCalled bool
	Type ExpressionTypeKind
	/*
		only for global variable definition
		public hello := "hai...."
	*/
	IsPublic              bool // for global
	IsGlobal              bool
	IsCompileAuto         bool // compile auto expression
	Value                 Type
	MultiValues           []Type
	Pos                   Pos
	Data                  Object
	IsStatementExpression bool
	Op                    string
	Lefts                 []Expression // left values
	AsSubForNegative      Expression
	boolValue bool 
	longValue long
	doubleValue double

	fn IsIdentifier(identifier string) -> (is bool) {
		if this.Type != ExpressionTypeIdentifier {
			return false
		}
		return this.Data.(ExpressionIdentifier).Name == identifier
	}

	fn isRelation() -> (is bool) {
		return this.Type == ExpressionTypeEq ||
			this.Type == ExpressionTypeNe ||
			this.Type == ExpressionTypeGe ||
			this.Type == ExpressionTypeGt ||
			this.Type == ExpressionTypeLe ||
			this.Type == ExpressionTypeLt
	}

	/*
		1 > 2
		'a' > 'b'
		1s > 2s
	*/
	fn Is2IntCompare() -> (is bool) {
		if this.isRelation() == false {
			return false
		}
		bin := this.Data.(ExpressionBinary)
		i1 := bin.Left.Value.isInteger() && bin.Left.Value.Type != VariableTypeLong
		i2 := bin.Right.Value.isInteger() && bin.Right.Value.Type != VariableTypeLong
		return i1 && i2
	}

	/*
		a == null
	*/
	fn IsCompare2Null() -> (is bool) {
		if this.isRelation() == false {
			return false
		}
		bin := this.Data.(ExpressionBinary)
		return bin.Left.Type == ExpressionTypeNull ||
			bin.Right.Type == ExpressionTypeNull
	}

	/*
		a > "b"
	*/
	fn Is2StringCompare() -> (is bool) {
		if this.isRelation() == false {
			return false
		}
		bin := this.Data.(ExpressionBinary)
		return bin.Left.Value.Type == VariableTypeString
	}

	/*
		var a ,b []int
		a == b
	*/
	fn Is2PointerCompare() -> (is bool) {
		if this.isRelation() == false {
			return false
		}
		bin := this.Data.(ExpressionBinary)
		return bin.Left.Value.IsPointer()
	}

	fn convertTo(to Type) {
		c := new ExpressionTypeConversion()
		c.Expression = new Expression()
		c.Expression.Op = this.Op
		c.Expression.Value = this.Value
		c.Expression.Type = this.Type
		c.Expression.Data = this.Data
		c.Type = to
		this.Value = to
		this.Type = ExpressionTypeCheckCast
		this.IsCompileAuto = true
		this.Op = "checkcast"
		this.Data = c
	}

	fn convertToNumberType(typ VariableTypeKind) {
		if this.isLiteral() {
			this.convertLiteralToNumberType(typ)
			this.Value = new Type()
			this.Value.Type = typ
			this.Value.Pos =  this.Pos

		} else {
		    t := new Type()
		    t.Type = typ
		    t.Pos = this.Pos
			this.convertTo(t)
		}
	}




	/*
		const spread
	*/
	fn fromConst(c Constant) {
		this.Op = c.Name
		switch c.Type.Type {
		case VariableTypeBool:
			this.Type = ExpressionTypeBool
			this.longValue = c.longValue
		case VariableTypeByte:
			this.Type = ExpressionTypeByte
			this.longValue = c.longValue
		case VariableTypeShort:
			this.Type = ExpressionTypeShort
			this.longValue = c.longValue
		case VariableTypeChar:
			this.Type = ExpressionTypeChar
			this.longValue = c.longValue
		case VariableTypeInt:
			this.Type = ExpressionTypeInt
			this.longValue = c.longValue
		case VariableTypeLong:
			this.Type = ExpressionTypeLong
			this.longValue = c.longValue
		case VariableTypeFloat:
			this.Type = ExpressionTypeFloat
			this.doubleValue = c.doubleValue
		case VariableTypeDouble:
			this.Type = ExpressionTypeDouble
			this.doubleValue = c.doubleValue
		case VariableTypeString:
			this.Type = ExpressionTypeString
			this.Data = c.Value.(string)
		default:
		}
	}



	fn isLiteral() ->(is bool)  {
		return this.Type == ExpressionTypeBool ||
			this.Type == ExpressionTypeString ||
			this.isNumber()
	}

	/*
		valid for condition
	*/
	fn canBeUsedAsCondition() -> (err error) {
		if this.Type == ExpressionTypeNull ||
			this.Type == ExpressionTypeBool ||
			this.Type == ExpressionTypeByte ||
			this.Type == ExpressionTypeShort ||
			this.Type == ExpressionTypeInt ||
			this.Type == ExpressionTypeLong ||
			this.Type == ExpressionTypeFloat ||
			this.Type == ExpressionTypeDouble ||
			this.Type == ExpressionTypeString ||
			this.Type == ExpressionTypeArray ||
			this.Type == ExpressionTypeLogicalOr ||
			this.Type == ExpressionTypeLogicalAnd ||
			this.Type == ExpressionTypeOr ||
			this.Type == ExpressionTypeAnd ||
			this.Type == ExpressionTypeXor ||
			this.Type == ExpressionTypeLsh ||
			this.Type == ExpressionTypeRsh ||
			this.Type == ExpressionTypeAdd ||
			this.Type == ExpressionTypeSub ||
			this.Type == ExpressionTypeMul ||
			this.Type == ExpressionTypeDiv ||
			this.Type == ExpressionTypeMod ||
			this.Type == ExpressionTypeEq ||
			this.Type == ExpressionTypeNe ||
			this.Type == ExpressionTypeGe ||
			this.Type == ExpressionTypeGt ||
			this.Type == ExpressionTypeLe ||
			this.Type == ExpressionTypeLt ||
			this.Type == ExpressionTypeIndex ||
			this.Type == ExpressionTypeSelection ||
			this.Type == ExpressionTypeMethodCall ||
			this.Type == ExpressionTypeFunctionCall ||
			this.Type == ExpressionTypeIncrement ||
			this.Type == ExpressionTypeDecrement ||
			this.Type == ExpressionTypePrefixIncrement ||
			this.Type == ExpressionTypePrefixDecrement ||
			this.Type == ExpressionTypeNegative ||
			this.Type == ExpressionTypeNot ||
			this.Type == ExpressionTypeBitwiseNot ||
			this.Type == ExpressionTypeIdentifier ||
			this.Type == ExpressionTypeNew ||
			this.Type == ExpressionTypeCheckCast ||
			this.Type == ExpressionTypeSlice ||
			this.Type == ExpressionTypeMap ||
			this.Type == ExpressionTypeQuestion {
			return null
		}
		return new error(sprintf("%s cannot use '%s' as condition",
			this.Pos.ErrMsgPrefix(), this.Op))
	}

	fn canBeUsedAsStatement() -> (err error) {
		if this.Type == ExpressionTypeVarAssign ||
			this.Type == ExpressionTypeAssign ||
			this.Type == ExpressionTypeFunctionCall ||
			this.Type == ExpressionTypeMethodCall ||
			this.Type == ExpressionTypeFunctionLiteral ||
			this.Type == ExpressionTypePlusAssign ||
			this.Type == ExpressionTypeMinusAssign ||
			this.Type == ExpressionTypeMulAssign ||
			this.Type == ExpressionTypeDivAssign ||
			this.Type == ExpressionTypeModAssign ||
			this.Type == ExpressionTypeAndAssign ||
			this.Type == ExpressionTypeOrAssign ||
			this.Type == ExpressionTypeXorAssign ||
			this.Type == ExpressionTypeLshAssign ||
			this.Type == ExpressionTypeRshAssign ||
			this.Type == ExpressionTypeIncrement ||
			this.Type == ExpressionTypeDecrement ||
			this.Type == ExpressionTypePrefixIncrement ||
			this.Type == ExpressionTypePrefixDecrement ||
			this.Type == ExpressionTypeVar ||
			this.Type == ExpressionTypeConst {
			return null
		}
		return new error(sprintf("%s expression '%s' evaluate but not used",
			this.Pos.ErrMsgPrefix(), this.Op))
	}

	fn isNumber() -> (is bool) {
		return this.isInteger() ||
			this.isFloat()
	}

	fn isInteger() -> (is bool) {
		return this.Type == ExpressionTypeByte ||
			this.Type == ExpressionTypeShort ||
			this.Type == ExpressionTypeInt ||
			this.Type == ExpressionTypeLong ||
			this.Type == ExpressionTypeChar
	}
	fn isFloat() -> (is bool) {
		return this.Type == ExpressionTypeFloat ||
			this.Type == ExpressionTypeDouble
	}

	fn isEqOrNe() -> (is bool) {
		return this.Type == ExpressionTypeEq ||
			this.Type == ExpressionTypeNe
	}

	/*
		check out this expression is increment or decrement
	*/
	fn IsIncrement() -> (is bool) {
		if this.Type == ExpressionTypeIncrement ||
			this.Type == ExpressionTypePrefixIncrement ||
			this.Type == ExpressionTypeDecrement ||
			this.Type == ExpressionTypePrefixDecrement {
		} else {
			panic("not increment or decrement at all")
		}
		return this.Type == ExpressionTypeIncrement ||
			this.Type == ExpressionTypePrefixIncrement
	}

	/*
		k,v := range arr
		k,v = range arr
	*/
	fn canBeUsedForRange() -> (is bool) {
		if this.Type != ExpressionTypeAssign &&
			this.Type != ExpressionTypeVarAssign {
			return false
		}
		bin := this.Data.(ExpressionBinary)
		if bin.Right.Type == ExpressionTypeRange {
			return true
		}
		if bin.Right.Type == ExpressionTypeList {
			t := bin.Right.Data.([]Expression)
			if len(t) == 1 && t[0].Type == ExpressionTypeRange {
				return true
			}
		}
		return false
	}

	fn HaveMultiValue() -> (is bool) {
		if this.Type == ExpressionTypeFunctionCall ||
			this.Type == ExpressionTypeMethodCall ||
			this.Type == ExpressionTypeTypeAssert {
			return len(this.MultiValues) > 1
		}
		return false

	}

	

	fn check(block Block) -> (returnValueTypes []Type, errs []error = []error{}) {
		_, err := this.constantFold()
		if err != null {
			return null, []error{err}
		}
		switch this.Type {
		case ExpressionTypeNull:
		    this.Value = new Type()
		    this.Value.Type = VariableTypeNull
		    this.Value.Pos = this.Pos
			returnValueTypes = [this.Value]
		case ExpressionTypeDot:
			if block.InheritedAttribute.Class == null {
				errs = []error{new error(sprintf("%s '%s' must in class scope",
					this.Pos.ErrMsgPrefix(), this.Op))}
			} else {
			    this.Value = new Type()
			    this.Value.Type = VariableTypeDynamicSelector
			    this.Value.Pos = this.Pos
			    this.Class = block.InheritedAttribute.Class
				returnValueTypes = [this.Value]
			}
		case ExpressionTypeBool:
			this.Value = new Type()
			this.Value.Type = VariableTypeBool
			this.Value.Pos = this.Pos
			returnValueTypes = [this.Value]
		case ExpressionTypeByte:
			this.Value = new Type()
            this.Value.Type = VariableTypeByte
            this.Value.Pos = this.Pos
            returnValueTypes = [this.Value]
		case ExpressionTypeShort:
			this.Value = new Type()
			this.Value.Type = VariableTypeShort
			this.Value.Pos = this.Pos
			returnValueTypes = [this.Value]
		case ExpressionTypeInt:
			this.Value = new Type()
			this.Value.Type = VariableTypeInt
			this.Value.Pos = this.Pos
			returnValueTypes = [this.Value]
		case ExpressionTypeChar:
			this.Value = new Type()
			this.Value.Type = VariableTypeChar
			this.Value.Pos = this.Pos
			returnValueTypes = [this.Value]
		case ExpressionTypeFloat:
			this.Value = new Type()
			this.Value.Type = VariableTypeFloat
			this.Value.Pos = this.Pos
			returnValueTypes = [this.Value]
		case ExpressionTypeDouble:
			this.Value = new Type()
			this.Value.Type = VariableTypeDouble
			this.Value.Pos = this.Pos
			returnValueTypes = [this.Value]
		case ExpressionTypeLong:
			this.Value = new Type()
			this.Value.Type = VariableTypeLong
			this.Value.Pos = this.Pos
			returnValueTypes = [this.Value]
		case ExpressionTypeString:
			this.Value = new Type()
			this.Value.Type = VariableTypeString
			this.Value.Pos = this.Pos
			returnValueTypes = [this.Value]
		case ExpressionTypeIdentifier:
			tt, err := ExpressionCheckIdentifier.check(this , block)
			if err != null {
				errs.append(err)
			}
			if tt != null {
				this.Value = tt
				returnValueTypes = []Type{tt}
			}
			//binaries
		case ExpressionTypeLogicalOr , ExpressionTypeLogicalAnd ,
			ExpressionTypeOr ,ExpressionTypeAnd ,ExpressionTypeXor ,
			ExpressionTypeLsh ,ExpressionTypeRsh,
			ExpressionTypeEq ,ExpressionTypeNe , ExpressionTypeGe ,
			ExpressionTypeGt, ExpressionTypeLe,ExpressionTypeLt , 
			ExpressionTypeAdd,ExpressionTypeSub , ExpressionTypeMul,
			ExpressionTypeDiv , ExpressionTypeMod :
			tt := ExpressionCheckBinary.check(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
			}
			//if len(errs) == length { // no error
			//	if ee := this.binaryExpressionDependOnSub(); ee != null {
			//		*e = *ee
			//	}
			//}
			this.Value = tt
		case ExpressionTypeMap:
			tt := ExpressionCheckMap.check(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
			}
			this.Value = tt
		case ExpressionTypeVarAssign:
			ExpressionCheckVar.check(this , block, errs)
			this.Value = mkVoidType(this.Pos)
			returnValueTypes = []Type{this.Value}
		case ExpressionTypeAssign:
			tt := ExpressionCheckAssign.check(this, block,errs)
			if tt != null {
				returnValueTypes = []Type{tt}
			}
			this.Value = tt
		case ExpressionTypeIncrement , ExpressionTypeDecrement ,ExpressionTypePrefixIncrement ,ExpressionTypePrefixDecrement  :
			tt := ExpressionCheckUnary.checkIncrementExpression(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
			}
			this.Value = tt
		case ExpressionTypeConst: // no return value
			errs = ExpressionCheckConst.check(this , block)
			returnValueTypes = []Type{mkVoidType(this.Pos)}
			this.Value = returnValueTypes[0]
		case ExpressionTypeVar:
			ExpressionCheckVar.check(this , block, errs)
			returnValueTypes = []Type{mkVoidType(this.Pos)}
			this.Value = returnValueTypes[0]
		case ExpressionTypeFunctionCall:
			returnValueTypes = ExpressionCheckFunctionCall.checkFunctionCallExpression(this , block, errs)
			this.MultiValues = returnValueTypes
			if len(returnValueTypes) > 0 {
				this.Value = returnValueTypes[0]
			}
		case ExpressionTypeMethodCall:
			returnValueTypes = ExpressionCheckMethodCall.check(this , block, errs)
			this.MultiValues = returnValueTypes
			if len(returnValueTypes) > 0 {
				this.Value = returnValueTypes[0]
			}
		case ExpressionTypeTypeAssert:
			returnValueTypes = ExpressionCheckTypeAssert.check(this , block, errs)
			this.MultiValues = returnValueTypes
			if len(returnValueTypes) > 0 {
				this.Value = returnValueTypes[0]
			}
		case ExpressionTypeNot ,ExpressionTypeNegative ,ExpressionTypeBitwiseNot  :
			tt := ExpressionCheckUnary.checkUnaryExpression(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
			}
			this.Value = tt
		case ExpressionTypeQuestion:
			tt := ExpressionCheckQuestion.check(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
			}
			this.Value = tt
		case ExpressionTypeIndex:
			tt := ExpressionCheckIndex.check(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
				this.Value = tt
			}
		case ExpressionTypeSelection:
			tt := ExpressionCheckSelection.check(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
				this.Value = tt
			}
		case ExpressionTypeSelectionConst:
			tt := ExpressionSelectConst.check(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
				this.Value = tt
			}
		case ExpressionTypeCheckCast:
			tt := ExpressionSelectConst.check(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
				this.Value = tt
			}
		case ExpressionTypeNew:
			tt := ExpressionCheckNew.check(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
				this.Value = tt
			}
		case ExpressionTypePlusAssign , ExpressionTypeMinusAssign,ExpressionTypeMulAssign ,
			ExpressionTypeDivAssign , ExpressionTypeModAssign ,ExpressionTypeAndAssign,ExpressionTypeOrAssign,
			 ExpressionTypeLshAssign,ExpressionTypeRshAssign ,ExpressionTypeXorAssign :
			tt := ExpressionCheckOpAssign.check(this , block, errs)
			if tt != null {
				returnValueTypes = []Type{tt}
			}
			this.Value = tt
		case ExpressionTypeRange:
			errs.append(new error(sprintf("%s range is only work with 'for' statement",
				errMsgPrefix(this.Pos))))
		case ExpressionTypeSlice:
			tt := ExpressionCheckSlice.check(this , block, errs)
			this.Value = tt
			if tt != null {
				returnValueTypes = []Type{tt}
			}
		case ExpressionTypeArray:
			tt := ExprssionCheckArray.check(this , block, errs)
			this.Value = tt
			if tt != null {
				returnValueTypes = []Type{tt}
			}
		case ExpressionTypeFunctionLiteral:
			f := this.Data.(Function)
			PackageBeenCompile.statementLevelFunctions =
				append(PackageBeenCompile.statementLevelFunctions, f)
			if this.IsStatementExpression {
				err := block.Insert(f.Name, f.Pos, f)
				if err != null {
					errs.append(err)
				}
			}
			es := f.check(block)
			errs.appendAll(es)
			returnValueTypes = new []Type( 1)
			returnValueTypes[0] = new Type()
			returnValueTypes[0].Type = VariableTypeFunction
			returnValueTypes[0].Pos =  this.Pos
			returnValueTypes[0].FunctionType = f.Type
			this.Value = returnValueTypes[0]
		case ExpressionTypeList:
			errs = append(errs,
				new error(sprintf("%s cannot have expression '%s' at this scope,"+
					"this may be cause by the compiler error,please contact the author",
					this.Pos.ErrMsgPrefix(), this.Op)))
		case ExpressionTypeGlobal:
			returnValueTypes =new []Type( 1)
			returnValueTypes[0] = new Type()
			returnValueTypes[0].Type = VariableTypePackage
			returnValueTypes[0].Pos = this.Pos
			returnValueTypes[0].Package = PackageBeenCompile
			this.Value = returnValueTypes[0]
		case ExpressionTypeParenthesis:
			ee := this.Data.(Expression) // override
			return ee.check(block)
		case ExpressionTypeVArgs:
			var t Type
			t, errs = this.Data.(Expression).checkSingleValueContextExpression(block)
			if len(errs) > 0 {
				return returnValueTypes, errs
			}
			this.Value = t
			returnValueTypes = []Type{t}
			if t == null {
				return
			}
			if t.Type != VariableTypeJavaArray {
				errs = append(errs, new error(sprintf("%s cannot pack non java array to variable-length arguments",
					errMsgPrefix(this.Pos))))
				return
			}
			t.IsVariableArgs = true
		default:
			panic(sprintf("unhandled type:%s", this.Op))
		}
		return returnValueTypes, errs
	}

	fn mustBeOneValueContext(ts []Type) -> (t Type, err error) {
		if len(ts) == 0 {
			return null, null // no-type,no error
		}
		if len(ts) > 1 {
			err = new error(sprintf("%s multi value in single value context", errMsgPrefix(this.Pos)))
		}
		return ts[0], err
	}

	fn checkSingleValueContextExpression(block Block) -> (valueType Type, errs []error) {
		ts, es := this.check(block)
		ret, err := this.mustBeOneValueContext(ts)
		if err != null {
			if es == null {
				es = []error{err}
			} else {
				es.append(err)
			}
		}
		return ret, es
	}

	fn methodAccessAble(block Block, method ClassMethod) -> (err error ) {
		if this.Value.Type == VariableTypeObject {
			if method.IsStatic() {
				return new error(sprintf("%s method '%s' is static",
					this.Pos.ErrMsgPrefix(), method.Function.Name))
			}
			if false == this.IsIdentifier(ThisPointerName) {
				if this.Value.Class.LoadFromOutSide {
					if this.Value.Class.IsPublic() == false {
						return new error(sprintf("%s class '%s' is not public",
							this.Pos.ErrMsgPrefix(), this.Value.Class.Name))
					}
					if method.IsPublic() == false {
						return new error(sprintf("%s method '%s' is not public",
							this.Pos.ErrMsgPrefix(), method.Function.Name))
					}
				} else {
					if method.IsPrivate() {
						return new error(sprintf("%s method '%s' is private",
							this.Pos.ErrMsgPrefix(), method.Function.Name))
					}
				}
			}
		} else {
			if method.IsStatic() == false {
				return new error(sprintf("%s method '%s' is a instance method",
					this.Pos.ErrMsgPrefix(), method.Function.Name))
			}
			if this.Value.Class != block.InheritedAttribute.Class {
				if this.Value.Class.LoadFromOutSide {
					if this.Value.Class.IsPublic() == false {
						return new error(sprintf("%s class '%s' is not public",
							this.Pos.ErrMsgPrefix(), this.Value.Class.Name))

					}
					if method.IsPublic() == false {
						return new error(sprintf("%s method '%s' is not public",
							this.Pos.ErrMsgPrefix(), method.Function.Name))
					}
				} else {
					if method.IsPrivate() {
						return new error(sprintf("%s method '%s' is private",
							this.Pos.ErrMsgPrefix(), method.Function.Name))
					}
				}
			}
		}
		return null
	}

	fn fieldAccessAble(block Block, field ClassField) -> (err error ) {
		if this.Value.Type == VariableTypeObject {
			if field.IsStatic() {
				return new error(sprintf("%s field '%s' is static",
					this.Pos.ErrMsgPrefix(), field.Name))
			}
			if false == this.IsIdentifier(ThisPointerName) {
				if this.Value.Class.LoadFromOutSide {
					if this.Value.Class.IsPublic() == false {
						return new error(sprintf("%s class '%s' is not public",
							this.Pos.ErrMsgPrefix(), this.Value.Class.Name))
					}
					if field.IsPublic() == false {
						return new error(sprintf("%s field '%s' is not public",
							this.Pos.ErrMsgPrefix(), field.Name))
					}
				} else {
					if field.IsPrivate() {
						return new error(sprintf("%s field '%s' is private",
							this.Pos.ErrMsgPrefix(), field.Name))
					}
				}
			}
		} else { // class
			if field.IsStatic() == false {
				return new error(sprintf("%s field '%s' is not static",
					this.Pos.ErrMsgPrefix(), field.Name))
			}
			if this.Value.Class != block.InheritedAttribute.Class {
				if this.Value.Class.LoadFromOutSide {
					if this.Value.Class.IsPublic() == false {
						return new error(sprintf("%s class '%s' is not public",
							this.Pos.ErrMsgPrefix(), this.Value.Class.Name))
					}
					if field.IsPublic() == false {
						return new error(sprintf("%s field '%s' is not public",
							this.Pos.ErrMsgPrefix(), field.Name))
					}
				} else {
					if field.IsPrivate() {
						return new error(sprintf("%s field '%s' is private",
							this.Pos.ErrMsgPrefix(), field.Name))
					}
				}
			}
		}
		return null
	}

	fn getLongValue() ->(longValue long) {
		if this.isNumber() == false {
			panic("not number")
		}
		switch this.Type {
		case ExpressionTypeByte ,ExpressionTypeChar,ExpressionTypeShort ,ExpressionTypeLong :
			return this.longValue
		case ExpressionTypeFloat,ExpressionTypeDouble:
			return long(this.doubleValue)
        default:
		}
		panic("no match")
	}

	fn getDoubleValue() ->(doubleValue double) {
		if this.isNumber() == false {
			panic("not number")
		}
		switch this.Type {
		case ExpressionTypeByte,ExpressionTypeChar, ExpressionTypeShort,
		    ExpressionTypeInt, ExpressionTypeLong:
			return double(this.longValue)
		case ExpressionTypeFloat , ExpressionTypeDouble:
			return double(this.doubleValue)
        default:
		}
		panic("no match")
	}

	fn binaryWrongOpErr() -> (err error) {
		var typ1, typ2 string
		bin := this.Data.(ExpressionBinary)
		if bin.Left.Value != null {
			typ1 = bin.Left.Value.TypeString()
		} else {
			typ1 = bin.Left.Op
		}
		if bin.Right.Value != null {
			typ2 = bin.Right.Value.TypeString()
		} else {
			typ2 = bin.Right.Op
		}
		return new error(sprintf("%s cannot apply '%s' on '%s' and '%s'",
			this.Pos.ErrMsgPrefix(),
			this.Op,
			typ1,
			typ2))
	}
	fn getLeftValue(block Block, errs []error)  -> (result Type){
		return ExpressionCheckLeftValue.getLeftValue(this,block ,errs )
	}
	fn constantFold() -> (is bool, err error){
		return ExpressionConstFold.constantFold(this)
	}

	fn convertLiteralToNumberType(to VariableTypeKind) {
		if this.isNumber() == false {
			panic("not a number")
		}
		switch to {
		case VariableTypeByte:
			this.longValue = this.getLongValue()
			this.Type = ExpressionTypeByte
		case VariableTypeShort:
			this.longValue = this.getLongValue()
			this.Type = ExpressionTypeShort
		case VariableTypeChar:
			this.longValue = this.getLongValue()
			this.Type = ExpressionTypeChar
		case VariableTypeInt:
			this.longValue = this.getLongValue()
			this.Type = ExpressionTypeInt
		case VariableTypeLong:
			this.longValue = this.getLongValue()
			this.Type = ExpressionTypeLong
		case VariableTypeFloat:
			this.doubleValue = this.getDoubleValue()
			this.Type = ExpressionTypeFloat
		case VariableTypeDouble:
			this.doubleValue = this.getDoubleValue()
			this.Type = ExpressionTypeDouble
		default:
		}
	}
	
}
 