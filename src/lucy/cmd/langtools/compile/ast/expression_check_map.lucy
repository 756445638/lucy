class ExpressionCheckMap {
	
	static fn check(e Expression , block Block, errs []error) ->(valueType Type) {
		m := e.Data.(ExpressionMap)
		if m.Type != null {
			if err := m.Type.resolve(block); err != null {
				errs.append(err)
			}
		}
		var mapK Type
		var mapV Type
		noType := m.Type == null
		if noType && len(m.KeyValuePairs) == 0 {
			errs.append(new error(sprintf("%s map literal has no type and no initiational values,"+
					"cannot inference it`s type",
					errMsgPrefix(e.Pos))))
			return null
		}
		if m.Type == null {
			m.Type = new Type()
			m.Type.Pos = e.Pos
			m.Type.Type = VariableTypeMap
		}
		if m.Type.Map == null {
			m.Type.Map = new Map()
		}
		longMap := new map { long -> Pos }  ()
		doubleMap := new map { double -> Pos } ()
		stringMap := new map { string-> Pos }()
		for _, v := range m.KeyValuePairs {
			// map k
			kType, es := v.Key.checkSingleValueContextExpression(block)
			errs.appendAll(es)
			if kType != null {
				if err := kType.rightValueValid(); err != null {
					errs.append(err)
					continue
				}
				if noType && m.Type.Map.K == null {
					if err := kType.isTyped(); err != null {
						errs.append(err)
					} else {
						m.Type.Map.K = kType
						mapK = m.Type.Map.K
					}
				}
				if mapK != null {
					if mapK.assignAble(errs, kType) == false {
						if noType {
							errs.append(new error(sprintf("%s mix '%s' and '%s' for map value",
								errMsgPrefix(v.Key.Pos),
								kType.TypeString(), mapK.TypeString())))
						} else {
							errs.append(new error(sprintf("%s cannot use '%s' as '%s'",
								errMsgPrefix(v.Key.Pos),
								kType.TypeString(), mapK.TypeString())))
						}
					}
				}
			}
			if m.Type.Map.K != null &&
				v.Key.isLiteral() &&
				m.Type.Map.K.Type == v.Key.Value.Type {
				fn errMsg (pos Pos, first Pos, which string) -> (err error) {
					errMsg := sprintf("%s  '%s' duplicate key,first declared at:\n",
						pos.ErrMsgPrefix(), which)
					errMsg += sprintf("\t%s", errMsgPrefix(first))
					return new error(errMsg)
				}
				switch m.Type.Map.K.Type {
				case VariableTypeByte ,VariableTypeChar , VariableTypeShort , VariableTypeInt , VariableTypeLong:
					value := v.Key.longValue
					if first := longMap[value]; first != null {
						errs.append(errMsg(v.Key.Pos, first, ""+value))
					} else {
						longMap[value] = v.Key.Pos
					}
				case VariableTypeFloat ,VariableTypeDouble :
					value := v.Key.doubleValue
					if first := doubleMap[value]; first != null {
						errs.append(errMsg(v.Key.Pos, first, value + ""))
					} else {
						doubleMap[value] = v.Key.Pos
					}
				case VariableTypeString:
					value := v.Key.Data.(string)
					if first := stringMap[value]; first != null {
						errs.append(errMsg(v.Key.Pos, first, value))
					} else {
						stringMap[value] = v.Key.Pos
					}
				default:
				}
			}
			// map v
			vType, es := v.Value.checkSingleValueContextExpression(block)
			errs.appendAll(es)
			if vType == null {
				continue
			}
			if err := vType.rightValueValid(); err != null {
				errs.append(err)
				continue
			}
			if noType && m.Type.Map.V == null {
				if err := vType.isTyped(); err != null {
					errs.append(err)
				} else {
					m.Type.Map.V = vType
					mapV = m.Type.Map.V
				}
			}
			if mapV != null {
				if mapV.assignAble(errs, vType) == false {
					if noType {
						errs.append(new error(sprintf("%s mix '%s' and '%s' for map key",
							errMsgPrefix(v.Value.Pos),
							vType.TypeString(), mapV.TypeString())))
					} else {
						errs.append(new error(sprintf("%s cannot use '%s' as '%s'",
							errMsgPrefix(v.Value.Pos),
							vType.TypeString(), mapV.TypeString())))
					}
				}
			}
		}
		if m.Type.Map.K == null {
			m.Type.Map.K = new Type ()
			m.Type.Map.K.Type = VariableTypeVoid
			m.Type.Map.K.Pos = e.Pos
		}
		if m.Type.Map.V == null {
			m.Type.Map.V = new Type()
			m.Type.Map.V.Type = VariableTypeVoid
			m.Type.Map.V.Pos = e.Pos
		}
		return m.Type
	}

} 

