
class ExpressionCheckSlice {
	static fn check(e Expression , block Block, errs []error) ->(valueType Type) {
		on := e.data.(ExpressionSlice)
		sliceOn, es := on.expressionOn.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if sliceOn == null {
			return null
		}
		if sliceOn.Type != VariableTypeArray &&
			sliceOn.Type != VariableTypeString {
			errs.append(new error( sprintf("%s cannot have slice on '%s'",
				sliceOn.pos.errMsgPrefix(), sliceOn.typeString())))
		}
		//start
		if on.start == null {
			on.start = new Expression()
			on.start.pos = e.pos
			on.start.op = "intLiteral"
			on.start.Type = ExpressionTypeInt
		}
		startType, es := on.start.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if startType != null {
			if startType.isInteger() == false {
				errs . append(new error( sprintf("%s cannot use '%s' for startIndex",
					startType.pos.errMsgPrefix(), startType.typeString())))
			} else {
				if startType.Type == VariableTypeLong {
					on.start.convertToNumberType(VariableTypeInt)
				}
				if on.start.isLiteral() {
					startIndexValue := on.start.getLongValue()
					if startIndexValue < 0 {
						errs.append(new error( sprintf("%s startIndex '%d' is negative",
								startType.pos.errMsgPrefix(), startIndexValue)))
					}
				}
			}
		}
		if on.end != null {
			endType, es := on.end.checkSingleValueContextExpression(block)
			errs.appendAll(es)
			if endType != null {
				if endType.isInteger() == false {
					errs . append(new error( sprintf("%s cannot use '%s' for endIndex",
						endType.pos.errMsgPrefix(), endType.typeString())))
				} else {
					if endType.Type == VariableTypeLong {
						on.end.convertToNumberType(VariableTypeInt)
					}
					if on.end.isLiteral() {
						endIndexValue := on.end.getLongValue()
						if endIndexValue < 0 {
							errs . append(new error( sprintf("%s endIndex '%d' is negative",
									endType.pos.errMsgPrefix(), endIndexValue)))
						}
						if startType != null &&
							startType.isInteger() &&
							on.start.isLiteral() {
							if on.start.getLongValue() > endIndexValue {
								errs.append(new error( sprintf("%s startIndex '%d' is greater than endIndex '%d'",
										endType.pos.errMsgPrefix(), on.start.getLongValue(), endIndexValue)))
							}
						}
					}
				}
			}
		}
		valueType = sliceOn.Clone()
		valueType.pos = e.pos
	}
}
 


