
class ExpressionCheckSlice {
	static fn check(e Expression , block Block, errs []error) ->(valueType Type) {
		on := e.data.(ExpressionSlice)
		sliceOn, es := on.ExpressionOn.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if sliceOn == null {
			return null
		}
		if sliceOn.Type != VariableTypeArray &&
			sliceOn.Type != VariableTypeString {
			errs . append(new error( sprintf("%s cannot have slice on '%s'",
				sliceOn.pos.ErrMsgPrefix(), sliceOn.typeString())))
		}
		//start
		if on.Start == null {
			on.Start = new Expression()
			on.Start.pos = e.pos
			on.Start.op = "intLiteral"
			on.Start.Type = ExpressionTypeInt
		}
		startType, es := on.Start.checkSingleValueContextExpression(block)
		errs.appendAll(es)
		if startType != null {
			if startType.isInteger() == false {
				errs . append(new error( sprintf("%s cannot use '%s' for startIndex",
					startType.pos.ErrMsgPrefix(), startType.typeString())))
			} else {
				if startType.Type == VariableTypeLong {
					on.Start.convertToNumberType(VariableTypeInt)
				}
				if on.Start.isLiteral() {
					startIndexValue := on.Start.getLongValue()
					if startIndexValue < 0 {
						errs.append(new error( sprintf("%s startIndex '%d' is negative",
								startType.pos.ErrMsgPrefix(), startIndexValue)))
					}
				}
			}
		}
		if on.End != null {
			endType, es := on.End.checkSingleValueContextExpression(block)
			errs.appendAll(es)
			if endType != null {
				if endType.isInteger() == false {
					errs . append(new error( sprintf("%s cannot use '%s' for endIndex",
						endType.pos.ErrMsgPrefix(), endType.typeString())))
				} else {
					if endType.Type == VariableTypeLong {
						on.End.convertToNumberType(VariableTypeInt)
					}
					if on.End.isLiteral() {
						endIndexValue := on.End.getLongValue()
						if endIndexValue < 0 {
							errs . append(new error( sprintf("%s endIndex '%d' is negative",
									endType.pos.ErrMsgPrefix(), endIndexValue)))
						}
						if startType != null &&
							startType.isInteger() &&
							on.Start.isLiteral() {
							if on.Start.getLongValue() > endIndexValue {
								errs . append(new error( sprintf("%s startIndex '%d' is greater than endIndex '%d'",
										endType.pos.ErrMsgPrefix(), on.Start.getLongValue(), endIndexValue)))
							}
						}
					}
				}
			}
		}
		valueType = sliceOn.Clone()
		valueType.pos = e.pos
	}
}
 


