import "lucy/cmd/langtools/compile/common"


public class Import {
	public accessName  string
	public Import string // full name
	public pos    Pos
	public used   bool
	/*
		import "github.com/lucy" should access by lucy.doSomething()
		import "github.com/std" as std2 should access by std2.doSomething()
	*/
	fn MkAccessName() -> (err error) {
		if this.accessName != null && this.accessName != "" {
			return null
		}
		if false == PackageNameIsValid(this.Import) {
			return new error(sprintf("%s '%s' is not a valid name",
				this.pos.errMsgPrefix(), this.Import))
		}
		this.accessName = common.getBaseName(this.Import)
		return null
	}
}

//different from different source file
class SourceFile {
	Imports            map { string -> Import }  // accessName -> *Import
	ImportsByResources map { string -> Import }  // resourceName -> *Import
	fn insertImport(i Import) ->(err error)  {
		if this.Imports == null {
			this.Imports = new  map { string -> Import }()
		}
		if this.ImportsByResources == null {
			this.ImportsByResources =new map { string -> Import }()
		}
		if err = i.MkAccessName(); err != null {
			return err
		}
		if this.Imports.keyExist(i.accessName){
			return new error(sprintf("%s '%s' reimported",
				i.pos.errMsgPrefix(), i.Import))
		}
		if this.ImportsByResources.keyExist(i.Import) {
			return new error(sprintf("%s '%s' reimported",
				i.pos.errMsgPrefix(), i.accessName))
		}
		this.ImportsByResources[i.Import] = i
		this.Imports[i.accessName] = i
		return null
	}
}

