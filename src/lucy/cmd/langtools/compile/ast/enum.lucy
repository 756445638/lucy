import "lucy/cmd/langtools/compile/jvm/cg"

public class EnumName {
	public Enum    Enum
	public Name    string
	public Pos     Pos
	public Value   int // int is bigger enough
	public Comment string
	public NoNeed  Expression
}


public class Enum   {
	public IsGlobal        bool
	public IsBuildIn       bool
	public AccessFlags     char
	public Name            string
	public Pos             Pos
	public Enums           []EnumName
	public Init            Expression //should be a int expression
	public Used            bool
	public DefaultValue    int
	public LoadFromOutSide bool
	public FirstValueIndex int
	public Comment         string
	
	fn isPublic() -> (is bool) {
		return this.AccessFlags&cg.AccClassPublic != 0
	}

	
	fn check() -> (errs []error = []error{}) {
		var initV int = 0
		if this.Init != null {
			if is, err := this.Init.constantFold(); err != null {
				errs.append(err)
			} else {
				if is == false {
					err := new error(sprintf("%s enum type must inited by 'int' literal",
						this.Pos.ErrMsgPrefix()))
					errs.append(err)
				} else {
					initV = int(this.Init.getLongValue())
				}
			}
		}
		this.DefaultValue = initV
		for k, v := range this.Enums {
			if v.NoNeed != null {
				errs.append(new error(sprintf("%s enum only expect 1 init value",
					v.Pos.ErrMsgPrefix())))
			}
			if k < this.FirstValueIndex {
				v.Value = initV - int(this.FirstValueIndex-k)
			} else {
				v.Value = initV + int(k-this.FirstValueIndex)
			}
		}
		return errs
	}	
}


