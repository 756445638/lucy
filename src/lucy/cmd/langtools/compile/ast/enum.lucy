import "lucy/cmd/langtools/compile/jvm/cg"
import "java/lang/Object"


public class EnumName {
	public Enum    Enum
	public name    string
	public pos     Pos
	public value   int // int is bigger enough
	public comment string
	public NoNeed  Expression
	public locateDefinition 	bool 
	public findUsage  bool 
	public rename 	bool 
	public getHover  bool 
	used bool 
    findUsageInstances []Usage 
}


public class Enum   {
	public isGlobal        bool
	public isBuildIn       bool
	public accessFlags     char
	public name            string
	public pos             Pos
	public enums           []EnumName
	public Init            Expression //should be a int expression
	public used            bool
	public defaultValue    int
	public loadFromOutSide bool
	public firstValueIndex int
	public comment         string
	public shortName      string 
	public locateDefinition 	bool 
	public findUsage  bool 
	public rename 	bool 
	public getHover  bool  
    findUsageInstances []Usage 

	public fmts []Object   // use for format 
    
    public fn appendFmt(f Object ){
        if this.fmts == null {
            this.fmts = [f]
        }else {
            this.fmts.append(f)
        }
    }
	
	public fn isPublic() -> (is bool) {
		return this.accessFlags&cg.AccClassPublic != 0
	}

	
	fn check(block Block) -> (errs []error = []error{}) {
		if this.locateDefinition {
			block.inheritedAttribute.p.locateDefinition = this.pos
			return 
		}
		if this.findUsage {
			u := new Usage()
			u.Type = "declaration"
			u.pos = this.pos 
			this.findUsageInstances = [u]
			block.inheritedAttribute.p.findUsage = this.findUsageInstances
			block.inheritedAttribute.p.findUsageIsGlobal = this.isGlobal
		}
		for _ , vv := range this.enums {
			if vv.locateDefinition {
				block.inheritedAttribute.p.locateDefinition = vv.pos 
				return	
			}
			if vv.findUsage {
				u := new Usage()
				u.Type = "declaration"
				u.pos = vv.pos 
				vv.findUsageInstances = [u]
				block.inheritedAttribute.p.findUsage = vv.findUsageInstances
				block.inheritedAttribute.p.findUsageIsGlobal = this.isGlobal
			}
		}
		
		var initV int = 0
		if this.Init != null {
			if is, err := this.Init.constantFold(); err != null {
				errs.append(err)
			} else {
				if is == false {
					err := new error(sprintf("%s enum type must inited by 'int' literal",
						this.pos.errMsgPrefix()))
					errs.append(err)
				} else {
					initV = int(this.Init.getLongValue())
				}
			}
		}
		this.defaultValue = initV
		for k, v := range this.enums {
			if v.NoNeed != null {
				errs.append(new error(sprintf("%s enum only expect 1 init value",
					v.pos.errMsgPrefix())))
			}
			if k < this.firstValueIndex {
				v.value = initV - int(this.firstValueIndex-k)
			} else {
				v.value = initV + int(k-this.firstValueIndex)
			}
		}
		return errs
	}	
}


