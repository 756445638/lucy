import "lucy/jvm/cg"

public class ClassField {
    public Class                  Class     
    public defaultValueExpression Expression
    public name                   string    
    public Type                   Type      
    public pos                    Pos       
    public comment                string    
    public accessFlags            char      
    public jvmDescriptor          string    
    public locateDefinition       bool      
    public findUsage              bool            
    public autoCompletion         bool      
    public findUsageInstances     []Usage   

    /*
		a // this is a inline comment
	*/
    public inlineComment string //   in

    public containsLf bool // constains "\n"

    public fn isStatic() -> (is bool) {
        return (this.accessFlags & cg.AccFieldStatic) != 0
    }
    public fn isPublic() -> (is bool) {
        return (this.accessFlags & cg.AccFieldPublic) != 0
    }
    public fn isProtected() -> (is bool) {
        return (this.accessFlags & cg.AccFieldProtected) != 0
    }
    public fn isPrivate() -> (is bool) {
        return (this.accessFlags & cg.AccFieldPrivate) != 0
    }
    public fn isVolatile() -> (is bool) {
        return (this.accessFlags & cg.AccFieldVolatile) != 0
    }
    public fn isFinal() -> (is bool) {
        return (this.accessFlags & cg.AccFieldFinal) != 0
    }
    public fn ableAccessFromSubClass() -> (accessable bool) {
        return this.isPublic() ||
            this.isProtected()
    }

    public fn mkDescription() -> (d string = "") {
        if this.inlineComment != null {
            d += this.inlineComment
        } else if this.comment != null {
            d += this.comment
        }
        d += "field"
        if this.isPublic() {
            d = "public"
        } else if this.isProtected() {
            d = "protected"
        } else if this.isPrivate() {
            d = "private"
        }
        if this.isStatic() {
            if d == "" {
                d = "static"
            } else {
                d += " static"
            }

        }
        if this.isFinal() {
            if d == "" {
                d = "final"
            } else {
                d += " final"
            }

        }
        if this.isVolatile() {
            if d == "" {
                d = "volatile"
            } else {
                d += " volatile"
            }

        }
        if d != "" {
            d += " "
        }
        d += this.name
        d += " "
        if this.Type != null {
            d += this.Type.typeString("")
        }
    }

}


