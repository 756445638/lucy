import "lucy/cmd/langtools/compile/jvm/cg"


class ForRangeAttr {
	IdentifierKey   ExpressionIdentifier
	IdentifierValue ExpressionIdentifier
	ExpressionKey   Expression
	ExpressionValue Expression
	RangeOn         Expression
}



public class StatementFor {
	public RangeAttr           ForRangeAttr
	public Exits               []cg.Exit
	public ContinueCodeOffset  int
	public Pos                 Pos
	initExpressionBlock Block = new Block()
	/*
		for i := 0 ; i < 10 ;i ++ {

		}
	*/
	public Init      Expression
	public Condition Expression
	public Increment Expression
	public Block     Block


	fn checkRange() ->(errs []error= []error{})  {
		//
		var rangeExpression Expression
		bin := this.Condition.Data.(ExpressionBinary)
		if bin.Right.Type == ExpressionTypeRange {
			rangeExpression = this.Condition.Data.(Expression)
		} else if bin.Right.Type == ExpressionTypeList {
			t := bin.Right.Data.([]Expression)
			if len(t) > 1 {
				errs.append(
					new error(sprintf("%s for range statement only allow one argument on the right",
						errMsgPrefix(t[1].Pos))))
			}
			rangeExpression = t[0].Data.(Expression)
		}
		rangeOn, es := rangeExpression.checkSingleValueContextExpression(this.initExpressionBlock)
		errs.appendAll(es)
		if rangeOn == null {
			return errs
		}
		if rangeOn.Type == VariableTypeString {
			// byte[]("")
			conversion := new ExpressionTypeConversion()
			conversion.Type = new Type()
			conversion.Type.Type = VariableTypeJavaArray
			conversion.Type.Pos = rangeOn.Pos
			conversion.Type.Array = new Type()
			conversion.Type.Array.Type = VariableTypeByte
			conversion.Type.Array.Pos = rangeOn.Pos
			conversion.Expression = rangeExpression
			bs := new Expression()
			bs.Type = ExpressionTypeCheckCast
			bs.Data = conversion
			bs.Pos = rangeOn.Pos
			bs.Value = conversion.Type
			rangeExpression = bs
			rangeOn = conversion.Type
		}
		if rangeOn.Type != VariableTypeArray &&
			rangeOn.Type != VariableTypeJavaArray &&
			rangeOn.Type != VariableTypeMap {
			errs.append( new error(sprintf("%s cannot range on '%s'",
				errMsgPrefix(rangeExpression.Pos), rangeOn.TypeString())))
			return errs
		}
		var lefts []Expression
		if bin.Left.Type == ExpressionTypeList {
			lefts = bin.Left.Data.([]Expression)
		} else {
			lefts = []Expression{bin.Left}
		}
		if len(lefts) > 2 {
			errs.append(
				new error(sprintf("%s cannot have more than 2 expressions on the left",
					errMsgPrefix(lefts[2].Pos))))
			lefts = lefts[0:2]
		}
		modelKv := len(lefts) == 2
		this.RangeAttr = new ForRangeAttr()
		this.RangeAttr.RangeOn = rangeExpression
		var err error
		if this.Condition.Type == ExpressionTypeVarAssign {
			for _, v := range lefts {
				if v.Type != ExpressionTypeIdentifier {
					errs.append(
						new error(sprintf("%s not a identifier on left",
							errMsgPrefix(v.Pos))))
					return errs
				}
			}
			var identifierK ExpressionIdentifier
			var identifierV ExpressionIdentifier
			var posK, posV Pos
			if modelKv {
				identifierK = lefts[0].Data.(ExpressionIdentifier)
				identifierV = lefts[1].Data.(ExpressionIdentifier)
				posK = lefts[0].Pos
				posV = lefts[1].Pos
			} else {
				identifierV = lefts[0].Data.(ExpressionIdentifier)
				posV = lefts[0].Pos
			}
			if identifierV.Name != UnderScore {
				vd := new Variable()
				if rangeOn.Type == VariableTypeArray ||
					rangeOn.Type == VariableTypeJavaArray {
					vd.Type = rangeOn.Array.Clone()
				} else {
					vd.Type = rangeOn.Map.V.Clone()
				}
				vd.Pos = posV
				vd.Name = identifierV.Name
				err = this.initExpressionBlock.Insert(identifierV.Name, this.Condition.Pos, vd)
				if err != null {
					errs.append(err)
				}
				identifierV.Variable = vd
				this.RangeAttr.IdentifierValue = identifierV
			}
			if modelKv &&
				identifierK.Name != UnderScore {
				vd := new Variable()
				var vt Type
				if rangeOn.Type == VariableTypeArray ||
					rangeOn.Type == VariableTypeJavaArray {
					vt = new Type()
					vt.Type = VariableTypeInt
				} else {
					vt = rangeOn.Map.K.Clone()
					vt.Pos = rangeOn.Pos
				}
				vd.Name = identifierK.Name
				vd.Type = vt
				vd.Pos = posK
				err = this.initExpressionBlock.Insert(identifierK.Name, posK, vd)
				if err != null {
					errs.append(err)
				}
				identifierK.Variable = vd
				this.RangeAttr.IdentifierKey = identifierK
			}
		} else { // k,v = range arr
			if modelKv {
				if false == lefts[0].IsIdentifier(UnderScore) {
					this.RangeAttr.ExpressionKey = lefts[0]
				}
				if false == lefts[1].IsIdentifier(UnderScore) {
					this.RangeAttr.ExpressionValue = lefts[1]
				}
			} else {
				if false == lefts[0].IsIdentifier(UnderScore) {
					this.RangeAttr.ExpressionValue = lefts[0]
				}
			}
			var receiverKType Type
			if this.RangeAttr.ExpressionKey != null {
				receiverKType = this.RangeAttr.ExpressionKey.getLeftValue(this.initExpressionBlock, errs)
				if receiverKType == null {
					return errs
				}
			}
			var receiverVType Type
			if this.RangeAttr.ExpressionValue != null {
				receiverVType = this.RangeAttr.ExpressionValue.getLeftValue(this.initExpressionBlock, errs)
				if receiverVType == null {
					return errs
				}
			}
			var kType, vType Type
			if rangeOn.Type == VariableTypeArray ||
				rangeOn.Type == VariableTypeJavaArray {
				kType = new Type()
				kType.Type = VariableTypeInt

				vType = rangeOn.Array
			} else {
				kType = rangeOn.Map.K
				vType = rangeOn.Map.V
			}
			if receiverKType != null {
				if receiverKType.assignAble(errs, kType) == false {
					err = new error(sprintf("%s cannot use '%s' as '%s' for index",
						errMsgPrefix(this.RangeAttr.ExpressionKey.Pos),
						receiverKType.TypeString(), kType.TypeString()))
					errs.append(err)
					return errs
				}
			}
			if receiverVType != null {
				if receiverVType.assignAble(errs, vType) == false {
					err = new error(sprintf("%s cannot use '%s' as '%s' for value destination",
						errMsgPrefix(this.RangeAttr.ExpressionKey.Pos),
						receiverKType.TypeString(), kType.TypeString()))
					errs.append(err)
					return errs
				}
			}
		}
		errs.appendAll( this.Block.check())
		return errs
	}
	fn check(block Block) ->(errs []error = []error{})  {
		this.initExpressionBlock.inherit(block)
		this.initExpressionBlock.InheritedAttribute.ForContinue = this
		this.initExpressionBlock.InheritedAttribute.ForBreak = this
		this.Block.inherit(this.initExpressionBlock)
		if this.Init == null &&
			this.Increment == null &&
			this.Condition != null &&
			this.Condition.canBeUsedForRange() {
			// for k,v := range arr
			return this.checkRange()
		}
		if this.Init != null {
			this.Init.IsStatementExpression = true
			if err := this.Init.canBeUsedAsStatement(); err != null {
				errs.append(err)
			}
			_, es := this.Init.check(this.initExpressionBlock)
			errs.appendAll(es)
		}
		if this.Condition != null {
			if err := this.Condition.canBeUsedAsCondition(); err != null {
				errs.append(err)
			}
			t, es := this.Condition.checkSingleValueContextExpression(this.initExpressionBlock)
			errs.appendAll(es)
			if t != null && t.Type != VariableTypeBool {
				errs.append( new error(sprintf("%s condition must be bool expression,but %s",
					errMsgPrefix(this.Condition.Pos), t.TypeString())))
			}
		}
		if this.Increment != null {
			this.Increment.IsStatementExpression = true
			if err := this.Increment.canBeUsedAsStatement(); err != null {
				errs.append(err)
			}
			_, es := this.Increment.check(this.initExpressionBlock)
			errs.appendAll(es)
		}
		if len(errs) > 0 {
			return errs
		}
		errs.appendAll( this.Block.check())
		return errs
	}	
}



