 

class StatementIf {
	PrefixExpressions   []Expression
	Condition           Expression
	Pos                 Pos
	initExpressionBlock Block = new Block()
	Block               Block
	ElseIfList          []StatementElseIf
	Else               	Block
	Exits               []cg.Exit
	
	fn check(father Block) -> (errs []error = []error{})  {
		this.initExpressionBlock.inherit(father)
		for _, v := range this.PrefixExpressions {
			v.IsStatementExpression = true
			_, es := v.check(&this.initExpressionBlock)
			errs.appendAll(es)
			if err := v.canBeUsedAsStatement(); err != null {
				errs.append(err)
			}
		}
		if this.Condition != null {
			conditionType, es := this.Condition.checkSingleValueContextExpression(&this.initExpressionBlock)
			errs.appendAll(es)
			if conditionType != null &&
				conditionType.Type != VariableTypeBool {
				errs = append(errs, fmt.Errorf("%s condition is not a bool expression",
					this.Condition.Pos.ErrMsgPrefix()))
			}
			if err := this.Condition.canBeUsedAsCondition(); err != null {
				errs.append(err)
			}
		}
		this.Block.inherit(&this.initExpressionBlock)
		errs = append(errs, this.Block.check()...)
		for _, v := range this.ElseIfList {
			v.Block.inherit(&this.initExpressionBlock)
			if v.Condition != null {
				conditionType, es := v.Condition.checkSingleValueContextExpression(v.Block)
				errs.appendAll(es)
				if err := v.Condition.canBeUsedAsCondition(); err != null {
					errs.append(err)
				}
				if conditionType != null &&
					conditionType.Type != VariableTypeBool {
					errs = append(errs,
						fmt.Errorf("%s condition is not a bool expression",
							conditionType.Pos.ErrMsgPrefix()))
				}
				errs = append(errs, v.Block.check()...)
			}
		}
		if this.Else != null {
			this.Else.inherit(&this.initExpressionBlock)
			errs = append(errs, this.Else.check()...)
		}
		return errs
	}
}



type StatementElseIf struct {
	Condition Expression
	Block     Block
}
